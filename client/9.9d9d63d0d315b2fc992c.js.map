{"version":3,"sources":["webpack:///./components/login/login_mfa.jsx","webpack:///./actions/views/login.js","webpack:///./components/login/login_controller/login_controller.jsx","webpack:///./components/login/login_controller/index.js","webpack:///./components/common/back_button.jsx","webpack:///./images/logo.png","webpack:///./components/common/site_name_and_description.jsx"],"names":["LoginMfa","React","PureComponent","constructor","props","super","_defineProperty","this","e","preventDefault","token","target","value","trim","replace","state","setState","submit","loginId","password","saving","serverError","render","errorClass","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","className","onSubmit","handleSubmit","react_intl__WEBPACK_IMPORTED_MODULE_4__","id","defaultMessage","components_localized_input_localized_input__WEBPACK_IMPORTED_MODULE_8__","type","name","placeholder","t","spellCheck","autoComplete","autoFocus","onChange","handleChange","components_save_button_jsx__WEBPACK_IMPORTED_MODULE_7__","disabled","onClick","localizeMessage","savingMessage","PropTypes","string","isRequired","func","login","mfaToken","dispatch","ignoreMfaRequiredError","UserActions","loginById","userId","async","promise","result","error","server_error_id","data","LoginController","Component","sessionExpired","document","title","intl","formatMessage","siteName","closeSessionExpiredNotification","showNotification","body","Utils","requireInteraction","silent","window","focus","then","closeNotification","catch","onDismissSessionExpired","location","newQuery","search","browserHistory","concat","pathname","hash","refs","toLowerCase","msgId","emailSigninEnabled","usernameSigninEnabled","ldapEnabled","react_default","index_es","values","ldapUsername","ldapLoginFieldName","loading","actions","push","encodeURIComponent","showMfa","message","params","URLSearchParams","inviteToken","get","inviteId","team","addUserToTeamFromInvite","finishSignin","experimentalPrimaryTeam","redirectTo","LocalStorageStore","setWasLoggedIn","match","GlobalActions","brandImageError","enableCustomBrand","text","customBrandText","formattedText","TextFormatting","brandImageUrl","Client4","getBrandImageUrl","brandImageStyle","display","alt","src","onError","handleBrandImageError","style","messageHtmlToComponent","mentions","imagesMetadata","loginPlaceholders","length","slice","join","enableSignUpWithEmail","enableSignUpWithGitLab","enableSignUpWithOffice365","enableSignUpWithGoogle","enableLdap","enableSaml","extraParam","fa_warning_icon","react_router_dom","to","Constants","GET_TERMS_ERROR","TERMS_REJECTED","formatted_markdown_message","SIGNIN_CHANGE","fa_success_icon","SIGNIN_VERIFIED","PASSWORD_CHANGE","CREATE_LDAP","loginControls","gitlabSigninEnabled","googleSigninEnabled","office365SigninEnabled","samlSigninEnabled","samlEnabled","key","preSubmit","form_error","margin","ref","handleLoginIdChange","createLoginPlaceholder","autoCapitalize","localized_input","handlePasswordChange","loading_wrapper","enableOpenServer","checkSignUpEnabled","href","getOAuthRoute","getUrl","samlLoginButtonText","createExtraText","isLicensed","enableSignInWithUsername","enableSignInWithEmail","componentDidMount","configureTitle","currentUser","extra","email","getWasLoggedIn","set","SESSION_EXPIRED","showSessionExpiredNotificationIfNeeded","componentDidUpdate","componentWillUnmount","customDescriptionText","initializing","loading_screen","content","customContent","customClass","backButton","login_mfa","back_button","hideMfa","createLoginOptions","createCustomLogin","announcement_bar","logoImage","site_name_and_description","intlShape","object","bool","shape","injectIntl","connect","config","getConfig","getLicense","IsLicensed","CustomBrandText","CustomDescriptionText","EnableCustomBrand","EnableLdap","EnableOpenServer","EnableSaml","EnableSignInWithEmail","EnableSignInWithUsername","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableSignUpWithOffice365","LdapLoginFieldName","SamlLoginButtonText","SiteName","requests","users","logout","status","RequestStatus","SUCCESS","storage","initialized","ExperimentalPrimaryTeam","getTeamByName","member","getMyTeamMember","team_id","getCurrentUser","bindActionCreators","BackButton","react__WEBPACK_IMPORTED_MODULE_1___default","react_router_dom__WEBPACK_IMPORTED_MODULE_3__","url","react_intl__WEBPACK_IMPORTED_MODULE_2__","module","exports","__webpack_require__","p","SiteNameAndDescription","description","Fragment"],"mappings":"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","file":"9.9d9d63d0d315b2fc992c.js","sourcesContent":["// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SaveButton from 'components/save_button.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class LoginMfa extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * User's login ID\n         */\n        loginId: PropTypes.string.isRequired,\n\n        /*\n         * User's password\n         */\n        password: PropTypes.string.isRequired,\n\n        /*\n         * Function to call when submitting user credentials\n         */\n        submit: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            saving: false,\n            token: '',\n            serverError: '',\n        };\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        const token = e.target.value.trim().replace(/\\s/g, '');\n\n        if (token !== this.state.token) {\n            this.setState({\n                token,\n            });\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        state.serverError = '';\n        state.saving = true;\n        this.setState(state);\n\n        this.props.submit(\n            this.props.loginId,\n            this.props.password,\n            this.state.token\n        );\n    }\n\n    render() {\n        let serverError;\n        let errorClass = '';\n        if (this.state.serverError) {\n            serverError = <label className='control-label'>{this.state.serverError}</label>;\n            errorClass = ' has-error';\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className='signup__email-container'>\n                    <p>\n                        <FormattedMessage\n                            id='login_mfa.enterToken'\n                            defaultMessage=\"To complete the sign in process, please enter a token from your smartphone's authenticator\"\n                        />\n                    </p>\n                    <div className={'form-group' + errorClass}>\n                        {serverError}\n                    </div>\n                    <div className={'form-group' + errorClass}>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            name='token'\n                            placeholder={{id: t('login_mfa.token'), defaultMessage: 'MFA Token'}}\n                            spellCheck='false'\n                            autoComplete='off'\n                            autoFocus={true}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={this.state.saving}\n                            onClick={this.handleSubmit}\n                            defaultMessage={localizeMessage('login_mfa.submit', 'Submit')}\n                            savingMessage={localizeMessage('login_mfa.submitting', 'Submitting...')}\n                        />\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\n\nexport function login(loginId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.login(loginId, password, mfaToken)));\n    };\n}\n\nexport function loginById(userId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.loginById(userId, password, mfaToken)));\n    };\n}\n\nasync function ignoreMfaRequiredError(promise) {\n    let result = await promise;\n\n    if (result.error && result.error.server_error_id === 'api.context.mfa_required.app_error') {\n        result = {data: true};\n    }\n\n    return result;\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, injectIntl, intlShape} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport LocalStorageStore from 'stores/local_storage_store';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants.jsx';\nimport messageHtmlToComponent from 'utils/message_html_to_component';\nimport * as TextFormatting from 'utils/text_formatting.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {showNotification} from 'utils/notifications.jsx';\nimport {t} from 'utils/i18n.jsx';\n\nimport logoImage from 'images/logo.png';\n\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\nimport AnnouncementBar from 'components/announcement_bar';\nimport FormError from 'components/form_error.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport BackButton from 'components/common/back_button.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\nimport SuccessIcon from 'components/widgets/icons/fa_success_icon';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport LoginMfa from '../login_mfa.jsx';\n\nclass LoginController extends React.Component {\n    static propTypes = {\n        intl: intlShape.isRequired,\n\n        location: PropTypes.object.isRequired,\n        isLicensed: PropTypes.bool.isRequired,\n        currentUser: PropTypes.object,\n        customBrandText: PropTypes.string,\n        customDescriptionText: PropTypes.string,\n        enableCustomBrand: PropTypes.bool.isRequired,\n        enableLdap: PropTypes.bool.isRequired,\n        enableOpenServer: PropTypes.bool.isRequired,\n        enableSaml: PropTypes.bool.isRequired,\n        enableSignInWithEmail: PropTypes.bool.isRequired,\n        enableSignInWithUsername: PropTypes.bool.isRequired,\n        enableSignUpWithEmail: PropTypes.bool.isRequired,\n        enableSignUpWithGitLab: PropTypes.bool.isRequired,\n        enableSignUpWithGoogle: PropTypes.bool.isRequired,\n        enableSignUpWithOffice365: PropTypes.bool.isRequired,\n        experimentalPrimaryTeam: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string,\n        samlLoginButtonText: PropTypes.string,\n        siteName: PropTypes.string,\n        initializing: PropTypes.bool,\n        actions: PropTypes.shape({\n            login: PropTypes.func.isRequired,\n            addUserToTeamFromInvite: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        let loginId = '';\n        if ((new URLSearchParams(this.props.location.search)).get('extra') === Constants.SIGNIN_VERIFIED && (new URLSearchParams(this.props.location.search)).get('email')) {\n            loginId = (new URLSearchParams(this.props.location.search)).get('email');\n        }\n\n        this.state = {\n            ldapEnabled: this.props.isLicensed && this.props.enableLdap,\n            usernameSigninEnabled: this.props.enableSignInWithUsername,\n            emailSigninEnabled: this.props.enableSignInWithEmail,\n            samlEnabled: this.props.isLicensed && this.props.enableSaml,\n            loginId,\n            password: '',\n            showMfa: false,\n            loading: false,\n            sessionExpired: false,\n            brandImageError: false,\n        };\n    }\n\n    componentDidMount() {\n        this.configureTitle();\n\n        if (this.props.currentUser) {\n            GlobalActions.redirectUserToDefaultTeam();\n            return;\n        }\n\n        const search = new URLSearchParams(this.props.location.search);\n        const extra = search.get('extra');\n        const email = search.get('email');\n\n        if (extra === Constants.SIGNIN_VERIFIED && email) {\n            this.refs.password.focus();\n        }\n\n        // Determine if the user was unexpectedly logged out.\n        if (LocalStorageStore.getWasLoggedIn()) {\n            if (extra === Constants.SIGNIN_CHANGE) {\n                // Assume that if the user triggered a sign in change, it was intended to logout.\n                // We can't preflight this, since in some flows it's the server that invalidates\n                // our session after we use it to complete the sign in change.\n                LocalStorageStore.setWasLoggedIn(false);\n            } else {\n                // Although the authority remains the local sessionExpired bit on the state, set this\n                // extra field in the querystring to signal the desktop app. And although eslint\n                // complains about this, it is allowed: https://reactjs.org/docs/react-component.html#componentdidmount.\n                // eslint-disable-next-line react/no-did-mount-set-state\n                this.setState({sessionExpired: true});\n                search.set('extra', Constants.SESSION_EXPIRED);\n                browserHistory.replace(`${this.props.location.pathname}?${search}`);\n            }\n        }\n\n        this.showSessionExpiredNotificationIfNeeded();\n    }\n\n    componentDidUpdate() {\n        this.configureTitle();\n        this.showSessionExpiredNotificationIfNeeded();\n    }\n\n    componentWillUnmount() {\n        if (this.closeSessionExpiredNotification) {\n            this.closeSessionExpiredNotification();\n            this.closeSessionExpiredNotification = null;\n        }\n    }\n\n    configureTitle = () => {\n        if (this.state.sessionExpired) {\n            document.title = this.props.intl.formatMessage({\n                id: 'login.session_expired.title',\n                defaultMessage: '* {siteName} - Session Expired',\n            }, {\n                siteName: this.props.siteName,\n            });\n        } else {\n            document.title = this.props.siteName;\n        }\n    }\n\n    showSessionExpiredNotificationIfNeeded = () => {\n        if (this.state.sessionExpired && !this.closeSessionExpiredNotification) {\n            showNotification({\n                title: this.props.siteName,\n                body: Utils.localizeMessage(\n                    'login.session_expired.notification',\n                    'Session Expired: Please sign in to continue receiving notifications.'\n                ),\n                requireInteraction: true,\n                silent: false,\n                onClick: () => {\n                    window.focus();\n                    if (this.closeSessionExpiredNotification()) {\n                        this.closeSessionExpiredNotification();\n                        this.closeSessionExpiredNotification = null;\n                    }\n                },\n            }).then((closeNotification) => {\n                this.closeSessionExpiredNotification = closeNotification;\n            }).catch(() => {\n                // Ignore the failure to display the notification.\n            });\n        } else if (!this.state.sessionExpired && this.closeSessionExpiredNotification) {\n            this.closeSessionExpiredNotification();\n            this.closeSessionExpiredNotification = null;\n        }\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n\n        // Discard any session expiry notice once the user interacts with the login page.\n        this.onDismissSessionExpired();\n\n        const {location} = this.props;\n        const newQuery = location.search.replace(/(extra=password_change)&?/i, '');\n        if (newQuery !== location.search) {\n            browserHistory.replace(`${location.pathname}${newQuery}${location.hash}`);\n        }\n\n        // password managers don't always call onInput handlers for form fields so it's possible\n        // for the state to get out of sync with what the user sees in the browser\n        let loginId = this.state.loginId;\n        if (this.refs.loginId) {\n            loginId = this.refs.loginId.value;\n            if (loginId !== this.state.loginId) {\n                this.setState({loginId});\n            }\n        }\n\n        let password = this.state.password;\n        if (this.refs.password) {\n            password = this.refs.password.value;\n            if (password !== this.state.password) {\n                this.setState({password});\n            }\n        }\n\n        // don't trim the password since we support spaces in passwords\n        loginId = loginId.trim().toLowerCase();\n\n        if (!loginId) {\n            t('login.noEmail');\n            t('login.noEmailLdapUsername');\n            t('login.noEmailUsername');\n            t('login.noEmailUsernameLdapUsername');\n            t('login.noLdapUsername');\n            t('login.noUsername');\n            t('login.noUsernameLdapUsername');\n\n            // it's slightly weird to be constructing the message ID, but it's a bit nicer than triply nested if statements\n            let msgId = 'login.no';\n            if (this.state.emailSigninEnabled) {\n                msgId += 'Email';\n            }\n            if (this.state.usernameSigninEnabled) {\n                msgId += 'Username';\n            }\n            if (this.state.ldapEnabled) {\n                msgId += 'LdapUsername';\n            }\n\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id={msgId}\n                        values={{\n                            ldapUsername: this.props.ldapLoginFieldName || Utils.localizeMessage('login.ldapUsernameLower', 'AD/LDAP username'),\n                        }}\n                    />\n                ),\n            });\n            return;\n        }\n\n        if (!password) {\n            this.setState({\n                serverError: (\n                    <FormattedMessage\n                        id='login.noPassword'\n                        defaultMessage='Please enter your password'\n                    />\n                ),\n            });\n            return;\n        }\n\n        this.submit(loginId, password, '');\n    }\n\n    submit = (loginId, password, token) => {\n        this.setState({serverError: null, loading: true});\n\n        this.props.actions.login(loginId, password, token).then(async ({error}) => {\n            if (error) {\n                if (error.server_error_id === 'api.user.login.not_verified.app_error') {\n                    browserHistory.push('/should_verify_email?&email=' + encodeURIComponent(loginId));\n                } else if (error.server_error_id === 'store.sql_user.get_for_login.app_error' ||\n                    error.server_error_id === 'ent.ldap.do_login.user_not_registered.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.userNotFound'\n                                defaultMessage=\"We couldn't find an account matching your login credentials.\"\n                            />\n                        ),\n                    });\n                } else if (error.server_error_id === 'api.user.check_user_password.invalid.app_error' || error.server_error_id === 'ent.ldap.do_login.invalid_password.app_error') {\n                    this.setState({\n                        showMfa: false,\n                        loading: false,\n                        serverError: (\n                            <FormattedMessage\n                                id='login.invalidPassword'\n                                defaultMessage='Your password is incorrect.'\n                            />\n                        ),\n                    });\n                } else if (!this.state.showMfa && error.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({showMfa: false, serverError: error.message, loading: false});\n                }\n\n                return;\n            }\n\n            // check for query params brought over from signup_user_complete\n            const params = new URLSearchParams(this.props.location.search);\n            const inviteToken = params.get('t') || '';\n            const inviteId = params.get('id') || '';\n\n            if (inviteId || inviteToken) {\n                const {data: team} = await this.props.actions.addUserToTeamFromInvite(inviteToken, inviteId);\n                if (team) {\n                    this.finishSignin(team);\n                } else {\n                    // there's not really a good way to deal with this, so just let the user log in like normal\n                    this.finishSignin();\n                }\n            } else {\n                this.finishSignin();\n            }\n        });\n    }\n\n    finishSignin = (team) => {\n        const experimentalPrimaryTeam = this.props.experimentalPrimaryTeam;\n        const query = new URLSearchParams(this.props.location.search);\n        const redirectTo = query.get('redirect_to');\n\n        Utils.setCSRFFromCookie();\n\n        // Record a successful login to local storage. If an unintentional logout occurs, e.g.\n        // via session expiration, this bit won't get reset and we can notify the user as such.\n        LocalStorageStore.setWasLoggedIn(true);\n        if (redirectTo && redirectTo.match(/^\\/([^/]|$)/)) {\n            browserHistory.push(redirectTo);\n        } else if (team) {\n            browserHistory.push(`/${team.name}`);\n        } else if (experimentalPrimaryTeam) {\n            browserHistory.push(`/${experimentalPrimaryTeam}`);\n        } else {\n            GlobalActions.redirectUserToDefaultTeam();\n        }\n    }\n\n    handleLoginIdChange = (e) => {\n        this.setState({\n            loginId: e.target.value,\n        });\n    }\n\n    handlePasswordChange = (e) => {\n        this.setState({\n            password: e.target.value,\n        });\n    }\n\n    handleBrandImageError = () => {\n        this.setState({brandImageError: true});\n    }\n\n    createCustomLogin = () => {\n        if (this.props.enableCustomBrand) {\n            const text = this.props.customBrandText || '';\n            const formattedText = TextFormatting.formatText(text);\n            const brandImageUrl = Client4.getBrandImageUrl(0);\n            const brandImageStyle = this.state.brandImageError ? {display: 'none'} : {};\n\n            return (\n                <div>\n                    <img\n                        alt={'brand image'}\n                        src={brandImageUrl}\n                        onError={this.handleBrandImageError}\n                        style={brandImageStyle}\n                    />\n                    <div>\n                        {messageHtmlToComponent(formattedText, false, {mentions: false, imagesMetadata: null})}\n                    </div>\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    createLoginPlaceholder = () => {\n        const ldapEnabled = this.state.ldapEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        const loginPlaceholders = [];\n        if (emailSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.email', 'Email'));\n        }\n\n        if (usernameSigninEnabled) {\n            loginPlaceholders.push(Utils.localizeMessage('login.username', 'Username'));\n        }\n\n        if (ldapEnabled) {\n            if (this.props.ldapLoginFieldName) {\n                loginPlaceholders.push(this.props.ldapLoginFieldName);\n            } else {\n                loginPlaceholders.push(Utils.localizeMessage('login.ldapUsername', 'AD/LDAP Username'));\n            }\n        }\n\n        if (loginPlaceholders.length >= 2) {\n            return loginPlaceholders.slice(0, loginPlaceholders.length - 1).join(', ') +\n                Utils.localizeMessage('login.placeholderOr', ' or ') +\n                loginPlaceholders[loginPlaceholders.length - 1];\n        } else if (loginPlaceholders.length === 1) {\n            return loginPlaceholders[0];\n        }\n\n        return '';\n    }\n\n    checkSignUpEnabled = () => {\n        return this.props.enableSignUpWithEmail ||\n            this.props.enableSignUpWithGitLab ||\n            this.props.enableSignUpWithOffice365 ||\n            this.props.enableSignUpWithGoogle ||\n            this.props.enableLdap ||\n            this.props.enableSaml;\n    }\n\n    onDismissSessionExpired = () => {\n        LocalStorageStore.setWasLoggedIn(false);\n        this.setState({sessionExpired: false});\n    }\n\n    createExtraText = () => {\n        const extraParam = (new URLSearchParams(this.props.location.search)).get('extra');\n\n        if (this.state.sessionExpired) {\n            return (\n                <div className='alert alert-warning'>\n                    <WarningIcon/>\n                    {' '}\n                    <FormattedMessage\n                        id='login.session_expired'\n                        defaultMessage='Your session has expired. Please log in again.'\n                    />\n                    {' '}\n                    <Link\n                        className='btn-close'\n                        to='/login'\n                        onClick={this.onDismissSessionExpired}\n                    >\n                        <span>\n                            {'×'}\n                        </span>\n                    </Link>\n                </div>\n            );\n        }\n\n        if (extraParam === Constants.GET_TERMS_ERROR) {\n            return (\n                <div className='alert has-error no-padding'>\n                    <label className='control-label'>\n                        <FormattedMessage\n                            id='login.get_terms_error'\n                            defaultMessage='Unable to load terms of service. If this issue persists, contact your System Administrator.'\n                        />\n                    </label>\n                </div>\n            );\n        } else if (extraParam === Constants.TERMS_REJECTED) {\n            return (\n                <div className='alert alert-warning'>\n                    <WarningIcon/>\n                    <FormattedMarkdownMessage\n                        id='login.terms_rejected'\n                        defaultMessage='You must agree to the terms of service before accessing {siteName}. Please contact your System Administrator for more details.'\n                        values={{\n                            siteName: this.props.siteName,\n                        }}\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.SIGNIN_CHANGE) {\n            return (\n                <div className='alert alert-success'>\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.changed'\n                        defaultMessage=' Sign-in method changed successfully'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.SIGNIN_VERIFIED) {\n            return (\n                <div className='alert alert-success'>\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.verified'\n                        defaultMessage=' Email Verified'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.PASSWORD_CHANGE) {\n            return (\n                <div\n                    id='passwordUpdatedSuccess'\n                    className='alert alert-success'\n                >\n                    <SuccessIcon/>\n                    <FormattedMessage\n                        id='login.passwordChanged'\n                        defaultMessage=' Password updated successfully'\n                    />\n                </div>\n            );\n        } else if (extraParam === Constants.CREATE_LDAP) {\n            return (\n                <div className='alert alert-grey'>\n                    <FormattedMessage\n                        id='login.ldapCreate'\n                        defaultMessage=' Enter your AD/LDAP username and password to create an account.'\n                    />\n                </div>\n            );\n        }\n\n        return null;\n    }\n\n    createLoginOptions = () => {\n        const loginControls = [];\n\n        const ldapEnabled = this.state.ldapEnabled;\n        const gitlabSigninEnabled = this.props.enableSignUpWithGitLab;\n        const googleSigninEnabled = this.props.enableSignUpWithGoogle;\n        const office365SigninEnabled = this.props.enableSignUpWithOffice365;\n        const samlSigninEnabled = this.state.samlEnabled;\n        const usernameSigninEnabled = this.state.usernameSigninEnabled;\n        const emailSigninEnabled = this.state.emailSigninEnabled;\n\n        if (emailSigninEnabled || usernameSigninEnabled || ldapEnabled) {\n            let errorClass = '';\n            if (this.state.serverError) {\n                errorClass = ' has-error';\n            }\n\n            loginControls.push(\n                <form\n                    key='loginBoxes'\n                    onSubmit={this.preSubmit}\n                >\n                    <div className='signup__email-container'>\n                        <FormError\n                            error={this.state.serverError}\n                            margin={true}\n                        />\n                        <div className={'form-group' + errorClass}>\n                            <input\n                                id='loginId'\n                                className='form-control'\n                                ref='loginId'\n                                name='loginId'\n                                value={this.state.loginId}\n                                onChange={this.handleLoginIdChange}\n                                placeholder={this.createLoginPlaceholder()}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                                autoFocus={true}\n                            />\n                        </div>\n                        <div className={'form-group' + errorClass}>\n                            <LocalizedInput\n                                id='loginPassword'\n                                type='password'\n                                className='form-control'\n                                ref='password'\n                                name='password'\n                                value={this.state.password}\n                                onChange={this.handlePasswordChange}\n                                placeholder={{id: t('login.password'), defaultMessage: 'Password'}}\n                                spellCheck='false'\n                            />\n                        </div>\n                        <div className='form-group'>\n                            <button\n                                id='loginButton'\n                                type='submit'\n                                className='btn btn-primary'\n                            >\n                                <LoadingWrapper\n                                    id='login_button_signing'\n                                    loading={this.state.loading}\n                                    text={Utils.localizeMessage('login.signInLoading', 'Signing in...')}\n                                >\n                                    <FormattedMessage\n                                        id='login.signIn'\n                                        defaultMessage='Sign in'\n                                    />\n                                </LoadingWrapper>\n                            </button>\n                        </div>\n                    </div>\n                </form>\n            );\n        }\n\n        if (this.props.enableOpenServer && this.checkSignUpEnabled()) {\n            loginControls.push(\n                <div\n                    className='form-group'\n                    key='signup'\n                >\n                    <span>\n                        <FormattedMessage\n                            id='login.noAccount'\n                            defaultMessage=\"Don't have an account? \"\n                        />\n                        <Link\n                            id='signup'\n                            to={'/signup_user_complete' + this.props.location.search}\n                            className='signup-team-login'\n                        >\n                            <FormattedMessage\n                                id='login.create'\n                                defaultMessage='Create one now'\n                            />\n                        </Link>\n                    </span>\n                </div>\n            );\n        }\n\n        if (usernameSigninEnabled || emailSigninEnabled) {\n            loginControls.push(\n                <div\n                    id='login_forgot'\n                    key='forgotPassword'\n                    className='form-group'\n                >\n                    <Link to={'/reset_password'}>\n                        <FormattedMessage\n                            id='login.forgot'\n                            defaultMessage='I forgot my password'\n                        />\n                    </Link>\n                </div>\n            );\n        }\n\n        if ((emailSigninEnabled || usernameSigninEnabled || ldapEnabled) && (gitlabSigninEnabled || googleSigninEnabled || samlSigninEnabled || office365SigninEnabled)) {\n            loginControls.push(\n                <div\n                    key='divider'\n                    className='or__container'\n                >\n                    <FormattedMessage\n                        id='login.or'\n                        defaultMessage='or'\n                    />\n                </div>\n            );\n\n            loginControls.push(\n                <h5 key='oauthHeader'>\n                    <FormattedMessage\n                        id='login.signInWith'\n                        defaultMessage='Sign in with:'\n                    />\n                </h5>\n            );\n        }\n\n        if (gitlabSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login gitlab'\n                    key='gitlab'\n                    href={Client4.getOAuthRoute() + '/gitlab/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.gitlab'\n                                defaultMessage='GitLab'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (googleSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login google'\n                    key='google'\n                    href={Client4.getOAuthRoute() + '/google/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.google'\n                                defaultMessage='Google Apps'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (office365SigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login office365'\n                    key='office365'\n                    href={Client4.getOAuthRoute() + '/office365/login' + this.props.location.search}\n                >\n                    <span>\n                        <span className='icon'/>\n                        <span>\n                            <FormattedMessage\n                                id='login.office365'\n                                defaultMessage='Office 365'\n                            />\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (samlSigninEnabled) {\n            loginControls.push(\n                <a\n                    className='btn btn-custom-login saml'\n                    key='saml'\n                    href={Client4.getUrl() + '/login/sso/saml' + this.props.location.search}\n                >\n                    <span>\n                        <span\n                            className='icon fa fa-lock fa--margin-top'\n                            title='Saml icon'\n                        />\n                        <span>\n                            {this.props.samlLoginButtonText}\n                        </span>\n                    </span>\n                </a>\n            );\n        }\n\n        if (loginControls.length === 0) {\n            loginControls.push(\n                <FormError\n                    key='noMethods'\n                    error={\n                        <FormattedMessage\n                            id='login.noMethods'\n                            defaultMessage='No sign-in methods are enabled. Please contact your System Administrator.'\n                        />\n                    }\n                    margin={true}\n                />\n            );\n        }\n\n        return (\n            <div>\n                {this.createExtraText()}\n                {loginControls}\n            </div>\n        );\n    }\n\n    hideMfa = () => {\n        this.setState({showMfa: false});\n    }\n\n    render() {\n        const {\n            customDescriptionText,\n            siteName,\n            initializing,\n        } = this.props;\n\n        if (initializing) {\n            return (<LoadingScreen/>);\n        }\n\n        let content;\n        let customContent;\n        let customClass;\n        let backButton;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.state.loginId}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n            backButton = (<BackButton onClick={this.hideMfa}/>);\n        } else {\n            content = this.createLoginOptions();\n            customContent = this.createCustomLogin();\n            if (customContent) {\n                customClass = 'branded';\n            }\n        }\n\n        return (\n            <div>\n                <AnnouncementBar/>\n                {backButton}\n                <div\n                    id='login_section'\n                    className='col-sm-12'\n                >\n                    <div className={'signup-team__container ' + customClass}>\n                        <div className='signup__markdown'>\n                            {customContent}\n                        </div>\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div className='signup__content'>\n                            <SiteNameAndDescription\n                                customDescriptionText={customDescriptionText}\n                                siteName={siteName}\n                            />\n                            {content}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(LoginController);\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getTeamByName, getMyTeamMember} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {RequestStatus} from 'mattermost-redux/constants';\n\nimport {addUserToTeamFromInvite} from 'actions/team_actions';\n\nimport {login} from 'actions/views/login';\n\nimport LoginController from './login_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const license = getLicense(state);\n\n    const isLicensed = license.IsLicensed === 'true';\n\n    const customBrandText = config.CustomBrandText;\n    const customDescriptionText = config.CustomDescriptionText;\n    const enableCustomBrand = config.EnableCustomBrand === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableOpenServer = config.EnableOpenServer === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignInWithEmail = config.EnableSignInWithEmail === 'true';\n    const enableSignInWithUsername = config.EnableSignInWithUsername === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n    const samlLoginButtonText = config.SamlLoginButtonText;\n    const siteName = config.SiteName;\n    const initializing = state.requests.users.logout.status === RequestStatus.SUCCESS || !state.storage.initialized;\n\n    // Only set experimental team if user is on that team\n    let experimentalPrimaryTeam = config.ExperimentalPrimaryTeam;\n    if (experimentalPrimaryTeam) {\n        const team = getTeamByName(state, experimentalPrimaryTeam);\n        if (team) {\n            const member = getMyTeamMember(state, team.id);\n            if (!member || !member.team_id) {\n                experimentalPrimaryTeam = null;\n            }\n        } else {\n            experimentalPrimaryTeam = null;\n        }\n    }\n\n    return {\n        currentUser: getCurrentUser(state),\n        isLicensed,\n        customBrandText,\n        customDescriptionText,\n        enableCustomBrand,\n        enableLdap,\n        enableOpenServer,\n        enableSaml,\n        enableSignInWithEmail,\n        enableSignInWithUsername,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableSignUpWithOffice365,\n        experimentalPrimaryTeam,\n        ldapLoginFieldName,\n        samlLoginButtonText,\n        siteName,\n        initializing,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            login,\n            addUserToTeamFromInvite,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginController);\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nexport default class BackButton extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * URL to return to\n         */\n        url: PropTypes.string,\n\n        /**\n         * An optional click handler that will trigger when the user clicks on the back button\n         */\n        onClick: PropTypes.func,\n    };\n\n    static defaultProps = {\n        url: '/',\n    };\n\n    render() {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/a03442cd2c7f4902febc7202b961fad9.png\";","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class SiteNameAndDescription extends React.PureComponent {\n    static propTypes = {\n        customDescriptionText: PropTypes.string,\n        siteName: PropTypes.string,\n    };\n\n    static defaultProps = {\n        siteName: 'Vue',\n    };\n\n    render() {\n        const {\n            customDescriptionText,\n            siteName,\n        } = this.props;\n        let description = null;\n        if (customDescriptionText) {\n            description = customDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <h1 id='site_name'>{siteName}</h1>\n                <h4\n                    id='site_description'\n                    className='color--light'\n                >\n                    {description}\n                </h4>\n            </React.Fragment>\n        );\n    }\n}\n"],"sourceRoot":""}