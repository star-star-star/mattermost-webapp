{"version":3,"sources":["webpack:///./components/pdf_preview.jsx"],"names":["MAX_PDF_PAGES","PDFPreview","React","PureComponent","constructor","props","super","_defineProperty","this","pageIndex","pdfPagesRendered","state","pdfPagesLoaded","canvas","refs","context","getContext","viewport","pdfPages","getViewport","height","width","renderContext","canvasContext","render","setState","pdf","numPages","loading","success","PDFJS","getDocument","fileUrl","then","onDocumentLoad","onDocumentLoadError","i","getPage","onPageLoad","reason","console","log","page","Object","assign","componentDidMount","updateStateFromProps","UNSAFE_componentWillReceiveProps","nextProps","componentDidUpdate","renderPDFPage","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","className","components_widgets_loading_loading_spinner__WEBPACK_IMPORTED_MODULE_4__","components_file_info_preview__WEBPACK_IMPORTED_MODULE_5__","fileInfo","pdfCanvases","push","ref","key","href","react_intl__WEBPACK_IMPORTED_MODULE_2__","id","defaultMessage","PropTypes","object","isRequired","string"],"mappings":"mVAWA,MAAMA,EAAgB,EAEP,MAAMC,UAAmBC,IAAMC,cAc1CC,YAAYC,GACRC,MAAMD,GADSE,EAAAC,KAAA,gBAkCFC,IACb,GAAID,KAAKE,iBAAiBD,KAAeD,KAAKG,MAAMC,eAAeH,GAC/D,OAGJ,MAAMI,EAASL,KAAKM,KAAK,YAAcL,GACjCM,EAAUF,EAAOG,WAAW,MAC5BC,EAAWT,KAAKG,MAAMO,SAAST,GAAWU,YAAY,GAE5DN,EAAOO,OAASH,EAASG,OACzBP,EAAOQ,MAAQJ,EAASI,MAExB,MAAMC,EAAgB,CAClBC,cAAeR,EACfE,YAGJT,KAAKG,MAAMO,SAAST,GAAWe,OAAOF,GACtCd,KAAKE,iBAAiBD,IAAa,IApDpBF,EAAAC,KAAA,uBAuDKH,IACpBG,KAAKiB,SAAS,CACVC,IAAK,KACLR,SAAU,GACVN,eAAgB,GAChBe,SAAU,EACVC,SAAS,EACTC,SAAS,IAGbC,IAAMC,YAAY1B,EAAM2B,SAASC,KAAKzB,KAAK0B,eAAgB1B,KAAK2B,uBAjEjD5B,EAAAC,KAAA,iBAoEDkB,IACd,MAAMC,EAAWD,EAAIC,UAAY3B,EAAgB0B,EAAIC,SAAW3B,EAChEQ,KAAKiB,SAAS,CAACC,MAAKC,aACpB,IAAK,IAAIS,EAAI,EAAGA,GAAKV,EAAIC,SAAUS,IAC/BV,EAAIW,QAAQD,GAAGH,KAAKzB,KAAK8B,cAxEd/B,EAAAC,KAAA,sBA4EI+B,IACnBC,QAAQC,IAAI,+BAAiCF,GAC7C/B,KAAKiB,SAAS,CAACG,SAAS,EAAOC,SAAS,MA9EzBtB,EAAAC,KAAA,aAiFLkC,IACV,MAAMxB,EAAWyB,OAAOC,OAAO,GAAIpC,KAAKG,MAAMO,UAC9CA,EAASwB,EAAKjC,WAAaiC,EAE3B,MAAM9B,EAAiB+B,OAAOC,OAAO,GAAIpC,KAAKG,MAAMC,gBACpDA,EAAe8B,EAAKjC,YAAa,EAEjCD,KAAKiB,SAAS,CAACP,WAAUN,mBAEF,IAAnB8B,EAAKjC,WACLD,KAAKiB,SAAS,CAACI,SAAS,EAAMD,SAAS,MAxF3CpB,KAAKE,iBAAmB,GAExBF,KAAKG,MAAQ,CACTe,IAAK,KACLR,SAAU,GACVN,eAAgB,GAChBe,SAAU,EACVC,SAAS,EACTC,SAAS,GAIjBgB,oBACIrC,KAAKsC,qBAAqBtC,KAAKH,OAGnC0C,iCAAiCC,GACzBxC,KAAKH,MAAM2B,UAAYgB,EAAUhB,UACjCxB,KAAKsC,qBAAqBE,GAC1BxC,KAAKE,iBAAmB,IAIhCuC,qBACI,GAAIzC,KAAKG,MAAMkB,QACX,IAAK,IAAIO,EAAI,EAAGA,EAAI5B,KAAKG,MAAMgB,SAAUS,IACrC5B,KAAK0C,cAAcd,GAkE/BZ,SACI,GAAIhB,KAAKG,MAAMiB,QACX,OACIuB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAACE,EAAA,EAAD,OAKZ,IAAK/C,KAAKG,MAAMkB,QACZ,OACIsB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACIC,SAAUjD,KAAKH,MAAMoD,SACrBzB,QAASxB,KAAKH,MAAM2B,UAKhC,MAAM0B,EAAc,GACpB,IAAK,IAAItB,EAAI,EAAGA,EAAI5B,KAAKG,MAAMgB,SAAUS,IACrCsB,EAAYC,KACRR,EAAAC,EAAAC,cAAA,UACIO,IAAK,YAAcxB,EACnByB,IAAK,mBAAqBzB,KAI9BA,EAAI5B,KAAKG,MAAMgB,SAAW,GAAKnB,KAAKG,MAAMgB,SAAW,GACrD+B,EAAYC,KACRR,EAAAC,EAAAC,cAAA,OACIQ,IAAK,mBAAqBzB,EAC1BkB,UAAU,wBAqB1B,OAfI9C,KAAKG,MAAMe,IAAIC,SAAW3B,GAC1B0D,EAAYC,KACRR,EAAAC,EAAAC,cAAA,KACIQ,IAAI,sBACJC,KAAMtD,KAAKH,MAAM2B,QACjBsB,UAAU,iBAEVH,EAAAC,EAAAC,cAACU,EAAA,EAAD,CACIC,GAAG,wBACHC,eAAe,kCAO3Bd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVI,MAnKIzD,cACE,CAKfwD,SAAUS,IAAUC,OAAOC,WAK3BpC,QAASkC,IAAUG,OAAOD","file":"30.a339d7cba362a5b2989d.js","sourcesContent":["// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport PDFJS from 'pdfjs-dist';\n\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\nimport FileInfoPreview from 'components/file_info_preview';\n\nconst MAX_PDF_PAGES = 5;\n\nexport default class PDFPreview extends React.PureComponent {\n    static propTypes = {\n\n        /**\n        * Compare file types\n        */\n        fileInfo: PropTypes.object.isRequired,\n\n        /**\n        *  URL of pdf file to output and compare to update props url\n        */\n        fileUrl: PropTypes.string.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.pdfPagesRendered = {};\n\n        this.state = {\n            pdf: null,\n            pdfPages: {},\n            pdfPagesLoaded: {},\n            numPages: 0,\n            loading: true,\n            success: false,\n        };\n    }\n\n    componentDidMount() {\n        this.updateStateFromProps(this.props);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.fileUrl !== nextProps.fileUrl) {\n            this.updateStateFromProps(nextProps);\n            this.pdfPagesRendered = {};\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.state.success) {\n            for (let i = 0; i < this.state.numPages; i++) {\n                this.renderPDFPage(i);\n            }\n        }\n    }\n\n    renderPDFPage = (pageIndex) => {\n        if (this.pdfPagesRendered[pageIndex] || !this.state.pdfPagesLoaded[pageIndex]) {\n            return;\n        }\n\n        const canvas = this.refs['pdfCanvas' + pageIndex];\n        const context = canvas.getContext('2d');\n        const viewport = this.state.pdfPages[pageIndex].getViewport(1);\n\n        canvas.height = viewport.height;\n        canvas.width = viewport.width;\n\n        const renderContext = {\n            canvasContext: context,\n            viewport,\n        };\n\n        this.state.pdfPages[pageIndex].render(renderContext);\n        this.pdfPagesRendered[pageIndex] = true;\n    }\n\n    updateStateFromProps = (props) => {\n        this.setState({\n            pdf: null,\n            pdfPages: {},\n            pdfPagesLoaded: {},\n            numPages: 0,\n            loading: true,\n            success: false,\n        });\n\n        PDFJS.getDocument(props.fileUrl).then(this.onDocumentLoad, this.onDocumentLoadError);\n    }\n\n    onDocumentLoad = (pdf) => {\n        const numPages = pdf.numPages <= MAX_PDF_PAGES ? pdf.numPages : MAX_PDF_PAGES;\n        this.setState({pdf, numPages});\n        for (let i = 1; i <= pdf.numPages; i++) {\n            pdf.getPage(i).then(this.onPageLoad);\n        }\n    }\n\n    onDocumentLoadError = (reason) => {\n        console.log('Unable to load PDF preview: ' + reason); //eslint-disable-line no-console\n        this.setState({loading: false, success: false});\n    }\n\n    onPageLoad = (page) => {\n        const pdfPages = Object.assign({}, this.state.pdfPages);\n        pdfPages[page.pageIndex] = page;\n\n        const pdfPagesLoaded = Object.assign({}, this.state.pdfPagesLoaded);\n        pdfPagesLoaded[page.pageIndex] = true;\n\n        this.setState({pdfPages, pdfPagesLoaded});\n\n        if (page.pageIndex === 0) {\n            this.setState({success: true, loading: false});\n        }\n    }\n\n    render() {\n        if (this.state.loading) {\n            return (\n                <div className='view-image__loading'>\n                    <LoadingSpinner/>\n                </div>\n            );\n        }\n\n        if (!this.state.success) {\n            return (\n                <FileInfoPreview\n                    fileInfo={this.props.fileInfo}\n                    fileUrl={this.props.fileUrl}\n                />\n            );\n        }\n\n        const pdfCanvases = [];\n        for (let i = 0; i < this.state.numPages; i++) {\n            pdfCanvases.push(\n                <canvas\n                    ref={'pdfCanvas' + i}\n                    key={'previewpdfcanvas' + i}\n                />\n            );\n\n            if (i < this.state.numPages - 1 && this.state.numPages > 1) {\n                pdfCanvases.push(\n                    <div\n                        key={'previewpdfspacer' + i}\n                        className='pdf-preview-spacer'\n                    />\n                );\n            }\n        }\n\n        if (this.state.pdf.numPages > MAX_PDF_PAGES) {\n            pdfCanvases.push(\n                <a\n                    key='previewpdfmorepages'\n                    href={this.props.fileUrl}\n                    className='pdf-max-pages'\n                >\n                    <FormattedMessage\n                        id='pdf_preview.max_pages'\n                        defaultMessage='Download to read more pages'\n                    />\n                </a>\n            );\n        }\n\n        return (\n            <div className='post-code'>\n                {pdfCanvases}\n            </div>\n        );\n    }\n}\n"],"sourceRoot":""}