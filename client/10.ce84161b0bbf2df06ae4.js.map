{"version":3,"sources":["webpack:///./actions/views/login.js","webpack:///./components/signup/signup_email/signup_email.jsx","webpack:///./components/signup/signup_email/index.js","webpack:///./components/common/back_button.jsx","webpack:///./images/logo.png","webpack:///./components/common/site_name_and_description.jsx"],"names":["login","loginId","password","mfaToken","dispatch","ignoreMfaRequiredError","UserActions","loginById","userId","async","promise","result","error","server_error_id","data","SignupEmail","React","Component","constructor","props","super","_defineProperty","this","siteName","document","title","token","parsedData","JSON","parse","loading","email","teamName","name","actions","getTeamInviteInfo","inviteId","setState","noOpenServerError","serverError","react_default","a","createElement","index_es","id","defaultMessage","user","trackEvent","then","browserHistory","push","encodeURIComponent","state","message","isSubmitting","setGlobalItem","stringify","usedBefore","redirectTo","URLSearchParams","location","search","get","GlobalActions","providedEmail","refs","value","trim","nameError","emailError","passwordError","isEmail","providedUsername","toLowerCase","usernameError","Utils","values","min","Constants","MIN_USERNAME_LENGTH","max","MAX_USERNAME_LENGTH","providedPassword","valid","passwordConfig","e","preventDefault","isUserValid","username","allow_marketing","createUser","handleSignupSuccess","emailHelpText","className","emailDivStyle","nameHelpText","nameDivStyle","passwordDivStyle","yourEmailIs","formatted_markdown_message","emailContainerStyle","type","ref","defaultValue","placeholder","maxLength","autoFocus","spellCheck","autoCapitalize","onClick","handleSubmit","disabled","length","getTokenData","componentDidMount","setDocumentTitle","getInviteInfo","componentDidUpdate","render","customDescriptionText","enableSignUpWithEmail","privacyPolicyLink","termsOfServiceLink","emailSignup","loading_screen","renderEmailSignup","terms","TermsOfServiceLink","PrivacyPolicyLink","back_button","alt","src","logoImage","site_name_and_description","react_router_dom","to","PropTypes","object","bool","isRequired","string","shape","func","connect","config","getConfig","EnableSignUpWithEmail","SiteName","CustomDescriptionText","getPasswordConfig","bindActionCreators","BackButton","PureComponent","react__WEBPACK_IMPORTED_MODULE_1___default","react_router_dom__WEBPACK_IMPORTED_MODULE_3__","url","react_intl__WEBPACK_IMPORTED_MODULE_2__","module","exports","__webpack_require__","p","SiteNameAndDescription","description","Fragment"],"mappings":"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","file":"10.ce84161b0bbf2df06ae4.js","sourcesContent":["// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\n\nexport function login(loginId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.login(loginId, password, mfaToken)));\n    };\n}\n\nexport function loginById(userId, password, mfaToken) {\n    return (dispatch) => {\n        return ignoreMfaRequiredError(dispatch(UserActions.loginById(userId, password, mfaToken)));\n    };\n}\n\nasync function ignoreMfaRequiredError(promise) {\n    let result = await promise;\n\n    if (result.error && result.error.server_error_id === 'api.context.mfa_required.app_error') {\n        result = {data: true};\n    }\n\n    return result;\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport * as GlobalActions from 'actions/global_actions.jsx';\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nimport logoImage from 'images/logo.png';\n\nimport BackButton from 'components/common/back_button.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport default class SignupEmail extends React.Component {\n    static propTypes = {\n        location: PropTypes.object,\n        enableSignUpWithEmail: PropTypes.bool.isRequired,\n        siteName: PropTypes.string,\n        termsOfServiceLink: PropTypes.string,\n        privacyPolicyLink: PropTypes.string,\n        customDescriptionText: PropTypes.string,\n        passwordConfig: PropTypes.object,\n        actions: PropTypes.shape({\n            createUser: PropTypes.func.isRequired,\n            loginById: PropTypes.func.isRequired,\n            setGlobalItem: PropTypes.func.isRequired,\n            getTeamInviteInfo: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        const data = (new URLSearchParams(this.props.location.search)).get('d');\n        const token = (new URLSearchParams(this.props.location.search)).get('t');\n        const inviteId = (new URLSearchParams(this.props.location.search)).get('id');\n\n        this.state = {};\n        if (token && token.length > 0) {\n            this.state = this.getTokenData(token, data);\n        } else if (inviteId && inviteId.length > 0) {\n            this.state = {\n                loading: true,\n                inviteId,\n            };\n        }\n    }\n\n    componentDidMount() {\n        trackEvent('signup', 'signup_user_01_welcome');\n\n        this.setDocumentTitle(this.props.siteName);\n\n        const {inviteId} = this.state;\n        if (inviteId && inviteId.length > 0) {\n            this.getInviteInfo(inviteId);\n        }\n    }\n\n    componentDidUpdate() {\n        this.setDocumentTitle(this.props.siteName);\n    }\n\n    setDocumentTitle = (siteName) => {\n        if (siteName) {\n            document.title = siteName;\n        }\n    }\n\n    getTokenData = (token, data) => {\n        const parsedData = JSON.parse(data);\n\n        return {\n            loading: false,\n            token,\n            email: parsedData.email,\n            teamName: parsedData.name,\n        };\n    }\n\n    getInviteInfo = async (inviteId) => {\n        const {data, error} = await this.props.actions.getTeamInviteInfo(inviteId);\n        if (data) {\n            this.setState({\n                loading: false,\n                noOpenServerError: false,\n                serverError: '',\n                teamName: data.name,\n            });\n        } else if (error) {\n            this.setState({loading: false,\n                noOpenServerError: true,\n                serverError: (\n                    <FormattedMessage\n                        id='signup_user_completed.invalid_invite'\n                        defaultMessage='The invite link was invalid.  Please speak with your Administrator to receive an invitation.'\n                    />\n                ),\n            });\n        }\n    }\n\n    handleSignupSuccess = (user, data) => {\n        trackEvent('signup', 'signup_user_02_complete');\n\n        this.props.actions.loginById(data.id, user.password, '').then(({error}) => {\n            if (error) {\n                if (error.server_error_id === 'api.user.login.not_verified.app_error') {\n                    browserHistory.push('/should_verify_email?email=' + encodeURIComponent(user.email) + '&teamname=' + encodeURIComponent(this.state.teamName));\n                } else {\n                    this.setState({\n                        serverError: error.message,\n                        isSubmitting: false,\n                    });\n                }\n\n                return;\n            }\n\n            if (this.state.token > 0) {\n                this.props.actions.setGlobalItem(this.state.token, JSON.stringify({usedBefore: true}));\n            }\n\n            const redirectTo = (new URLSearchParams(this.props.location.search)).get('redirect_to');\n            if (redirectTo) {\n                browserHistory.push(redirectTo);\n            } else {\n                GlobalActions.redirectUserToDefaultTeam();\n            }\n        });\n    }\n\n    isUserValid = () => {\n        const providedEmail = this.refs.email.value.trim();\n        if (!providedEmail) {\n            this.setState({\n                nameError: '',\n                emailError: (<FormattedMessage id='signup_user_completed.required'/>),\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        }\n\n        if (!isEmail(providedEmail)) {\n            this.setState({\n                nameError: '',\n                emailError: (<FormattedMessage id='signup_user_completed.validEmail'/>),\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        }\n\n        const providedUsername = this.refs.name.value.trim().toLowerCase();\n        if (!providedUsername) {\n            this.setState({\n                nameError: (<FormattedMessage id='signup_user_completed.required'/>),\n                emailError: '',\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        }\n\n        const usernameError = Utils.isValidUsername(providedUsername);\n        if (usernameError === 'Cannot use a reserved word as a username.') {\n            this.setState({\n                nameError: (<FormattedMessage id='signup_user_completed.reserved'/>),\n                emailError: '',\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        } else if (usernameError) {\n            this.setState({\n                nameError: (\n                    <FormattedMessage\n                        id='signup_user_completed.usernameLength'\n                        values={{\n                            min: Constants.MIN_USERNAME_LENGTH,\n                            max: Constants.MAX_USERNAME_LENGTH,\n                        }}\n                    />\n                ),\n                emailError: '',\n                passwordError: '',\n                serverError: '',\n            });\n            return false;\n        }\n\n        const providedPassword = this.refs.password.value;\n        const {valid, error} = Utils.isValidPassword(providedPassword, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                nameError: '',\n                emailError: '',\n                passwordError: error,\n                serverError: '',\n            });\n            return false;\n        }\n\n        return true;\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        // bail out if a submission is already in progress\n        if (this.state.isSubmitting) {\n            return;\n        }\n\n        if (this.isUserValid()) {\n            this.setState({\n                nameError: '',\n                emailError: '',\n                passwordError: '',\n                serverError: '',\n                isSubmitting: true,\n            });\n\n            const user = {\n                email: this.refs.email.value.trim(),\n                username: this.refs.name.value.trim().toLowerCase(),\n                password: this.refs.password.value,\n                allow_marketing: true,\n            };\n\n            this.props.actions.createUser(user, this.state.token, this.state.inviteId).then((result) => {\n                if (result.error) {\n                    this.setState({\n                        serverError: result.error.message,\n                        isSubmitting: false,\n                    });\n                    return;\n                }\n\n                this.handleSignupSuccess(user, result.data);\n            });\n        }\n    }\n\n    renderEmailSignup = () => {\n        let emailError = null;\n        let emailHelpText = (\n            <span\n                id='valid_email'\n                className='help-block'\n            >\n                <FormattedMessage\n                    id='signup_user_completed.emailHelp'\n                    defaultMessage='Valid email required for sign-up'\n                />\n            </span>\n        );\n        let emailDivStyle = 'form-group';\n        if (this.state.emailError) {\n            emailError = (<label className='control-label'>{this.state.emailError}</label>);\n            emailHelpText = '';\n            emailDivStyle += ' has-error';\n        }\n\n        let nameError = null;\n        let nameHelpText = (\n            <span\n                id='valid_name'\n                className='help-block'\n            >\n                <FormattedMessage\n                    id='signup_user_completed.userHelp'\n                    defaultMessage='You can use lowercase letters, numbers, periods, dashes, and underscores.'\n                />\n            </span>\n        );\n        let nameDivStyle = 'form-group';\n        if (this.state.nameError) {\n            nameError = <label className='control-label'>{this.state.nameError}</label>;\n            nameHelpText = '';\n            nameDivStyle += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordDivStyle = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <label className='control-label'>{this.state.passwordError}</label>;\n            passwordDivStyle += ' has-error';\n        }\n\n        let yourEmailIs = null;\n        if (this.state.email) {\n            yourEmailIs = (\n                <FormattedMarkdownMessage\n                    id='signup_user_completed.emailIs'\n                    defaultMessage=\"Your email address is **{email}**. You'll use this address to sign in to {siteName}.\"\n                    values={{\n                        email: this.state.email,\n                        siteName: this.props.siteName,\n                    }}\n                />\n            );\n        }\n\n        let emailContainerStyle = 'margin--extra';\n        if (this.state.email) {\n            emailContainerStyle = 'hidden';\n        }\n\n        return (\n            <form>\n                <div className='inner__content'>\n                    <div className={emailContainerStyle}>\n                        <h5 id='email_label'>\n                            <strong>\n                                <FormattedMessage\n                                    id='signup_user_completed.whatis'\n                                    defaultMessage=\"What's your email address?\"\n                                />\n                            </strong>\n                        </h5>\n                        <div className={emailDivStyle}>\n                            <input\n                                id='email'\n                                type='email'\n                                ref='email'\n                                className='form-control'\n                                defaultValue={this.state.email}\n                                placeholder=''\n                                maxLength='128'\n                                autoFocus={true}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                            />\n                            {emailError}\n                            {emailHelpText}\n                        </div>\n                    </div>\n                    {yourEmailIs}\n                    <div className='margin--extra'>\n                        <h5 id='name_label'>\n                            <strong>\n                                <FormattedMessage\n                                    id='signup_user_completed.chooseUser'\n                                    defaultMessage='Choose your username'\n                                />\n                            </strong>\n                        </h5>\n                        <div className={nameDivStyle}>\n                            <input\n                                id='name'\n                                type='text'\n                                ref='name'\n                                className='form-control'\n                                placeholder=''\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                spellCheck='false'\n                                autoCapitalize='off'\n                            />\n                            {nameError}\n                            {nameHelpText}\n                        </div>\n                    </div>\n                    <div className='margin--extra'>\n                        <h5 id='password_label'>\n                            <strong>\n                                <FormattedMessage\n                                    id='signup_user_completed.choosePwd'\n                                    defaultMessage='Choose your password'\n                                />\n                            </strong>\n                        </h5>\n                        <div className={passwordDivStyle}>\n                            <input\n                                id='password'\n                                type='password'\n                                ref='password'\n                                className='form-control'\n                                placeholder=''\n                                maxLength='128'\n                                spellCheck='false'\n                            />\n                            {passwordError}\n                        </div>\n                    </div>\n                    <p className='margin--extra'>\n                        <button\n                            id='createAccountButton'\n                            type='submit'\n                            onClick={this.handleSubmit}\n                            className='btn-primary btn'\n                            disabled={this.state.isSubmitting}\n                        >\n                            <FormattedMessage\n                                id='signup_user_completed.create'\n                                defaultMessage='Create Account'\n                            />\n                        </button>\n                    </p>\n                </div>\n            </form>\n        );\n    }\n\n    render() {\n        const {\n            customDescriptionText,\n            enableSignUpWithEmail,\n            location,\n            privacyPolicyLink,\n            siteName,\n            termsOfServiceLink,\n        } = this.props;\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div\n                    id='existingEmailErrorContainer'\n                    className={'form-group has-error'}\n                >\n                    <label className='control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n\n        if (this.state.loading) {\n            return (<LoadingScreen/>);\n        }\n\n        let emailSignup;\n        if (enableSignUpWithEmail) {\n            emailSignup = this.renderEmailSignup();\n        } else {\n            return null;\n        }\n\n        let terms = null;\n        if (!this.state.noOpenServerError && emailSignup) {\n            terms = (\n                <p id='signup_agreement'>\n                    <FormattedMarkdownMessage\n                        id='create_team.agreement'\n                        defaultMessage='By proceeding to create your account and use {siteName}, you agree to our [Terms of Service]({TermsOfServiceLink}) and [Privacy Policy]({PrivacyPolicyLink}). If you do not agree, you cannot use {siteName}.'\n                        values={{\n                            siteName,\n                            TermsOfServiceLink: termsOfServiceLink,\n                            PrivacyPolicyLink: privacyPolicyLink,\n                        }}\n                    />\n                </p>\n            );\n        }\n\n        if (this.state.noOpenServerError) {\n            emailSignup = null;\n        }\n\n        return (\n            <div>\n                <BackButton/>\n                <div\n                    id='signup_email_section'\n                    className='col-sm-12'\n                >\n                    <div className='signup-team__container padding--less'>\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <SiteNameAndDescription\n                            customDescriptionText={customDescriptionText}\n                            siteName={siteName}\n                        />\n                        <h4\n                            id='create_account'\n                            className='color--light'\n                        >\n                            <FormattedMessage\n                                id='signup_user_completed.lets'\n                                defaultMessage=\"Let's create your account\"\n                            />\n                        </h4>\n                        <span\n                            id='signin_account'\n                            className='color--light'\n                        >\n                            <FormattedMessage\n                                id='signup_user_completed.haveAccount'\n                                defaultMessage='Already have an account?'\n                            />\n                            {' '}\n                            <Link\n                                id='signin_account_link'\n                                to={'/login' + location.search}\n                            >\n                                <FormattedMessage\n                                    id='signup_user_completed.signIn'\n                                    defaultMessage='Click here to sign in.'\n                                />\n                            </Link>\n                        </span>\n                        {emailSignup}\n                        {serverError}\n                        {terms}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {createUser} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getTeamInviteInfo} from 'mattermost-redux/actions/teams';\n\nimport {setGlobalItem} from 'actions/storage';\nimport {loginById} from 'actions/views/login';\nimport {getPasswordConfig} from 'utils/utils.jsx';\n\nimport SignupEmail from './signup_email.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const siteName = config.SiteName;\n    const termsOfServiceLink = config.TermsOfServiceLink;\n    const privacyPolicyLink = config.PrivacyPolicyLink;\n    const customDescriptionText = config.CustomDescriptionText;\n\n    return {\n        enableSignUpWithEmail,\n        siteName,\n        termsOfServiceLink,\n        privacyPolicyLink,\n        customDescriptionText,\n        passwordConfig: getPasswordConfig(config),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            createUser,\n            loginById,\n            setGlobalItem,\n            getTeamInviteInfo,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignupEmail);\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nexport default class BackButton extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * URL to return to\n         */\n        url: PropTypes.string,\n\n        /**\n         * An optional click handler that will trigger when the user clicks on the back button\n         */\n        onClick: PropTypes.func,\n    };\n\n    static defaultProps = {\n        url: '/',\n    };\n\n    render() {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/a03442cd2c7f4902febc7202b961fad9.png\";","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class SiteNameAndDescription extends React.PureComponent {\n    static propTypes = {\n        customDescriptionText: PropTypes.string,\n        siteName: PropTypes.string,\n    };\n\n    static defaultProps = {\n        siteName: 'Vue',\n    };\n\n    render() {\n        const {\n            customDescriptionText,\n            siteName,\n        } = this.props;\n        let description = null;\n        if (customDescriptionText) {\n            description = customDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <h1 id='site_name'>{siteName}</h1>\n                <h4\n                    id='site_description'\n                    className='color--light'\n                >\n                    {description}\n                </h4>\n            </React.Fragment>\n        );\n    }\n}\n"],"sourceRoot":""}