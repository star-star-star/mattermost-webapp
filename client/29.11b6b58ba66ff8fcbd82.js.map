{"version":3,"sources":["webpack:///./components/password_reset_form/password_reset_form.js","webpack:///./components/password_reset_form/index.js"],"names":["PasswordResetForm","React","PureComponent","constructor","props","super","_defineProperty","this","async","e","preventDefault","password","ReactDOM","findDOMNode","refs","value","length","Constants","MIN_PASSWORD_LENGTH","setState","error","react_default","a","createElement","index_es","id","defaultMessage","values","chars","token","URLSearchParams","location","search","get","data","actions","resetUserPassword","browserHistory","push","PASSWORD_CHANGE","message","state","render","className","formClass","onSubmit","handlePasswordReset","siteName","localized_input","type","name","ref","placeholder","t","spellCheck","autoFocus","PropTypes","object","isRequired","string","shape","func","connect","SiteName","getConfig","dispatch","bindActionCreators"],"mappings":"qXAce,MAAMA,UAA0BC,IAAMC,cASjDC,YAAYC,GACRC,MAAMD,GADSE,EAAAC,KAAA,sBAKGC,UAClBC,EAAEC,iBAEF,MAAMC,EAAWC,IAASC,YAAYN,KAAKO,KAAKH,UAAUI,MAC1D,IAAKJ,GAAYA,EAASK,OAASC,IAAUC,oBAYzC,YAXAX,KAAKY,SAAS,CACVC,MACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,GAAG,sBACHC,eAAe,4CACfC,OAAQ,CACJC,MAAOX,IAAUC,yBAQrCX,KAAKY,SAAS,CAACC,MAAO,OAEtB,MAAMS,EAAS,IAAIC,gBAAgBvB,KAAKH,MAAM2B,SAASC,QAASC,IAAI,UAC9DC,KAACA,EAADd,MAAOA,SAAeb,KAAKH,MAAM+B,QAAQC,kBAAkBP,EAAOlB,GACpEuB,GACAG,IAAeC,KAAK,gBAAkBrB,IAAUsB,iBAChDhC,KAAKY,SAAS,CAACC,MAAO,QACfA,GACPb,KAAKY,SAAS,CAACC,MAAOA,EAAMoB,YA9BhCjC,KAAKkC,MAAQ,CAACrB,MAAO,MAkCzBsB,SACI,IAAItB,EAAQ,KACRb,KAAKkC,MAAMrB,QACXA,EACIC,EAAAC,EAAAC,cAAA,OAAKoB,UAAU,wBACXtB,EAAAC,EAAAC,cAAA,SAAOoB,UAAU,iBACZpC,KAAKkC,MAAMrB,SAM5B,IAAIwB,EAAY,aAKhB,OAJIxB,IACAwB,GAAa,cAIbvB,EAAAC,EAAAC,cAAA,OAAKoB,UAAU,aACXtB,EAAAC,EAAAC,cAAA,OAAKoB,UAAU,0BACXtB,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,GAAG,sBACHC,eAAe,oBAGvBL,EAAAC,EAAAC,cAAA,QAAMsB,SAAUtC,KAAKuC,qBACjBzB,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,GAAG,sBACHC,eAAe,oDACfC,OAAQ,CACJoB,SAAUxC,KAAKH,MAAM2C,aAIjC1B,EAAAC,EAAAC,cAAA,OAAKoB,UAAWC,GACZvB,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CACIvB,GAAG,qBACHwB,KAAK,WACLN,UAAU,eACVO,KAAK,WACLC,IAAI,WACJC,YAAa,CAAC3B,GAAI4B,YAAE,qBAAsB3B,eAAgB,YAC1D4B,WAAW,QACXC,WAAW,KAGlBnC,EACDC,EAAAC,EAAAC,cAAA,UACIE,GAAG,sBACHwB,KAAK,SACLN,UAAU,mBAEVtB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACIC,GAAG,uBACHC,eAAe,8BArG1B1B,cACE,CACf+B,SAAUyB,IAAUC,OAAOC,WAC3BX,SAAUS,IAAUG,OACpBxB,QAASqB,IAAUI,MAAM,CACrBxB,kBAAmBoB,IAAUK,KAAKH,aACnCA,aCCII,4BAXUrB,IACrB,MAAOsB,SAAUhB,GAAYiB,oBAAUvB,GACvC,MAAO,CAACM,aAGgBkB,IAAD,CACvB9B,QAAS+B,6BAAmB,CACxB9B,uCACD6B,KAGQH,CAA6C9D","file":"29.11b6b58ba66ff8fcbd82.js","sourcesContent":["// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {browserHistory} from 'utils/browser_history';\nimport Constants from 'utils/constants.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport {t} from 'utils/i18n.jsx';\n\nexport default class PasswordResetForm extends React.PureComponent {\n    static propTypes = {\n        location: PropTypes.object.isRequired,\n        siteName: PropTypes.string,\n        actions: PropTypes.shape({\n            resetUserPassword: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {error: null};\n    }\n\n    handlePasswordReset = async (e) => {\n        e.preventDefault();\n\n        const password = ReactDOM.findDOMNode(this.refs.password).value;\n        if (!password || password.length < Constants.MIN_PASSWORD_LENGTH) {\n            this.setState({\n                error: (\n                    <FormattedMessage\n                        id='password_form.error'\n                        defaultMessage='Please enter at least {chars} characters.'\n                        values={{\n                            chars: Constants.MIN_PASSWORD_LENGTH,\n                        }}\n                    />\n                ),\n            });\n            return;\n        }\n\n        this.setState({error: null});\n\n        const token = (new URLSearchParams(this.props.location.search)).get('token');\n        const {data, error} = await this.props.actions.resetUserPassword(token, password);\n        if (data) {\n            browserHistory.push('/login?extra=' + Constants.PASSWORD_CHANGE);\n            this.setState({error: null});\n        } else if (error) {\n            this.setState({error: error.message});\n        }\n    }\n\n    render() {\n        let error = null;\n        if (this.state.error) {\n            error = (\n                <div className='form-group has-error'>\n                    <label className='control-label'>\n                        {this.state.error}\n                    </label>\n                </div>\n            );\n        }\n\n        let formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        return (\n            <div className='col-sm-12'>\n                <div className='signup-team__container'>\n                    <h3>\n                        <FormattedMessage\n                            id='password_form.title'\n                            defaultMessage='Password Reset'\n                        />\n                    </h3>\n                    <form onSubmit={this.handlePasswordReset}>\n                        <p>\n                            <FormattedMessage\n                                id='password_form.enter'\n                                defaultMessage='Enter a new password for your {siteName} account.'\n                                values={{\n                                    siteName: this.props.siteName,\n                                }}\n                            />\n                        </p>\n                        <div className={formClass}>\n                            <LocalizedInput\n                                id='resetPasswordInput'\n                                type='password'\n                                className='form-control'\n                                name='password'\n                                ref='password'\n                                placeholder={{id: t('password_form.pwd'), defaultMessage: 'Password'}}\n                                spellCheck='false'\n                                autoFocus={true}\n                            />\n                        </div>\n                        {error}\n                        <button\n                            id='resetPasswordButton'\n                            type='submit'\n                            className='btn btn-primary'\n                        >\n                            <FormattedMessage\n                                id='password_form.change'\n                                defaultMessage='Change my password'\n                            />\n                        </button>\n                    </form>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {resetUserPassword} from 'mattermost-redux/actions/users';\n\nimport PasswordResetForm from './password_reset_form';\n\nconst mapStateToProps = (state) => {\n    const {SiteName: siteName} = getConfig(state);\n    return {siteName};\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n    actions: bindActionCreators({\n        resetUserPassword,\n    }, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordResetForm);\n"],"sourceRoot":""}