{"version":3,"sources":["webpack:///./components/login/login_mfa.jsx","webpack:///./components/claim/components/oauth_to_email.jsx","webpack:///./components/claim/components/email_to_oauth.jsx","webpack:///./components/claim/components/ldap_to_email.jsx","webpack:///./components/claim/components/email_to_ldap.jsx","webpack:///./components/claim/claim_controller.jsx","webpack:///./components/claim/index.js","webpack:///./components/common/back_button.jsx","webpack:///./images/logo.png"],"names":["LoginMfa","React","PureComponent","constructor","props","super","_defineProperty","this","e","preventDefault","token","target","value","trim","replace","state","setState","submit","loginId","password","saving","serverError","render","errorClass","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","className","onSubmit","handleSubmit","react_intl__WEBPACK_IMPORTED_MODULE_4__","id","defaultMessage","components_localized_input_localized_input__WEBPACK_IMPORTED_MODULE_8__","type","name","placeholder","t","spellCheck","autoComplete","autoFocus","onChange","handleChange","components_save_button_jsx__WEBPACK_IMPORTED_MODULE_7__","disabled","onClick","localizeMessage","savingMessage","PropTypes","string","isRequired","func","OAuthToEmail","ReactDOM","findDOMNode","refs","error","Utils","valid","passwordConfig","confirmPassword","passwordconfirm","oauthToEmail","currentType","email","data","follow_link","window","location","href","err","message","react_default","formClass","uiType","concat","Constants","SAML_SERVICE","toUpperCase","index_es","values","site","siteName","localized_input","ref","object","EmailToOAuth","email_to_oauth_defineProperty","emailToOAuth","newType","showMfa","server_error_id","content","login_mfa","preSubmit","LDAPToEmail","Component","ldap_to_email_defineProperty","passwordError","confirmError","ldapPasswordError","ldapPassword","ldappassword","switchLdapToEmail","then","startsWith","passwordClass","ldapPasswordClass","confimClass","passwordPlaceholder","EmailToLDAP","email_to_ldap_defineProperty","ldapError","emailpassword","ldapId","ldapid","emailToLdap","ldapClass","loginPlaceholder","ldapLoginFieldName","style","usernameInput","display","ClaimController","URLSearchParams","search","get","back_button","alt","src","logoImage","react_router","path","match","url","oauth_to_email_OAuthToEmail","email_to_oauth_EmailToOAuth","ldap_to_email_LDAPToEmail","actions","email_to_ldap_EmailToLDAP","shape","connect","config","getConfig","SiteName","LdapLoginFieldName","getPasswordConfig","dispatch","bindActionCreators","BackButton","react__WEBPACK_IMPORTED_MODULE_1___default","react_router_dom__WEBPACK_IMPORTED_MODULE_3__","to","react_intl__WEBPACK_IMPORTED_MODULE_2__","title","module","exports","__webpack_require__","p"],"mappings":"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","file":"14.f190a29c44615762f4cf.js","sourcesContent":["// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SaveButton from 'components/save_button.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class LoginMfa extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * User's login ID\n         */\n        loginId: PropTypes.string.isRequired,\n\n        /*\n         * User's password\n         */\n        password: PropTypes.string.isRequired,\n\n        /*\n         * Function to call when submitting user credentials\n         */\n        submit: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            saving: false,\n            token: '',\n            serverError: '',\n        };\n    }\n\n    handleChange = (e) => {\n        e.preventDefault();\n        const token = e.target.value.trim().replace(/\\s/g, '');\n\n        if (token !== this.state.token) {\n            this.setState({\n                token,\n            });\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        state.serverError = '';\n        state.saving = true;\n        this.setState(state);\n\n        this.props.submit(\n            this.props.loginId,\n            this.props.password,\n            this.state.token\n        );\n    }\n\n    render() {\n        let serverError;\n        let errorClass = '';\n        if (this.state.serverError) {\n            serverError = <label className='control-label'>{this.state.serverError}</label>;\n            errorClass = ' has-error';\n        }\n\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <div className='signup__email-container'>\n                    <p>\n                        <FormattedMessage\n                            id='login_mfa.enterToken'\n                            defaultMessage=\"To complete the sign in process, please enter a token from your smartphone's authenticator\"\n                        />\n                    </p>\n                    <div className={'form-group' + errorClass}>\n                        {serverError}\n                    </div>\n                    <div className={'form-group' + errorClass}>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            name='token'\n                            placeholder={{id: t('login_mfa.token'), defaultMessage: 'MFA Token'}}\n                            spellCheck='false'\n                            autoComplete='off'\n                            autoFocus={true}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <div className='form-group'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={this.state.saving}\n                            onClick={this.handleSubmit}\n                            defaultMessage={localizeMessage('login_mfa.submit', 'Submit')}\n                            savingMessage={localizeMessage('login_mfa.submitting', 'Submitting...')}\n                        />\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {oauthToEmail} from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class OAuthToEmail extends React.PureComponent {\n    static propTypes = {\n        currentType: PropTypes.string,\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n        passwordConfig: PropTypes.object,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {};\n    }\n\n    submit = (e) => {\n        e.preventDefault();\n        const state = {};\n\n        const password = ReactDOM.findDOMNode(this.refs.password).value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.enterPwd', 'Please enter a password.');\n            this.setState(state);\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({error});\n            return;\n        }\n\n        const confirmPassword = ReactDOM.findDOMNode(this.refs.passwordconfirm).value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.error = Utils.localizeMessage('claim.oauth_to_email.pwdNotMatch', 'Passwords do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.error = null;\n        this.setState(state);\n\n        oauthToEmail(\n            this.props.currentType,\n            this.props.email,\n            password,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                this.setState({error: err.message});\n            }\n        );\n    }\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const uiType = `${(this.props.currentType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.currentType))} SSO`;\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.oauth_to_email.title'\n                        defaultMessage='Switch {type} Account to Email'\n                        values={{\n                            type: uiType,\n                        }}\n                    />\n                </h3>\n                <form onSubmit={this.submit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.description'\n                            defaultMessage='Upon changing your account type, you will only be able to login with your email and password.'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.oauth_to_email.enterNewPwd'\n                            defaultMessage='Enter a new password for your {site} email account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref='password'\n                            placeholder={{id: t('claim.oauth_to_email.newPwd'), defaultMessage: 'New Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    <div className={formClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref='passwordconfirm'\n                            placeholder={{id: t('claim.oauth_to_email.confirm'), defaultMessage: 'Confirm Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.oauth_to_email.switchTo'\n                            defaultMessage='Switch {type} to email and password'\n                            values={{\n                                type: uiType,\n                            }}\n                        />\n                    </button>\n                </form>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToOAuth} from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class EmailToOAuth extends React.PureComponent {\n    static propTypes = {\n        newType: PropTypes.string,\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {showMfa: false, password: ''};\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n        var state = {};\n\n        var password = ReactDOM.findDOMNode(this.refs.password).value;\n        if (!password) {\n            state.error = Utils.localizeMessage('claim.email_to_oauth.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        this.setState({password});\n\n        state.error = null;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '');\n    }\n\n    submit = (loginId, password, token) => {\n        emailToOAuth(\n            loginId,\n            password,\n            token,\n            this.props.newType,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({error: err.message, showMfa: false});\n                }\n            }\n        );\n    }\n\n    render() {\n        var error = null;\n        if (this.state.error) {\n            error = <div className='form-group has-error'><label className='control-label'>{this.state.error}</label></div>;\n        }\n\n        var formClass = 'form-group';\n        if (error) {\n            formClass += ' has-error';\n        }\n\n        const type = (this.props.newType === Constants.SAML_SERVICE ? Constants.SAML_SERVICE.toUpperCase() : Utils.toTitleCase(this.props.newType));\n        const uiType = `${type} SSO`;\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form onSubmit={this.preSubmit}>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with {type} SSO'\n                            values={{\n                                type,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.ssoNote'\n                            defaultMessage='You must already have a valid {type} account'\n                            values={{\n                                type,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_oauth.enterPwd'\n                            defaultMessage='Enter the password for your {site} account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <div className={formClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref='password'\n                            placeholder={{id: t('claim.email_to_oauth.pwd'), defaultMessage: 'Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {error}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_oauth.switchTo'\n                            defaultMessage='Switch account to {uiType}'\n                            values={{\n                                uiType,\n                            }}\n                        />\n                    </button>\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_oauth.title'\n                        defaultMessage='Switch Email/Password Account to {uiType}'\n                        values={{\n                            uiType,\n                        }}\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class LDAPToEmail extends React.Component {\n    static propTypes = {\n        email: PropTypes.string,\n        passwordConfig: PropTypes.object,\n        switchLdapToEmail: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            confirmError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        const ldapPassword = this.refs.ldappassword.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.ldap_to_email.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        const password = this.refs.password.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.ldap_to_email.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n            });\n            return;\n        }\n\n        const confirmPassword = this.refs.passwordconfirm.value;\n        if (!confirmPassword || password !== confirmPassword) {\n            state.confirmError = Utils.localizeMessage('claim.ldap_to_email.pwdNotMatch', 'Passwords do not match.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '', ldapPassword);\n    }\n\n    submit = (loginId, password, token, ldapPassword) => {\n        this.props.switchLdapToEmail(ldapPassword || this.state.ldapPassword, this.props.email, password, token).then(({data, error: err}) => {\n            if (data && data.follow_link) {\n                window.location.href = data.follow_link;\n            } else if (err) {\n                if (err.server_error_id.startsWith('model.user.is_valid.pwd')) {\n                    this.setState({passwordError: err.message, showMfa: false});\n                } else if (err.server_error_id === 'ent.ldap.do_login.invalid_password.app_error') {\n                    this.setState({ldapPasswordError: err.message, showMfa: false});\n                } else if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    this.setState({serverError: err.message, showMfa: false});\n                }\n            }\n        });\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let confirmError = null;\n        let confimClass = 'form-group';\n        if (this.state.confirmError) {\n            confirmError = <div className='form-group has-error'><label className='control-label'>{this.state.confirmError}</label></div>;\n            confimClass += ' has-error';\n        }\n\n        const passwordPlaceholder = Utils.localizeMessage('claim.ldap_to_email.ldapPwd', 'AD/LDAP Password');\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.email'\n                            defaultMessage='After switching your authentication method, you will use {email} to login. Your AD/LDAP credentials will no longer allow access to Vue.'\n                            values={{\n                                email: this.props.email,\n                            }}\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterLdapPwd'\n                            defaultMessage='{ldapPassword}:'\n                            values={{\n                                ldapPassword: passwordPlaceholder,\n                            }}\n                        />\n                    </p>\n                    <div className={ldapPasswordClass}>\n                        <input\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref='ldappassword'\n                            placeholder={passwordPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.ldap_to_email.enterPwd'\n                            defaultMessage='New email login password:'\n                        />\n                    </p>\n                    <div className={passwordClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='password'\n                            ref='password'\n                            placeholder={{id: t('claim.ldap_to_email.pwd'), defaultMessage: 'Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <div className={confimClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='passwordconfirm'\n                            ref='passwordconfirm'\n                            placeholder={{id: t('claim.ldap_to_email.confirm'), defaultMessage: 'Confirm Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {confirmError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.ldap_to_email.switchTo'\n                            defaultMessage='Switch account to email/password'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.ldap_to_email.title'\n                        defaultMessage='Switch AD/LDAP Account to Email/Password'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emailToLdap} from 'actions/admin_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport LoginMfa from 'components/login/login_mfa.jsx';\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nexport default class EmailToLDAP extends React.Component {\n    static propTypes = {\n        email: PropTypes.string,\n        siteName: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n            showMfa: false,\n        };\n    }\n\n    preSubmit = (e) => {\n        e.preventDefault();\n\n        var state = {\n            passwordError: '',\n            ldapError: '',\n            ldapPasswordError: '',\n            serverError: '',\n        };\n\n        const password = this.refs.emailpassword.value;\n        if (!password) {\n            state.passwordError = Utils.localizeMessage('claim.email_to_ldap.pwdError', 'Please enter your password.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapId = this.refs.ldapid.value.trim();\n        if (!ldapId) {\n            state.ldapError = Utils.localizeMessage('claim.email_to_ldap.ldapIdError', 'Please enter your AD/LDAP ID.');\n            this.setState(state);\n            return;\n        }\n\n        const ldapPassword = this.refs.ldappassword.value;\n        if (!ldapPassword) {\n            state.ldapPasswordError = Utils.localizeMessage('claim.email_to_ldap.ldapPasswordError', 'Please enter your AD/LDAP password.');\n            this.setState(state);\n            return;\n        }\n\n        state.password = password;\n        state.ldapId = ldapId;\n        state.ldapPassword = ldapPassword;\n        this.setState(state);\n\n        this.submit(this.props.email, password, '', ldapId, ldapPassword);\n    }\n\n    submit = (loginId, password, token, ldapId, ldapPassword) => {\n        emailToLdap(\n            loginId,\n            password,\n            token,\n            ldapId || this.state.ldapId,\n            ldapPassword || this.state.ldapPassword,\n            (data) => {\n                if (data.follow_link) {\n                    window.location.href = data.follow_link;\n                }\n            },\n            (err) => {\n                if (!this.state.showMfa && err.server_error_id === 'mfa.validate_token.authenticate.app_error') {\n                    this.setState({showMfa: true});\n                } else {\n                    switch (err.id) {\n                    case 'ent.ldap.do_login.user_not_registered.app_error':\n                    case 'ent.ldap.do_login.user_filtered.app_error':\n                    case 'ent.ldap.do_login.matched_to_many_users.app_error':\n                        this.setState({ldapError: err.message, showMfa: false});\n                        break;\n                    case 'ent.ldap.do_login.invalid_password.app_error':\n                        this.setState({ldapPasswordError: err.message, showMfa: false});\n                        break;\n                    case 'api.user.check_user_password.invalid.app_error':\n                        this.setState({passwordError: err.message, showMfa: false});\n                        break;\n                    default:\n                        this.setState({serverError: err.message, showMfa: false});\n                    }\n                }\n            }\n        );\n    }\n\n    render() {\n        let serverError = null;\n        let formClass = 'form-group';\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n            formClass += ' has-error';\n        }\n\n        let passwordError = null;\n        let passwordClass = 'form-group';\n        if (this.state.passwordError) {\n            passwordError = <div className='form-group has-error'><label className='control-label'>{this.state.passwordError}</label></div>;\n            passwordClass += ' has-error';\n        }\n\n        let ldapError = null;\n        let ldapClass = 'form-group';\n        if (this.state.ldapError) {\n            ldapError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapError}</label></div>;\n            ldapClass += ' has-error';\n        }\n\n        let ldapPasswordError = null;\n        let ldapPasswordClass = 'form-group';\n        if (this.state.ldapPasswordError) {\n            ldapPasswordError = <div className='form-group has-error'><label className='control-label'>{this.state.ldapPasswordError}</label></div>;\n            ldapPasswordClass += ' has-error';\n        }\n\n        let loginPlaceholder;\n        if (this.props.ldapLoginFieldName) {\n            loginPlaceholder = this.props.ldapLoginFieldName;\n        } else {\n            loginPlaceholder = Utils.localizeMessage('claim.email_to_ldap.ldapId', 'AD/LDAP ID');\n        }\n\n        let content;\n        if (this.state.showMfa) {\n            content = (\n                <LoginMfa\n                    loginId={this.props.email}\n                    password={this.state.password}\n                    submit={this.submit}\n                />\n            );\n        } else {\n            content = (\n                <form\n                    onSubmit={this.preSubmit}\n                    className={formClass}\n                >\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoType'\n                            defaultMessage='Upon claiming your account, you will only be able to login with AD/LDAP'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.ssoNote'\n                            defaultMessage='You must already have a valid AD/LDAP account'\n                        />\n                    </p>\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterPwd'\n                            defaultMessage='Enter the password for your {site} email account'\n                            values={{\n                                site: this.props.siteName,\n                            }}\n                        />\n                    </p>\n                    <input\n                        type='text'\n                        style={style.usernameInput}\n                        name='fakeusernameremembered'\n                    />\n                    <div className={passwordClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='emailPassword'\n                            ref='emailpassword'\n                            autoComplete='off'\n                            placeholder={{id: t('claim.email_to_ldap.pwd'), defaultMessage: 'Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {passwordError}\n                    <p>\n                        <FormattedMessage\n                            id='claim.email_to_ldap.enterLdapPwd'\n                            defaultMessage='Enter the ID and password for your AD/LDAP account'\n                        />\n                    </p>\n                    <div className={ldapClass}>\n                        <input\n                            type='text'\n                            className='form-control'\n                            name='ldapId'\n                            ref='ldapid'\n                            autoComplete='off'\n                            placeholder={loginPlaceholder}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapError}\n                    <div className={ldapPasswordClass}>\n                        <LocalizedInput\n                            type='password'\n                            className='form-control'\n                            name='ldapPassword'\n                            ref='ldappassword'\n                            autoComplete='off'\n                            placeholder={{id: t('claim.email_to_ldap.ldapPwd'), defaultMessage: 'AD/LDAP Password'}}\n                            spellCheck='false'\n                        />\n                    </div>\n                    {ldapPasswordError}\n                    <button\n                        type='submit'\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='claim.email_to_ldap.switchTo'\n                            defaultMessage='Switch account to AD/LDAP'\n                        />\n                    </button>\n                    {serverError}\n                </form>\n            );\n        }\n\n        return (\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id='claim.email_to_ldap.title'\n                        defaultMessage='Switch Email/Password Account to AD/LDAP'\n                    />\n                </h3>\n                {content}\n            </div>\n        );\n    }\n}\n\nconst style = {\n    usernameInput: {display: 'none'},\n};\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Route, Switch} from 'react-router-dom';\n\nimport logoImage from 'images/logo.png';\nimport BackButton from 'components/common/back_button.jsx';\nimport OAuthToEmail from 'components/claim/components/oauth_to_email';\nimport EmailToOAuth from 'components/claim/components/email_to_oauth';\nimport LDAPToEmail from 'components/claim/components/ldap_to_email';\nimport EmailToLDAP from 'components/claim/components/email_to_ldap';\n\nexport default class ClaimController extends React.PureComponent {\n    static propTypes = {\n        location: PropTypes.object.isRequired,\n        siteName: PropTypes.string,\n        ldapLoginFieldName: PropTypes.string,\n        passwordConfig: PropTypes.object,\n\n        /*\n         * Object from react-router\n         */\n        match: PropTypes.shape({\n            url: PropTypes.string.isRequired,\n        }).isRequired,\n\n        actions: PropTypes.shape({\n            switchLdapToEmail: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    render() {\n        const email = (new URLSearchParams(this.props.location.search)).get('email');\n        const newType = (new URLSearchParams(this.props.location.search)).get('new_type');\n        const currentType = (new URLSearchParams(this.props.location.search)).get('old_type');\n\n        return (\n            <div>\n                <BackButton/>\n                <div className='col-sm-12'>\n                    <div className='signup-team__container'>\n                        <img\n                            alt={'signup logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <div id='claim'>\n                            <Switch>\n                                <Route\n                                    path={`${this.props.match.url}/oauth_to_email`}\n                                    render={() => (\n                                        <OAuthToEmail\n                                            currentType={currentType}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            passwordConfig={this.props.passwordConfig}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_oauth`}\n                                    render={() => (\n                                        <EmailToOAuth\n                                            newType={newType}\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/ldap_to_email`}\n                                    render={() => (\n                                        <LDAPToEmail\n                                            email={email}\n                                            passwordConfig={this.props.passwordConfig}\n                                            switchLdapToEmail={this.props.actions.switchLdapToEmail}\n                                        />\n                                    )}\n                                />\n                                <Route\n                                    path={`${this.props.match.url}/email_to_ldap`}\n                                    render={() => (\n                                        <EmailToLDAP\n                                            email={email}\n                                            siteName={this.props.siteName}\n                                            ldapLoginFieldName={this.props.ldapLoginFieldName}\n                                        />\n                                    )}\n                                />\n                            </Switch>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {switchLdapToEmail} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\n\nimport ClaimController from './claim_controller.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const siteName = config.SiteName;\n    const ldapLoginFieldName = config.LdapLoginFieldName;\n\n    return {\n        siteName,\n        ldapLoginFieldName,\n        passwordConfig: getPasswordConfig(config),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            switchLdapToEmail,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClaimController);\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nexport default class BackButton extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * URL to return to\n         */\n        url: PropTypes.string,\n\n        /**\n         * An optional click handler that will trigger when the user clicks on the back button\n         */\n        onClick: PropTypes.func,\n    };\n\n    static defaultProps = {\n        url: '/',\n    };\n\n    render() {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/a03442cd2c7f4902febc7202b961fad9.png\";"],"sourceRoot":""}