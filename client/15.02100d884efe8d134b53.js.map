{"version":3,"sources":["webpack:///./actions/views/mfa.js","webpack:///./components/audit_table/audit_table.jsx","webpack:///./components/audit_table/index.js","webpack:///./components/user_settings/advanced/join_leave_section/join_leave_section.jsx","webpack:///./components/user_settings/advanced/join_leave_section/index.js","webpack:///./components/user_settings/advanced/user_settings_advanced.jsx","webpack:///./components/user_settings/advanced/index.js","webpack:///./components/color_input.tsx","webpack:///./components/user_settings/display/user_settings_theme/color_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/custom_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/premade_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/index.js","webpack:///./components/user_settings/display/user_settings_theme/user_settings_theme.jsx","webpack:///./components/user_settings/display/user_settings_theme/index.js","webpack:///./components/suggestion/timezone_provider.jsx","webpack:///./components/user_settings/display/manage_timezones/manage_timezones.jsx","webpack:///./components/user_settings/display/manage_timezones/index.js","webpack:///./components/user_settings/display/manage_languages/manage_languages.jsx","webpack:///./components/user_settings/display/manage_languages/index.js","webpack:///./components/user_settings/display/user_settings_display.jsx","webpack:///./components/user_settings/display/index.js","webpack:///./components/user_settings/general/user_settings_general.jsx","webpack:///./components/user_settings/general/index.js","webpack:///./components/user_settings/notifications/desktop_notification_settings.jsx","webpack:///./components/user_settings/notifications/email_notification_setting/email_notification_setting.jsx","webpack:///./components/user_settings/notifications/email_notification_setting/index.js","webpack:///./components/user_settings/notifications/manage_auto_responder.jsx","webpack:///./components/user_settings/notifications/user_settings_notifications.jsx","webpack:///./components/user_settings/notifications/index.js","webpack:///./components/access_history_modal/access_history_modal.jsx","webpack:///./components/access_history_modal/index.js","webpack:///./components/activity_log_modal/components/more_info.jsx","webpack:///./components/activity_log_modal/components/activity_log.jsx","webpack:///./components/activity_log_modal/activity_log_modal.jsx","webpack:///./components/activity_log_modal/index.js","webpack:///./components/user_settings/security/mfa_section/mfa_section.jsx","webpack:///./components/user_settings/security/mfa_section/index.js","webpack:///./components/user_settings/security/user_access_token_section/user_access_token_section.jsx","webpack:///./components/user_settings/security/user_access_token_section/index.js","webpack:///./components/user_settings/security/user_settings_security.jsx","webpack:///./components/user_settings/security/index.js","webpack:///./components/user_settings/sidebar/user_settings_sidebar.jsx","webpack:///./components/user_settings/sidebar/index.js","webpack:///./components/user_settings/user_settings.jsx","webpack:///./components/user_settings/index.js"],"names":["__webpack_require__","d","__webpack_exports__","activateMfa","deactivateMfa","generateMfaSecret","mattermost_redux_actions_users__WEBPACK_IMPORTED_MODULE_0__","mattermost_redux_selectors_entities_users__WEBPACK_IMPORTED_MODULE_1__","code","dispatch","getState","currentUserId","getCurrentUserId","UserActions","holders","defineMessages","sessionRevoked","id","t","defaultMessage","channelCreated","establishedDM","nameUpdated","headerUpdated","channelDeleted","userAdded","userRemoved","attemptedRegisterApp","attemptedAllowOAuthAccess","successfullOAuthAccess","failedOAuthAccess","attemptedOAuthToken","successfullOAuthToken","oauthTokenFailed","attemptedLogin","authenticated","defauleMessage","successfullLogin","failedLogin","updatePicture","updateGeneral","attemptedPassword","successfullPassword","failedPassword","updatedRol","member","accountActive","accountInactive","by","byAdmin","sentEmail","attemptedReset","successfullReset","updateGlobalNotifications","attemptedWebhookCreate","succcessfullWebhookCreate","failedWebhookCreate","attemptedWebhookDelete","successfullWebhookDelete","failedWebhookDelete","logout","verified","revokedAll","loginAttempt","loginFailure","attemptedLicenseAdd","successfullLicenseAdd","failedExpiredLicenseAdd","failedInvalidLicenseAdd","licenseRemoved","AuditTable","React","PureComponent","componentDidMount","ids","this","props","audits","map","audit","user_id","actions","getMissingProfilesByIds","render","showUserId","showIp","showSession","accessList","i","length","auditInfo","formatAuditInfo","uContent","iContent","sContent","react_default","a","createElement","className","userId","ip","sessionId","descStyle","desc","toLowerCase","indexOf","key","timestamp","userIdContent","ipContent","sessionContent","index_es","formatMessage","intl","actionURL","action","replace","auditDesc","channelInfo","extra_info","split","channelNameField","channelObj","channelURL","channelName","getByName","display_name","username","getDirectTeammate","userIdField","profile","getUser","test","url","oauthInfo","clientIdField","oauthTokenFailure","trim","token","userInfo","userRoles","updateType","updateField","actingUserInfo","actingUser","user","currentUser","isSystemAdmin","roles","email","webhookInfo","licenseInfo","toTitleCase","actionDesc","lastIndexOf","substring","extraInfoDesc","date","Date","create_at","value","day","month","year","hour","minute","auditProfile","ip_address","session_id","intlShape","isRequired","PropTypes","array","bool","object","func","shape","injectIntl","connect","state","getCurrentUser","getChannelByName","bindActionCreators","JoinLeaveSection","constructor","super","_defineProperty","e","currentTarget","setState","joinLeaveState","section","joinLeave","onUpdateSection","joinLeavePreference","category","Preferences","CATEGORY_ADVANCED_SETTINGS","name","ADVANCED_FILTER_JOIN_LEAVE","savePreferences","activeSection","AdvancedSections","JOIN_LEAVE","setting_item_max","title","inputs","type","checked","onChange","handleOnChange","setting","submit","handleSubmit","saving","isSaving","server_error","serverError","updateSection","handleUpdateSection","setting_item_min","describe","renderOnOffLabel","string","getPreference","PreReleaseFeatures","Constants","PRE_RELEASE_FEATURES","AdvancedSettingsDisplay","user_settings_advanced_defineProperty","advancedSettings","advancedSettingsCategory","settings","send_on_ctrl_enter","sendOnCtrlEnter","code_block_ctrl_enter","codeBlockOnCtrlEnter","formatting","join_leave","preReleaseFeaturesKeys","Object","keys","enabledFeatures","as","feature","FeatureTogglePrefix","label","previewFeaturesEnabled","enablePreviewFeatures","preReleaseFeatures","showDeactivateAccountModal","String","forEach","features","push","async","preferences","Array","isArray","updateUserActive","then","error","message","data","revokeAllSessionsForUser","emitUserLoggedOutEvent","getStateFromProps","updateSetting","bind","enabled","renderCtrlEnterLabel","ctrlEnter","codeBlockCtrlEnter","renderFeatureLabel","ctrlSendSection","ctrlSendActive","formattingSection","renderFormattingSection","previewFeaturesSection","previewFeaturesSectionDivider","formattingSectionDivider","toggleFeature","target","saveEnabledFeatures","Utils","values","count","deactivateAccountSection","makeConfirmationModal","auth_service","enableUserDeactivation","saveButtonText","handleShowDeactivateAccountModal","confirmButtonClass","deactivateMemberButton","confirm_modal","show","confirmButtonText","onConfirm","handleDeactivateAccountSubmit","onCancel","handleHideDeactivateAccountModal","data-dismiss","aria-label","onClick","closeModal","aria-hidden","ref","collapseModal","fa_back_icon","join_leave_section","getAdvancedSettingsCategory","makeGetCategory","config","getConfig","EnablePreviewFeatures","EnableUserDeactivation","get","ColorInput","color_input_defineProperty","colorPicker","current","contains","isOpened","newColorData","hex","handleChange","createRef","componentDidUpdate","prevProps","prevState","prevIsOpened","document","addEventListener","checkClick","removeEventListener","color","concat","readOnly","togglePicker","style","backgroundColor","lib","ColorChooser","Component","[object Object]","args","color_chooser_defineProperty","newColor","color_input","messages","sidebarBg","sidebarText","sidebarHeaderBg","sidebarHeaderTextColor","sidebarUnreadText","sidebarTextHoverBg","sidebarTextActiveBorder","sidebarTextActiveColor","onlineIndicator","awayIndicator","dndIndicator","mentionBg","mentionColor","centerChannelBg","centerChannelColor","newMessageSeparator","linkColor","buttonBg","buttonColor","errorTextColor","mentionHighlightBg","mentionHighlightLink","codeTheme","CustomThemeChooser","custom_theme_chooser_defineProperty","settingId","updateTheme","theme","newTheme","_objectSpread","mentionBj","copyTheme","setCopyTheme","text","window","clipboardData","getData","JSON","parse","err","stringify","stopPropagation","textarea","refs","focus","setSelectionRange","preventDefault","$","sidebarStylesHeader","toggleClass","toggleSection","sidebarStyles","centerChannelStylesHeader","centerChannelStyles","linkAndButtonStylesHeader","linkAndButtonStyles","on","onCodeThemeChange","componentWillUnmount","off","assign","image","node","UserAgent","slideToggle","context","sidebarElements","centerChannelElements","linkAndButtonElements","THEME_ELEMENTS","element","index","codeThemeOptions","codeThemeURL","themes","codeThemeIndex","iconURL","uiName","popoverContent","Popover","bsStyle","width","alt","src","defaultValue","OverlayTrigger","placement","overlay","group","color_chooser","handleColorChange","pasteBox","onPaste","pasteBoxChange","onChangeHandle","selectTheme","toggleSidebarStyles","toggleCenterChannelStyles","toggleLinkAndButtonStyles","PremadeThemeChooser","premadeThemes","allowedThemes","hasAllowedThemes","k","THEMES","hasOwnProperty","premadeTheme","extend","activeClass","propTypes","arrayOf","defaultProps","AllowedThemes","ThemeSetting","user_settings_theme_defineProperty","teamId","applyToAllTeams","currentTeamId","saveTheme","deleteTeamSpecificThemes","setRequireConfirm","originalTheme","scrollToTop","themeChanged","field","AppDispatcher","handleViewAction","ActionTypes","TOGGLE_IMPORT_THEME_MODAL","callback","setEnforceFocus","user_settings_theme_objectSpread","selected","ReactDOM","findDOMNode","addClass","removeClass","UNSAFE_componentWillReceiveProps","nextProps","resetFields","DEFAULT_CODE_THEME","showAllTeamsCheckbox","scrollTop","displayCustom","custom","premade","themeUI","allowCustomThemes","custom_theme_chooser_CustomThemeChooser","premade_theme_chooser","href","rel","handleImportModal","allTeamsCheckbox","submitExtra","submitTheme","focused","getThemeCategory","getCurrentTeamId","getTheme","CATEGORY_THEME","getMyTeamsCount","UserSettingsTheme","TimezoneSuggestion","Suggestion","item","isSelection","timezone","handleClick","baseProps","TimezoneProvider","Provider","handlePretextChanged","timezonePrefix","resultsCallback","displayAllTimezones","filterTimezones","matchedPretext","terms","getSupportedTimezones","items","component","filteredTimezones","filter","getTimezoneRegion","ManageTimezones","manage_timezones_defineProperty","manualTimezoneInput","manualTimezone","useAutomaticTimezone","automaticTimezone","oldUseAutomaticTimezone","oldAutomaticTimezone","oldManualTimezone","timezoneNotChanged","submitUser","updatedUser","manage_timezones_objectSpread","toString","updateMe","getBrowserTimezone","timezones","timezoneRegion","noTimezonesFromServer","automaticTimezoneInput","handleAutomaticTimezone","disabled","providers","suggestion_box","setSwitchBoxRef","onItemSelected","handleTimezoneSelected","listComponent","SuggestionList","maxLength","requiredCharacters","listStyle","completeOnTab","renderDividers","openOnFocus","containerStyle","changeTimezone","ManageLanguage","manage_languages_defineProperty","isKeyPressed","KeyCodes","ESCAPE","openMenu","querySelector","classList","remove","ENTER","add","selectedOption","locale","manage_languages_objectSpread","locales","I18n","userLocale","reactSelectContainer","handleContainerKeyDown","options","l","order","sort","b","lang","reactStyles","menuPortal","provided","zIndex","input","react_select_esm","classNamePrefix","menuIsOpen","menuPortalTarget","body","styles","clearable","setLanguage","onKeyDown","handleKeyDown","onMenuClose","handleMenuClose","onMenuOpen","handleMenuOpen","formatted_markdown_message","changeLanguage","ManageLanguages","getDisplayStateFromProps","militaryTime","teammateNameDisplay","channelDisplayMode","messageDisplay","collapseDisplay","linkPreviewDisplay","UserSettingsDisplay","user_settings_display_defineProperty","timePreference","CATEGORY_DISPLAY_SETTINGS","USE_MILITARY_TIME","teammateNameDisplayPreference","NAME_NAME_FORMAT","channelDisplayModePreference","CHANNEL_DISPLAY_MODE","messageDisplayPreference","MESSAGE_DISPLAY","collapseDisplayPreference","COLLAPSE_DISPLAY","linkPreviewDisplayPreference","LINK_PREVIEW_DISPLAY","updateState","newState","user_settings_display_objectSpread","prevSections","clock","linkpreview","message_display","channel_display_mode","languages","enableTimezone","shouldAutoUpdateTimezone","autoUpdateTimezone","handleChannelDisplayModeRadio","handlemessageDisplayRadio","handleCollapseRadio","handleLinkPreviewRadio","display","createSection","firstOption","secondOption","thirdOption","description","firstMessage","radionButtonText","moreColon","firstMessageMore","moreId","moreMessage","secondMessage","secondMessageMore","thirdMessage","messageTitle","messageDesc","format","firstDisplay","secondDisplay","thirdDisplay","thirdSection","collapseSection","defaultDisplay","linkPreviewSection","enableLinkPreviews","clockSection","teammateNameDisplaySection","configTeammateNameDisplay","TEAMMATE_NAME_DISPLAY","SHOW_USERNAME","SHOW_NICKNAME_FULLNAME","SHOW_FULLNAME","timezoneSelection","userTimezone","manage_timezones","currentUserTimezone","messageDisplaySection","MESSAGE_DISPLAY_CLEAN","MESSAGE_DISPLAY_COMPACT","channelDisplayModeSection","CHANNEL_DISPLAY_MODE_FULL_SCREEN","CHANNEL_DISPLAY_MODE_CENTERED","languagesSection","themeSection","defaultClientLocale","manage_languages","enableThemeSelection","user_settings_theme","getTimezones","getUserTimezone","automaticTimezoneNotSet","AllowCustomThemes","EnableLinkPreviews","DefaultClientLocale","EnableThemeSelection","ExperimentalTimezone","TeammateNameDisplay","getUserCurrentTimezone","USE_MILITARY_TIME_DEFAULT","CHANNEL_DISPLAY_MODE_DEFAULT","MESSAGE_DISPLAY_DEFAULT","COLLAPSE_DISPLAY_DEFAULT","LINK_PREVIEW_DISPLAY_DEFAULT","usernameReserved","usernameRestrictions","validEmail","emailMatch","incorrectPassword","emptyPassword","validImage","imageTooLarge","uploadImage","uploadImageMobile","fullName","nickname","profilePicture","close","position","UserSettingsGeneralTab","user_settings_general_defineProperty","resendStatus","showSpinner","sendVerificationEmail","loading_wrapper","loading","handleEmailResend","setTimeout","usernameError","clientError","min","MIN_USERNAME_LENGTH","max","MAX_USERNAME_LENGTH","trackEvent","firstName","lastName","first_name","last_name","confirmEmail","currentPassword","isEmail","password","emailError","emailUpdated","sectionIsSaving","getMe","requireEmailVerification","clearErrors","logError","AnnouncementBarMessages","EMAIL_VERIFICATION_REQUIRED","AnnouncementBarTypes","SUCCESS","server_error_id","setDefaultProfileImage","submitActive","pictureFile","file","AcceptedProfileImageTypes","includes","size","maxFileSize","loadingPicture","uploadProfileImage","setupInitialState","files","originalEmail","createEmailSection","emailSection","emailVerificationEnabled","helpText","autoFocus","updateEmail","updateConfirmEmail","updateCurrentPassword","submitEmail","GITLAB_SERVICE","GOOGLE_SERVICE","OFFICE365_SERVICE","LDAP_SERVICE","SAML_SERVICE","nameSection","extraInfo","ldapFirstNameAttributeSet","ldapLastNameAttributeSet","samlFirstNameAttributeSet","samlLastNameAttributeSet","updateFirstName","onFocus","updateLastName","notifLink","updateTab","notify","submitName","nicknameSection","usernameSection","positionSection","ldapNicknameAttributeSet","samlNicknameAttributeSet","nicknameLabel","updateNickname","MAX_NICKNAME_LENGTH","autoCapitalize","submitNickname","usernameLabel","updateUsername","submitUsername","ldapPositionAttributeSet","samlPositionAttributeSet","positionLabel","updatePosition","MAX_POSITION_LENGTH","submitPosition","pictureSection","setting_picture","onSubmit","submitPicture","onSetDefault","last_picture_update","setDefaultProfilePicture","defaultImageSrc","onFileChange","minMessage","number","RequireEmailVerification","parseInt","MaxFileSize","LdapFirstNameAttributeSet","LdapLastNameAttributeSet","SamlFirstNameAttributeSet","SamlLastNameAttributeSet","LdapNicknameAttributeSet","SamlNicknameAttributeSet","SamlPositionAttributeSet","LdapPositionAttributeSet","DesktopNotificationSettings","desktop_notification_settings_defineProperty","cancel","getAttribute","setParentState","activityRadio","soundSection","activity","NotificationLevels","MENTION","NONE","soundRadio","sound","data-key","data-value","ALL","handleMaxUpdateSection","formattedMessageProps","hasSoundOption","handleMinUpdateSection","active","buildMaximizedSetting","buildMinimizedSetting","SECONDS_PER_MINUTE","EmailNotificationSetting","email_notification_setting_defineProperty","enableEmail","newInterval","emailInterval","emailIntervalPreference","CATEGORY_NOTIFICATIONS","EMAIL_INTERVAL","sendEmailNotifications","INTERVAL_IMMEDIATE","INTERVAL_HOUR","INTERVAL_FIFTEEN_MINUTES","localizeMessage","batchingOptions","batchingInfo","enableEmailBatching","data-enable-email","data-email-interval","INTERVAL_NEVER","siteName","getEmailInterval","renderMinSettingView","renderMaxSettingView","INTERVAL_NOT_SET","EnableEmailBatching","SendEmailNotifications","MESSAGE_MAX_LENGTH","ManageAutoResponder","manage_auto_responder_defineProperty","autoResponderActive","autoResponderMessage","activeToggle","handleAutoResponderChecked","autosize_textarea","resize","rows","placeholder","onMessageChanged","shiftEnter","getNotificationsStateFromProps","desktop","comments","pushActivity","pushStatus","UserStatuses","AWAY","notify_props","desktop_sound","push_status","auto_responder_active","auto_responder_message","usernameKey","customKeys","firstNameKey","channelKey","mention_keys","splice","join","channel","desktopActivity","desktopSound","customKeysChecked","notifyCommentsLevel","NotificationsTab","user_settings_notifications_defineProperty","mentionKeys","stringKeys","result","handleCancel","val","customcheck","custommentions","updateCustomMentionKeys","sendPushNotifications","pushActivityRadio","pushStatusRadio","pushStatusSettings","ONLINE","handlePushStatusRadio","OFFLINE","handlePushRadio","handleNotifyCommentsRadio","keysSection","commentsSection","autoResponderSection","handleUpdateFirstNameKey","updateFirstNameKey","handleUpdateUsernameKey","updateUsernameKey","handleUpdateChannelKey","updateChannelKey","onCustomChange","aria-labelledby","commentsActive","enableAutoResponder","manage_auto_responder_ManageAutoResponder","setStateValue","pushNotificationSection","createPushNotificationSection","desktop_notification_settings_DesktopNotificationSettings","email_notification_setting","handleEmailRadio","activeTab","SiteName","SendPushNotifications","ExperimentalEnableAutomaticReplies","UserSettingsNotifications","AccessHistoryModal","access_history_modal_defineProperty","getUserAudits","isMobile","perfectScrollbar","onShow","content","userAudits","loading_screen","audit_table","Modal","dialogClassName","onHide","onExited","bsSize","role","Header","closeButton","Title","componentClass","Body","Footer","getCurrentUserAudits","MoreInfo","currentSession","moreInfo","handleMoreInfo","firstAccessTime","getMonthLong","time","os","browser","ActivityLog","activity_log_defineProperty","submitRevoke","session","device_id","deviceTypeId","deviceTypeMessage","devicePicture","deviceTitle","General","PUSH_NOTIFY_APPLE_REACT_NATIVE","PUSH_NOTIFY_ANDROID_REACT_NATIVE","devicePlatform","lastAccessTime","last_activity_at","platform","isMobileSession","sessionInfo","mobileSessionInfo","ActivityLogModal","activity_log_modal_defineProperty","altId","modalContent","closest","revokeSession","getSessions","sessions","activityList","reduce","activity_log_ActivityLog","oneOfType","getUserSessions","getCurrentLocale","SECTION_MFA","MfaSection","mfa_section_defineProperty","browserHistory","mfaEnforced","mfaActive","buttonText","removeMfa","setupMfa","renderTitle","mfaAvailable","renderContent","renderHelpText","renderDescription","license","getLicense","mfaLicensed","IsLicensed","MFA","mfaEnabled","EnableMultifactorAuthentication","EnforceMultifactorAuthentication","mfa_active","SECTION_TOKENS","TOKEN_CREATING","TOKEN_CREATED","TOKEN_NOT_CREATING","UserAccessTokenSection","user_access_token_section_defineProperty","tokenCreationState","handleCancelConfirm","newtokendescription","tokenError","confirmCopyToken","createUserAccessToken","newToken","confirmAction","showConfirmModal","confirmTitle","confirmMessage","confirmButton","confirmComplete","confirmHideCancel","UserUtils","handleCreateToken","confirmCreateToken","tokenId","userAccessTokens","revokeToken","revokeUserAccessToken","enableUserAccessToken","disableUserAccessToken","clearUserAccessTokens","getUserAccessTokensForUser","tokenListClass","tokenList","noTokenText","newTokenSection","activeLink","activeStatus","is_active","deactivateToken","activateToken","confirmRevokeToken","onKeyPress","saveTokenKeyPress","save_button","btnClass","savingMessage","stopCreatingToken","fa_warning_icon","additionalClassName","startCreatingToken","infoPosition","cancelButtonText","hideCancel","entities","users","myUserAccessTokens","SECTION_PASSWORD","SECTION_SIGNIN","SECTION_APPS","SecurityTab","user_settings_security_defineProperty","getAuthorizedOAuthApps","authorizedApps","newPassword","confirmPassword","passwordError","valid","passwordConfig","defaultState","getDefaultState","savingPassword","updateUserPassword","appId","deauthorizeOAuthApp","app","submitPassword","updateNewPassword","updateConfirmPassword","last_password_update","hour12","emailOption","gitlabOption","googleOption","office365Option","ldapOption","samlOption","enableSignUpWithGitLab","react_router_dom","to","encodeURIComponent","enableSignUpWithGoogle","enableSignUpWithOffice365","enableLdap","enableSaml","enableSignUpWithEmail","link","apps","homepage","data-app","deauthorizeApp","icon_url","icon50","wrapperClass","authService","enableOAuthServiceProvider","loadAuthorizedOAuthApps","passwordSection","createPasswordSection","signInSection","oauthSection","tokensSection","numMethods","experimentalEnableAuthenticationTransfer","createSignInSection","createOAuthAppsSection","canUseAccessTokens","user_access_token_section","ariaLabel","mfa_section","toggle_modal_button","dialogType","ownProps","tokensEnabled","EnableUserAccessTokens","userHasTokenRole","EnableOAuthServiceProvider","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableLdap","EnableSaml","EnableSignUpWithOffice365","ExperimentalEnableAuthenticationTransfer","getPasswordConfig","getBool","UserSettingsSidebar","user_settings_sidebar_defineProperty","closeUnusedDirectMessages","channelSwitcherOption","sidebarPreference","grouping","sorting","unreadsAtTop","favoriteAtTop","close_unused_direct_messages","channel_switcher_section","updatedSidebarSettings","unreads_at_top","favorite_at_top","CATEGORY_SIDEBAR_SETTINGS","trackSettingChangeIfNecessary","sectionName","showChannelOrganization","contents","renderAutoCloseDMLabel","Fragment","sortingId","sortingDefaultMessage","atTopId","atTopDefaultMessage","renderOrganizationLabel","channelSwitcherSectionDescId","channelSwitcherSectionDescDefault","isMac","helpChannelSwitcherText","renderChannelSwitcherLabel","showUnusedOption","channelOrganizationSection","renderChannelOrganizationSection","autoCloseDMSection","renderAutoCloseDMSection","channelSwitcherSection","renderChannelSwitcherSection","getSidebarPreferences","ExperimentalChannelOrganization","CloseUnusedDirectMessages","UserSettings","components_user_settings_general","security","notifications","user_settings_display","sidebar","advanced"],"mappings":"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","file":"15.02100d884efe8d134b53.js","sourcesContent":["// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nexport function activateMfa(code) {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, true, code));\n    };\n}\n\nexport function deactivateMfa() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, false));\n    };\n}\n\nexport function generateMfaSecret() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.generateMfaSecret(currentUserId));\n    };\n}\n\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, FormattedTime, injectIntl, intlShape} from 'react-intl';\n\nimport {getDirectTeammate, isSystemAdmin, toTitleCase} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nconst holders = defineMessages({\n    sessionRevoked: {\n        id: t('audit_table.sessionRevoked'),\n        defaultMessage: 'The session with id {sessionId} was revoked',\n    },\n    channelCreated: {\n        id: t('audit_table.channelCreated'),\n        defaultMessage: 'Created the {channelName} channel',\n    },\n    establishedDM: {\n        id: t('audit_table.establishedDM'),\n        defaultMessage: 'Established a direct message channel with {username}',\n    },\n    nameUpdated: {\n        id: t('audit_table.nameUpdated'),\n        defaultMessage: 'Updated the {channelName} channel name',\n    },\n    headerUpdated: {\n        id: t('audit_table.headerUpdated'),\n        defaultMessage: 'Updated the {channelName} channel header',\n    },\n    channelDeleted: {\n        id: t('audit_table.channelDeleted'),\n        defaultMessage: 'Archived the channel with the URL {url}',\n    },\n    userAdded: {\n        id: t('audit_table.userAdded'),\n        defaultMessage: 'Added {username} to the {channelName} channel',\n    },\n    userRemoved: {\n        id: t('audit_table.userRemoved'),\n        defaultMessage: 'Removed {username} to the {channelName} channel',\n    },\n    attemptedRegisterApp: {\n        id: t('audit_table.attemptedRegisterApp'),\n        defaultMessage: 'Attempted to register a new OAuth Application with ID {id}',\n    },\n    attemptedAllowOAuthAccess: {\n        id: t('audit_table.attemptedAllowOAuthAccess'),\n        defaultMessage: 'Attempted to allow a new OAuth service access',\n    },\n    successfullOAuthAccess: {\n        id: t('audit_table.successfullOAuthAccess'),\n        defaultMessage: 'Successfully gave a new OAuth service access',\n    },\n    failedOAuthAccess: {\n        id: t('audit_table.failedOAuthAccess'),\n        defaultMessage: 'Failed to allow a new OAuth service access - the redirect URI did not match the previously registered callback',\n    },\n    attemptedOAuthToken: {\n        id: t('audit_table.attemptedOAuthToken'),\n        defaultMessage: 'Attempted to get an OAuth access token',\n    },\n    successfullOAuthToken: {\n        id: t('audit_table.successfullOAuthToken'),\n        defaultMessage: 'Successfully added a new OAuth service',\n    },\n    oauthTokenFailed: {\n        id: t('audit_table.oauthTokenFailed'),\n        defaultMessage: 'Failed to get an OAuth access token - {token}',\n    },\n    attemptedLogin: {\n        id: t('audit_table.attemptedLogin'),\n        defaultMessage: 'Attempted to login',\n    },\n    authenticated: {\n        id: t('audit_table.authenticated'),\n        defauleMessage: 'Successfully authenticated',\n    },\n    successfullLogin: {\n        id: t('audit_table.successfullLogin'),\n        defaultMessage: 'Successfully logged in',\n    },\n    failedLogin: {\n        id: t('audit_table.failedLogin'),\n        defaultMessage: 'FAILED login attempt',\n    },\n    updatePicture: {\n        id: t('audit_table.updatePicture'),\n        defaultMessage: 'Updated your profile picture',\n    },\n    updateGeneral: {\n        id: t('audit_table.updateGeneral'),\n        defaultMessage: 'Updated the general settings of your account',\n    },\n    attemptedPassword: {\n        id: t('audit_table.attemptedPassword'),\n        defaultMessage: 'Attempted to change password',\n    },\n    successfullPassword: {\n        id: t('audit_table.successfullPassword'),\n        defaultMessage: 'Successfully changed password',\n    },\n    failedPassword: {\n        id: t('audit_table.failedPassword'),\n        defaultMessage: 'Failed to change password - tried to update user password who was logged in through OAuth',\n    },\n    updatedRol: {\n        id: t('audit_table.updatedRol'),\n        defaultMessage: 'Updated user role(s) to ',\n    },\n    member: {\n        id: t('audit_table.member'),\n        defaultMessage: 'member',\n    },\n    accountActive: {\n        id: t('audit_table.accountActive'),\n        defaultMessage: 'Account activated',\n    },\n    accountInactive: {\n        id: t('audit_table.accountInactive'),\n        defaultMessage: 'Account deactivated',\n    },\n    by: {\n        id: t('audit_table.by'),\n        defaultMessage: ' by {username}',\n    },\n    byAdmin: {\n        id: t('audit_table.byAdmin'),\n        defaultMessage: ' by an admin',\n    },\n    sentEmail: {\n        id: t('audit_table.sentEmail'),\n        defaultMessage: 'Sent an email to {email} to reset your password',\n    },\n    attemptedReset: {\n        id: t('audit_table.attemptedReset'),\n        defaultMessage: 'Attempted to reset password',\n    },\n    successfullReset: {\n        id: t('audit_table.successfullReset'),\n        defaultMessage: 'Successfully reset password',\n    },\n    updateGlobalNotifications: {\n        id: t('audit_table.updateGlobalNotifications'),\n        defaultMessage: 'Updated your global notification settings',\n    },\n    attemptedWebhookCreate: {\n        id: t('audit_table.attemptedWebhookCreate'),\n        defaultMessage: 'Attempted to create a webhook',\n    },\n    succcessfullWebhookCreate: {\n        id: t('audit_table.successfullWebhookCreate'),\n        defaultMessage: 'Successfully created a webhook',\n    },\n    failedWebhookCreate: {\n        id: t('audit_table.failedWebhookCreate'),\n        defaultMessage: 'Failed to create a webhook - bad channel permissions',\n    },\n    attemptedWebhookDelete: {\n        id: t('audit_table.attemptedWebhookDelete'),\n        defaultMessage: 'Attempted to delete a webhook',\n    },\n    successfullWebhookDelete: {\n        id: t('audit_table.successfullWebhookDelete'),\n        defaultMessage: 'Successfully deleted a webhook',\n    },\n    failedWebhookDelete: {\n        id: t('audit_table.failedWebhookDelete'),\n        defaultMessage: 'Failed to delete a webhook - inappropriate conditions',\n    },\n    logout: {\n        id: t('audit_table.logout'),\n        defaultMessage: 'Logged out of your account',\n    },\n    verified: {\n        id: t('audit_table.verified'),\n        defaultMessage: 'Successfully verified your email address',\n    },\n    revokedAll: {\n        id: t('audit_table.revokedAll'),\n        defaultMessage: 'Revoked all current sessions for the team',\n    },\n    loginAttempt: {\n        id: t('audit_table.loginAttempt'),\n        defaultMessage: ' (Login attempt)',\n    },\n    loginFailure: {\n        id: t('audit_table.loginFailure'),\n        defaultMessage: ' (Login failure)',\n    },\n    attemptedLicenseAdd: {\n        id: t('audit_table.attemptedLicenseAdd'),\n        defaultMessage: 'Attempted to add new license',\n    },\n    successfullLicenseAdd: {\n        id: t('audit_table.successfullLicenseAdd'),\n        defaultMessage: 'Successfully added new license',\n    },\n    failedExpiredLicenseAdd: {\n        id: t('audit_table.failedExpiredLicenseAdd'),\n        defaultMessage: 'Failed to add a new license as it has either expired or not yet been started',\n    },\n    failedInvalidLicenseAdd: {\n        id: t('audit_table.failedInvalidLicenseAdd'),\n        defaultMessage: 'Failed to add an invalid license',\n    },\n    licenseRemoved: {\n        id: t('audit_table.licenseRemoved'),\n        defaultMessage: 'Successfully removed a license',\n    },\n});\n\nexport class AuditTable extends React.PureComponent {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        audits: PropTypes.array.isRequired,\n        showUserId: PropTypes.bool,\n        showIp: PropTypes.bool,\n        showSession: PropTypes.bool,\n        currentUser: PropTypes.object.isRequired,\n        getUser: PropTypes.func.isRequired,\n        getByName: PropTypes.func.isRequired,\n\n        actions: PropTypes.shape({\n            getMissingProfilesByIds: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    componentDidMount() {\n        const ids = this.props.audits.map((audit) => audit.user_id);\n        this.props.actions.getMissingProfilesByIds(ids);\n    }\n\n    render() {\n        const audits = this.props.audits;\n        const showUserId = this.props.showUserId;\n        const showIp = this.props.showIp;\n        const showSession = this.props.showSession;\n        var accessList = [];\n\n        for (var i = 0; i < audits.length; i++) {\n            const audit = audits[i];\n            const auditInfo = this.formatAuditInfo(audit);\n\n            let uContent;\n            if (showUserId) {\n                uContent = <td className='word-break--all'>{auditInfo.userId}</td>;\n            }\n\n            let iContent;\n            if (showIp) {\n                iContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.ip}</td>;\n            }\n\n            let sContent;\n            if (showSession) {\n                sContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.sessionId}</td>;\n            }\n\n            let descStyle = '';\n            if (auditInfo.desc.toLowerCase().indexOf('fail') !== -1) {\n                descStyle = ' color--error';\n            }\n\n            accessList[i] = (\n                <tr key={audit.id}>\n                    <td className='whitespace--nowrap word-break--all'>{auditInfo.timestamp}</td>\n                    {uContent}\n                    <td\n                        className={'word-break--all' + descStyle}\n                    >\n                        {auditInfo.desc}\n                    </td>\n                    {iContent}\n                    {sContent}\n                </tr>\n            );\n        }\n\n        let userIdContent;\n        if (showUserId) {\n            userIdContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.userId'\n                        defaultMessage='User ID'\n                    />\n                </th>\n            );\n        }\n\n        let ipContent;\n        if (showIp) {\n            ipContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.ip'\n                        defaultMessage='IP Address'\n                    />\n                </th>\n            );\n        }\n\n        let sessionContent;\n        if (showSession) {\n            sessionContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.session'\n                        defaultMessage='Session ID'\n                    />\n                </th>\n            );\n        }\n\n        return (\n            <table className='table'>\n                <thead>\n                    <tr>\n                        <th>\n                            <FormattedMessage\n                                id='audit_table.timestamp'\n                                defaultMessage='Timestamp'\n                            />\n                        </th>\n                        {userIdContent}\n                        <th>\n                            <FormattedMessage\n                                id='audit_table.action'\n                                defaultMessage='Action'\n                            />\n                        </th>\n                        {ipContent}\n                        {sessionContent}\n                    </tr>\n                </thead>\n                <tbody>\n                    {accessList}\n                </tbody>\n            </table>\n        );\n    }\n\n    formatAuditInfo(audit) {\n        const {formatMessage} = this.props.intl;\n        const actionURL = audit.action.replace(/\\/api\\/v[1-9]/, '');\n        let auditDesc = '';\n\n        if (actionURL.indexOf('/channels') === 0) {\n            const channelInfo = audit.extra_info.split(' ');\n            const channelNameField = channelInfo[0].split('=');\n\n            let channelURL = '';\n            let channelObj;\n            let channelName = '';\n            if (channelNameField.indexOf('name') >= 0) {\n                channelURL = channelNameField[channelNameField.indexOf('name') + 1];\n                channelObj = this.props.getByName(channelURL);\n                if (channelObj) {\n                    channelName = channelObj.display_name;\n                } else {\n                    channelName = channelURL;\n                }\n            }\n\n            switch (actionURL) {\n            case '/channels/create':\n                auditDesc = formatMessage(holders.channelCreated, {channelName});\n                break;\n            case '/channels/create_direct':\n                auditDesc = formatMessage(holders.establishedDM, {username: getDirectTeammate(channelObj.id).username});\n                break;\n            case '/channels/update':\n                auditDesc = formatMessage(holders.nameUpdated, {channelName});\n                break;\n            case '/channels/update_desc': // support the old path\n            case '/channels/update_header':\n                auditDesc = formatMessage(holders.headerUpdated, {channelName});\n                break;\n            default: {\n                let userIdField = [];\n                let userId = '';\n                let username = '';\n\n                if (channelInfo[1]) {\n                    userIdField = channelInfo[1].split('=');\n\n                    if (userIdField.indexOf('user_id') >= 0) {\n                        userId = userIdField[userIdField.indexOf('user_id') + 1];\n                        var profile = this.props.getUser(userId);\n                        if (profile) {\n                            username = profile.username;\n                        }\n                    }\n                }\n\n                if ((/\\/channels\\/[A-Za-z0-9]+\\/delete/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.channelDeleted, {url: channelURL});\n                } else if ((/\\/channels\\/[A-Za-z0-9]+\\/add/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.userAdded, {username, channelName});\n                } else if ((/\\/channels\\/[A-Za-z0-9]+\\/remove/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.userRemoved, {username, channelName});\n                }\n\n                break;\n            }\n            }\n        } else if (actionURL.indexOf('/oauth') === 0) {\n            const oauthInfo = audit.extra_info.split(' ');\n\n            switch (actionURL) {\n            case '/oauth/register': {\n                const clientIdField = oauthInfo[0].split('=');\n\n                if (clientIdField[0] === 'client_id') {\n                    auditDesc = formatMessage(holders.attemptedRegisterApp, {id: clientIdField[1]});\n                }\n\n                break;\n            }\n            case '/oauth/allow':\n                if (oauthInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedAllowOAuthAccess);\n                } else if (oauthInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullOAuthAccess);\n                } else if (oauthInfo[0] === 'fail - redirect_uri did not match registered callback') {\n                    auditDesc = formatMessage(holders.failedOAuthAccess);\n                }\n\n                break;\n            case '/oauth/access_token':\n                if (oauthInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedOAuthToken);\n                } else if (oauthInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullOAuthToken);\n                } else {\n                    const oauthTokenFailure = oauthInfo[0].split('-');\n\n                    if (oauthTokenFailure[0].trim() === 'fail' && oauthTokenFailure[1]) {\n                        auditDesc = formatMessage(oauthTokenFailure, {token: oauthTokenFailure[1].trim()});\n                    }\n                }\n\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/users') === 0) {\n            const userInfo = audit.extra_info.split(' ');\n\n            switch (actionURL) {\n            case '/users/login':\n                if (userInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedLogin);\n                } else if (userInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullLogin);\n                } else if (userInfo[0] === 'authenticated') {\n                    auditDesc = formatMessage(holders.authenticated);\n                } else if (userInfo[0]) {\n                    auditDesc = formatMessage(holders.failedLogin);\n                }\n\n                break;\n            case '/users/revoke_session':\n                auditDesc = formatMessage(holders.sessionRevoked, {sessionId: userInfo[0].split('=')[1]});\n                break;\n            case '/users/newimage':\n                auditDesc = formatMessage(holders.updatePicture);\n                break;\n            case '/users/update':\n                auditDesc = formatMessage(holders.updateGeneral);\n                break;\n            case '/users/newpassword':\n                if (userInfo[0] === 'attempted') {\n                    auditDesc = formatMessage(holders.attemptedPassword);\n                } else if (userInfo[0] === 'completed') {\n                    auditDesc = formatMessage(holders.successfullPassword);\n                } else if (userInfo[0] === 'failed - tried to update user password who was logged in through oauth') {\n                    auditDesc = formatMessage(holders.failedPassword);\n                }\n\n                break;\n            case '/users/update_roles': {\n                const userRoles = userInfo[0].split('=')[1];\n\n                auditDesc = formatMessage(holders.updatedRol);\n                if (userRoles.trim()) {\n                    auditDesc += userRoles;\n                } else {\n                    auditDesc += formatMessage(holders.member);\n                }\n\n                break;\n            }\n            case '/users/update_active': {\n                const updateType = userInfo[0].split('=')[0];\n                const updateField = userInfo[0].split('=')[1];\n\n                /* Either describes account activation/deactivation or a revoked session as part of an account deactivation */\n                if (updateType === 'active') {\n                    if (updateField === 'true') {\n                        auditDesc = formatMessage(holders.accountActive);\n                    } else if (updateField === 'false') {\n                        auditDesc = formatMessage(holders.accountInactive);\n                    }\n\n                    const actingUserInfo = userInfo[1].split('=');\n                    if (actingUserInfo[0] === 'session_user') {\n                        const actingUser = this.props.getUser(actingUserInfo[1]);\n                        const user = this.props.currentUser;\n                        if (user && actingUser && isSystemAdmin(user.roles)) {\n                            auditDesc += formatMessage(holders.by, {username: actingUser.username});\n                        } else if (user && actingUser) {\n                            auditDesc += formatMessage(holders.byAdmin);\n                        }\n                    }\n                } else if (updateType === 'session_id') {\n                    auditDesc = formatMessage(holders.sessionRevoked, {sessionId: updateField});\n                }\n\n                break;\n            }\n            case '/users/send_password_reset':\n                auditDesc = formatMessage(holders.sentEmail, {email: userInfo[0].split('=')[1]});\n                break;\n            case '/users/reset_password':\n                if (userInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedReset);\n                } else if (userInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullReset);\n                }\n\n                break;\n            case '/users/update_notify':\n                auditDesc = formatMessage(holders.updateGlobalNotifications);\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/hooks') === 0) {\n            const webhookInfo = audit.extra_info;\n\n            switch (actionURL) {\n            case '/hooks/incoming/create':\n                if (webhookInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedWebhookCreate);\n                } else if (webhookInfo === 'success') {\n                    auditDesc = formatMessage(holders.succcessfullWebhookCreate);\n                } else if (webhookInfo === 'fail - bad channel permissions') {\n                    auditDesc = formatMessage(holders.failedWebhookCreate);\n                }\n\n                break;\n            case '/hooks/incoming/delete':\n                if (webhookInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedWebhookDelete);\n                } else if (webhookInfo === 'success') {\n                    auditDesc = formatMessage(holders.successfullWebhookDelete);\n                } else if (webhookInfo === 'fail - inappropriate conditions') {\n                    auditDesc = formatMessage(holders.failedWebhookDelete);\n                }\n\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/license') === 0) {\n            const licenseInfo = audit.extra_info;\n\n            switch (actionURL) {\n            case '/license/add':\n                if (licenseInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedLicenseAdd);\n                } else if (licenseInfo === 'success') {\n                    auditDesc = formatMessage(holders.successfullLicenseAdd);\n                } else if (licenseInfo === 'failed - expired or non-started license') {\n                    auditDesc = formatMessage(holders.failedExpiredLicenseAdd);\n                } else if (licenseInfo === 'failed - invalid license') {\n                    auditDesc = formatMessage(holders.failedInvalidLicenseAdd);\n                }\n\n                break;\n            case '/license/remove':\n                auditDesc = formatMessage(holders.licenseRemoved);\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/admin/download_compliance_report') === 0) {\n            auditDesc = toTitleCase(audit.extra_info);\n        } else {\n            switch (actionURL) {\n            case '/logout':\n                auditDesc = formatMessage(holders.logout);\n                break;\n            case '/verify_email':\n                auditDesc = formatMessage(holders.verified);\n                break;\n            default:\n                break;\n            }\n        }\n\n        /* If all else fails... */\n        if (!auditDesc) {\n            /* Currently not called anywhere */\n            if (audit.extra_info.indexOf('revoked_all=') >= 0) {\n                auditDesc = formatMessage(holders.revokedAll);\n            } else {\n                let actionDesc = '';\n                if (actionURL && actionURL.lastIndexOf('/') !== -1) {\n                    actionDesc = actionURL.substring(actionURL.lastIndexOf('/') + 1).replace('_', ' ');\n                    actionDesc = toTitleCase(actionDesc);\n                }\n\n                let extraInfoDesc = '';\n                if (audit.extra_info) {\n                    extraInfoDesc = audit.extra_info;\n\n                    if (extraInfoDesc.indexOf('=') !== -1) {\n                        extraInfoDesc = extraInfoDesc.substring(extraInfoDesc.indexOf('=') + 1);\n                    }\n                }\n                auditDesc = actionDesc + ' ' + extraInfoDesc;\n            }\n        }\n\n        const date = new Date(audit.create_at);\n        const auditInfo = {};\n        auditInfo.timestamp = (\n            <div>\n                <div>\n                    <FormattedDate\n                        value={date}\n                        day='2-digit'\n                        month='short'\n                        year='numeric'\n                    />\n                </div>\n                <div>\n                    <FormattedTime\n                        value={date}\n                        hour='2-digit'\n                        minute='2-digit'\n                    />\n                </div>\n            </div>\n        );\n\n        const auditProfile = this.props.getUser(audit.user_id);\n\n        auditInfo.userId = auditProfile ? auditProfile.email : audit.user_id;\n        auditInfo.desc = auditDesc;\n        auditInfo.ip = audit.ip_address;\n        auditInfo.sessionId = audit.session_id;\n\n        return auditInfo;\n    }\n}\n\nexport default injectIntl(AuditTable);\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getMissingProfilesByIds} from 'mattermost-redux/actions/users';\nimport {getUser, getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getChannelByName} from 'mattermost-redux/selectors/entities/channels';\n\nimport AuditTable from './audit_table.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUser: getCurrentUser(state),\n        getUser: (userId) => getUser(state, userId),\n        getByName: (channelName) => getChannelByName(state, channelName),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMissingProfilesByIds,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuditTable);\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport {AdvancedSections} from 'utils/constants.jsx';\n\nexport default class JoinLeaveSection extends React.PureComponent {\n    static propTypes = {\n        activeSection: PropTypes.string,\n        currentUserId: PropTypes.string.isRequired,\n        joinLeave: PropTypes.string,\n        onUpdateSection: PropTypes.func.isRequired,\n        renderOnOffLabel: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            joinLeaveState: props.joinLeave,\n        };\n    }\n\n    handleOnChange = (e) => {\n        const value = e.currentTarget.value;\n\n        this.setState({joinLeaveState: value});\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState({joinLeaveState: this.props.joinLeave});\n        }\n\n        this.props.onUpdateSection(section);\n    }\n\n    handleSubmit = () => {\n        const {actions, currentUserId, onUpdateSection} = this.props;\n        const joinLeavePreference = {category: Preferences.CATEGORY_ADVANCED_SETTINGS, user_id: currentUserId, name: Preferences.ADVANCED_FILTER_JOIN_LEAVE, value: this.state.joinLeaveState};\n        actions.savePreferences(currentUserId, [joinLeavePreference]);\n\n        onUpdateSection();\n    }\n\n    render() {\n        const {joinLeaveState} = this.state;\n        if (this.props.activeSection === AdvancedSections.JOIN_LEAVE) {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.joinLeaveTitle'\n                            defaultMessage='Enable Join/Leave Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='joinLeaveSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOn'\n                                        type='radio'\n                                        value={'true'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'true'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOff'\n                                        type='radio'\n                                        value={'false'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'false'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='margin-top x3'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveDesc'\n                                    defaultMessage='When \"On\", System Messages saying a user has joined or left a channel will be visible. When \"Off\", the System Messages about joining or leaving a channel will be hidden. A message will still show up when you are added to a channel, so you can receive a notification.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={AdvancedSections.JOIN_LEAVE}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.joinLeaveTitle'\n                        defaultMessage='Enable Join/Leave Messages'\n                    />\n                }\n                describe={this.props.renderOnOffLabel(joinLeaveState)}\n                section={AdvancedSections.JOIN_LEAVE}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport JoinLeaveSection from './join_leave_section.jsx';\n\nfunction mapStateToProps(state) {\n    const joinLeave = getPreference(\n        state,\n        Preferences.CATEGORY_ADVANCED_SETTINGS,\n        Preferences.ADVANCED_FILTER_JOIN_LEAVE,\n        'true'\n    );\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        joinLeave,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JoinLeaveSection);\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nimport JoinLeaveSection from './join_leave_section';\n\nconst PreReleaseFeatures = Constants.PRE_RELEASE_FEATURES;\n\nexport default class AdvancedSettingsDisplay extends React.PureComponent {\n    static propTypes = {\n        currentUser: PropTypes.object.isRequired,\n        advancedSettingsCategory: PropTypes.array.isRequired,\n        sendOnCtrlEnter: PropTypes.string.isRequired,\n        codeBlockOnCtrlEnter: PropTypes.bool,\n        formatting: PropTypes.string.isRequired,\n        joinLeave: PropTypes.string.isRequired,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        enablePreviewFeatures: PropTypes.bool,\n        enableUserDeactivation: PropTypes.bool,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n            updateUserActive: PropTypes.func.isRequired,\n            revokeAllSessionsForUser: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = () => {\n        const advancedSettings = this.props.advancedSettingsCategory;\n        const settings = {\n            send_on_ctrl_enter: this.props.sendOnCtrlEnter,\n            code_block_ctrl_enter: this.props.codeBlockOnCtrlEnter,\n            formatting: this.props.formatting,\n            join_leave: this.props.joinLeave,\n        };\n\n        const preReleaseFeaturesKeys = Object.keys(PreReleaseFeatures);\n        let enabledFeatures = 0;\n        for (const as of advancedSettings) {\n            for (const key of preReleaseFeaturesKeys) {\n                const feature = PreReleaseFeatures[key];\n\n                if (as.name === Constants.FeatureTogglePrefix + feature.label) {\n                    settings[as.name] = as.value;\n\n                    if (as.value === 'true') {\n                        enabledFeatures += 1;\n                    }\n                }\n            }\n        }\n\n        const isSaving = false;\n\n        const previewFeaturesEnabled = this.props.enablePreviewFeatures;\n        const showDeactivateAccountModal = false;\n\n        return {\n            preReleaseFeatures: PreReleaseFeatures,\n            settings,\n            preReleaseFeaturesKeys,\n            enabledFeatures,\n            isSaving,\n            previewFeaturesEnabled,\n            showDeactivateAccountModal,\n        };\n    }\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n        this.setState(settings);\n    }\n\n    toggleFeature = (feature, checked) => {\n        const settings = this.state.settings;\n        settings[Constants.FeatureTogglePrefix + feature] = String(checked);\n\n        let enabledFeatures = 0;\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0 && this.state.settings[setting] === 'true') {\n                enabledFeatures++;\n            }\n        });\n\n        this.setState({settings, enabledFeatures});\n    }\n\n    saveEnabledFeatures = () => {\n        const features = [];\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0) {\n                features.push(setting);\n            }\n        });\n\n        this.handleSubmit(features);\n    }\n\n    handleSubmit = async (settings) => {\n        const preferences = [];\n        const {actions, currentUser} = this.props;\n        const userId = currentUser.id;\n\n        // this should be refactored so we can actually be certain about what type everything is\n        (Array.isArray(settings) ? settings : [settings]).forEach((setting) => {\n            preferences.push({\n                user_id: userId,\n                category: Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n        });\n\n        this.setState({isSaving: true});\n        await actions.savePreferences(userId, preferences);\n\n        this.handleUpdateSection('');\n    }\n\n    handleDeactivateAccountSubmit = async () => {\n        const userId = this.props.currentUser.id;\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateUserActive(userId, false).\n            then(({error}) => {\n                if (error) {\n                    this.setState({serverError: error.message});\n                }\n            });\n\n        const {data, error} = await this.props.actions.revokeAllSessionsForUser(userId);\n        if (data) {\n            emitUserLoggedOutEvent();\n        } else if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleShowDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: true,\n        });\n    }\n\n    handleHideDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: false,\n        });\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState(this.getStateFromProps());\n        }\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    }\n\n    renderOnOffLabel(enabled) {\n        if (enabled === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.advance.on'\n                defaultMessage='On'\n            />\n        );\n    }\n\n    renderCtrlEnterLabel() {\n        const ctrlEnter = this.state.settings.send_on_ctrl_enter;\n        const codeBlockCtrlEnter = this.state.settings.code_block_ctrl_enter;\n        if (ctrlEnter === 'false' && codeBlockCtrlEnter === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        } else if (ctrlEnter === 'true' && codeBlockCtrlEnter === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.onForAllMessages'\n                    defaultMessage='On for all messages'\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='user.settings.advance.onForCode'\n                defaultMessage='On only for code blocks starting with ```'\n            />\n        );\n    }\n\n    renderFormattingSection = () => {\n        if (this.props.activeSection === 'formatting') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.formattingTitle'\n                            defaultMessage='Enable Post Formatting'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='formattingSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOn'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting !== 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOff'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='margin-top x3'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingDesc'\n                                    defaultMessage='If enabled, posts will be formatted to create links, show emoji, style the text, and add line breaks. By default, this setting is enabled.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'formatting'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.formattingTitle'\n                        defaultMessage='Enable Post Formatting'\n                    />\n                }\n                describe={this.renderOnOffLabel(this.state.settings.formatting)}\n                section={'formatting'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderFeatureLabel(feature) {\n        switch (feature) {\n        case 'MARKDOWN_PREVIEW':\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.markdown_preview'\n                    defaultMessage='Show markdown preview option in message input box'\n                />\n            );\n        default:\n            return null;\n        }\n    }\n\n    render() {\n        const serverError = this.state.serverError || null;\n        let ctrlSendSection;\n\n        if (this.props.activeSection === 'advancedCtrlSend') {\n            const ctrlSendActive = [\n                this.state.settings.send_on_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'false',\n            ];\n\n            const inputs = [\n                <div key='ctrlSendSetting'>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOn'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[0]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'true');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForAllMessages'\n                                defaultMessage='On for all messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOnForCode'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[1]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForCode'\n                                defaultMessage='On only for code blocks starting with ```'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOff'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[2]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'false');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.off'\n                                defaultMessage='Off'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.sendDesc'\n                            defaultMessage='When enabled, CTRL + ENTER will send the message and ENTER inserts a new line.'\n                        />\n                    </div>\n                </div>,\n            ];\n            ctrlSendSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.sendTitle'\n                            defaultMessage='Send messages on CTRL+ENTER'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={this.handleSubmit.bind(this, ['send_on_ctrl_enter', 'code_block_ctrl_enter'])}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            ctrlSendSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.sendTitle'\n                            defaultMessage='Send messages on CTRL+ENTER'\n                        />\n                    }\n                    describe={this.renderCtrlEnterLabel()}\n                    section={'advancedCtrlSend'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const formattingSection = this.renderFormattingSection();\n        let formattingSectionDivider = null;\n        if (formattingSection) {\n            formattingSectionDivider = <div className='divider-light'/>;\n        }\n\n        let previewFeaturesSection;\n        let previewFeaturesSectionDivider;\n        if (this.state.previewFeaturesEnabled && this.state.preReleaseFeaturesKeys.length > 0) {\n            previewFeaturesSectionDivider = (\n                <div className='divider-light'/>\n            );\n\n            if (this.props.activeSection === 'advancedPreviewFeatures') {\n                const inputs = [];\n\n                this.state.preReleaseFeaturesKeys.forEach((key) => {\n                    const feature = this.state.preReleaseFeatures[key];\n                    inputs.push(\n                        <div key={'advancedPreviewFeatures_' + feature.label}>\n                            <div className='checkbox'>\n                                <label>\n                                    <input\n                                        id={'advancedPreviewFeatures' + feature.label}\n                                        type='checkbox'\n                                        checked={this.state.settings[Constants.FeatureTogglePrefix + feature.label] === 'true'}\n                                        onChange={(e) => {\n                                            this.toggleFeature(feature.label, e.target.checked);\n                                        }}\n                                    />\n                                    {this.renderFeatureLabel(key)}\n                                </label>\n                            </div>\n                        </div>\n                    );\n                });\n\n                inputs.push(\n                    <div key='advancedPreviewFeatures_helptext'>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.preReleaseDesc'\n                            defaultMessage=\"Check any pre-released features you'd like to preview.  You may also need to refresh the page before the setting will take effect.\"\n                        />\n                    </div>\n                );\n                previewFeaturesSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.preReleaseTitle'\n                                defaultMessage='Preview pre-release features'\n                            />\n                        }\n                        inputs={inputs}\n                        submit={this.saveEnabledFeatures}\n                        saving={this.state.isSaving}\n                        server_error={serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                previewFeaturesSection = (\n                    <SettingItemMin\n                        title={Utils.localizeMessage('user.settings.advance.preReleaseTitle', 'Preview pre-release features')}\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.enabledFeatures'\n                                defaultMessage='{count, number} {count, plural, one {Feature} other {Features}} Enabled'\n                                values={{count: this.state.enabledFeatures}}\n                            />\n                        }\n                        section={'advancedPreviewFeatures'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        let deactivateAccountSection = '';\n        let makeConfirmationModal = '';\n        const currentUser = this.props.currentUser;\n\n        if (currentUser.auth_service === '' && this.props.enableUserDeactivation) {\n            if (this.props.activeSection === 'deactivateAccount') {\n                deactivateAccountSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        inputs={[\n                            <div key='formattingSetting'>\n                                <div>\n                                    <br/>\n                                    <FormattedMessage\n                                        id='user.settings.advance.deactivateDesc'\n                                        defaultMessage='Deactivating your account removes your ability to log in to this server and disables all email and mobile notifications. To reactivate your account, contact your System Administrator.'\n                                    />\n                                </div>\n                            </div>,\n                        ]}\n                        saveButtonText={'Deactivate'}\n                        setting={'deactivateAccount'}\n                        submit={this.handleShowDeactivateAccountModal}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                deactivateAccountSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateDescShort'\n                                defaultMessage=\"Click 'Edit' to deactivate your account\"\n                            />\n                        }\n                        section={'deactivateAccount'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n\n            const confirmButtonClass = 'btn btn-danger';\n            const deactivateMemberButton = (\n                <FormattedMessage\n                    id='user.settings.advance.deactivate_member_modal.deactivateButton'\n                    defaultMessage='Yes, deactivate my account'\n                />\n            );\n\n            makeConfirmationModal = (\n                <ConfirmModal\n                    show={this.state.showDeactivateAccountModal}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateAccountTitle'\n                            defaultMessage='Confirm Deactivation'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateDesc'\n                            defaultMessage='Are you sure you want to deactivate your account? This can only be reversed by your System Administrator.'\n                        />\n                    }\n                    confirmButtonClass={confirmButtonClass}\n                    confirmButtonText={deactivateMemberButton}\n                    onConfirm={this.handleDeactivateAccountSubmit}\n                    onCancel={this.handleHideDeactivateAccountModal}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {ctrlSendSection}\n                    {formattingSectionDivider}\n                    {formattingSection}\n                    <div className='divider-light'/>\n                    <JoinLeaveSection\n                        activeSection={this.props.activeSection}\n                        onUpdateSection={this.handleUpdateSection}\n                        renderOnOffLabel={this.renderOnOffLabel}\n                    />\n                    {previewFeaturesSectionDivider}\n                    {previewFeaturesSection}\n                    {formattingSectionDivider}\n                    {deactivateAccountSection}\n                    <div className='divider-dark'/>\n                    {makeConfirmationModal}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {get, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {updateUserActive, revokeAllSessionsForUser} from 'mattermost-redux/actions/users';\n\nimport {Preferences} from 'utils/constants.jsx';\n\nimport AdvancedSettingsDisplay from './user_settings_advanced.jsx';\n\nfunction makeMapStateToProps() {\n    const getAdvancedSettingsCategory = makeGetCategory();\n\n    return (state) => {\n        const config = getConfig(state);\n\n        const enablePreviewFeatures = config.EnablePreviewFeatures === 'true';\n        const enableUserDeactivation = config.EnableUserDeactivation === 'true';\n\n        return {\n            advancedSettingsCategory: getAdvancedSettingsCategory(state, Preferences.CATEGORY_ADVANCED_SETTINGS),\n            sendOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter', 'false'),\n            codeBlockOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', 'true'),\n            formatting: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'formatting', 'true'),\n            joinLeave: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', 'true'),\n            currentUser: getCurrentUser(state),\n            enablePreviewFeatures,\n            enableUserDeactivation,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n            updateUserActive,\n            revokeAllSessionsForUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(AdvancedSettingsDisplay);\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {ChromePicker, ColorResult} from 'react-color';\n\ntype Props = {\n    id: string;\n    color: string;\n    onChange?: (hex: string) => void;\n}\n\ntype State = {\n    isOpened: boolean;\n}\n\nclass ColorInput extends React.PureComponent<Props, State> {\n    private colorPicker: React.RefObject<HTMLDivElement>;\n\n    public constructor(props: Props) {\n        super(props);\n        this.colorPicker = React.createRef();\n        this.state = {\n            isOpened: false,\n        };\n    }\n\n    public componentDidUpdate(prevProps: Props, prevState: State) {\n        const {isOpened: prevIsOpened} = prevState;\n        const {isOpened} = this.state;\n\n        if (isOpened !== prevIsOpened) {\n            if (isOpened) {\n                document.addEventListener('click', this.checkClick);\n            } else {\n                document.removeEventListener('click', this.checkClick);\n            }\n        }\n    }\n\n    private checkClick = (e: MouseEvent): void => {\n        if (!this.colorPicker.current || !this.colorPicker.current.contains(e.target as Element)) {\n            this.setState({isOpened: false});\n        }\n    };\n\n    private togglePicker = () => {\n        this.setState({isOpened: !this.state.isOpened});\n    };\n\n    private handleChange = (newColorData: ColorResult) => {\n        const {hex} = newColorData;\n        const {onChange: handleChange} = this.props;\n\n        if (handleChange) {\n            handleChange(hex);\n        }\n    };\n\n    public render() {\n        const {color, id} = this.props;\n        const {isOpened} = this.state;\n\n        return (\n            <div className='color-input input-group'>\n                <input\n                    id={`${id}-inputColorValue`}\n                    className='form-control'\n                    type='text'\n                    value={color}\n                    readOnly={true}\n                />\n                <span\n                    id={`${id}-squareColorIcon`}\n                    className='input-group-addon'\n                    onClick={this.togglePicker}\n                >\n                    <i\n                        id={`${id}-squareColorIconValue`}\n                        className='color-icon'\n                        style={{\n                            backgroundColor: color,\n                        }}\n                    />\n                </span>\n                {isOpened && (\n                    <div\n                        ref={this.colorPicker}\n                        className='color-popover'\n                        id={`${id}-ChromePickerModal`}\n                    >\n                        <ChromePicker\n                            color={color}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default ColorInput;\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ColorInput from 'components/color_input';\n\nclass ColorChooser extends React.Component {\n    static propTypes = {\n\n        /*\n         * The id of setting that we will change\n         */\n        id: PropTypes.string.isRequired,\n\n        /*\n         * The label of setting that we will choose\n         */\n        label: PropTypes.string.isRequired,\n\n        /*\n         * Selected color\n         */\n        color: PropTypes.string.isRequired,\n\n        /*\n         * Function called when color changed takes 2 arguments: Id of changing setting and new color\n         */\n        onChange: PropTypes.func,\n    }\n\n    handleChange = (newColor) => {\n        const {id, onChange: handleChange} = this.props;\n        if (handleChange) {\n            handleChange(id, newColor);\n        }\n    }\n\n    render() {\n        const {label, color, id} = this.props;\n        return (\n            <div>\n                <label className='custom-label'>{label}</label>\n                <ColorInput\n                    id={id}\n                    color={color}\n                    onChange={this.handleChange}\n                />\n            </div>\n        );\n    }\n}\n\nexport default ColorChooser;\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {OverlayTrigger, Popover} from 'react-bootstrap';\nimport {defineMessages, FormattedMessage, intlShape} from 'react-intl';\n\nimport {t} from 'utils/i18n';\nimport 'bootstrap-colorpicker';\n\nimport Constants from 'utils/constants.jsx';\nimport * as UserAgent from 'utils/user_agent.jsx';\n\nimport ColorChooser from './color_chooser.jsx';\n\nconst messages = defineMessages({\n    sidebarBg: {\n        id: t('user.settings.custom_theme.sidebarBg'),\n        defaultMessage: 'Sidebar BG',\n    },\n    sidebarText: {\n        id: t('user.settings.custom_theme.sidebarText'),\n        defaultMessage: 'Sidebar Text',\n    },\n    sidebarHeaderBg: {\n        id: t('user.settings.custom_theme.sidebarHeaderBg'),\n        defaultMessage: 'Sidebar Header BG',\n    },\n    sidebarHeaderTextColor: {\n        id: t('user.settings.custom_theme.sidebarHeaderTextColor'),\n        defaultMessage: 'Sidebar Header Text',\n    },\n    sidebarUnreadText: {\n        id: t('user.settings.custom_theme.sidebarUnreadText'),\n        defaultMessage: 'Sidebar Unread Text',\n    },\n    sidebarTextHoverBg: {\n        id: t('user.settings.custom_theme.sidebarTextHoverBg'),\n        defaultMessage: 'Sidebar Text Hover BG',\n    },\n    sidebarTextActiveBorder: {\n        id: t('user.settings.custom_theme.sidebarTextActiveBorder'),\n        defaultMessage: 'Sidebar Text Active Border',\n    },\n    sidebarTextActiveColor: {\n        id: t('user.settings.custom_theme.sidebarTextActiveColor'),\n        defaultMessage: 'Sidebar Text Active Color',\n    },\n    onlineIndicator: {\n        id: t('user.settings.custom_theme.onlineIndicator'),\n        defaultMessage: 'Online Indicator',\n    },\n    awayIndicator: {\n        id: t('user.settings.custom_theme.awayIndicator'),\n        defaultMessage: 'Away Indicator',\n    },\n    dndIndicator: {\n        id: t('user.settings.custom_theme.dndIndicator'),\n        defaultMessage: 'Do Not Disturb Indicator',\n    },\n    mentionBg: {\n        id: t('user.settings.custom_theme.mentionBg'),\n        defaultMessage: 'Mention Jewel BG',\n    },\n    mentionColor: {\n        id: t('user.settings.custom_theme.mentionColor'),\n        defaultMessage: 'Mention Jewel Text',\n    },\n    centerChannelBg: {\n        id: t('user.settings.custom_theme.centerChannelBg'),\n        defaultMessage: 'Center Channel BG',\n    },\n    centerChannelColor: {\n        id: t('user.settings.custom_theme.centerChannelColor'),\n        defaultMessage: 'Center Channel Text',\n    },\n    newMessageSeparator: {\n        id: t('user.settings.custom_theme.newMessageSeparator'),\n        defaultMessage: 'New Message Separator',\n    },\n    linkColor: {\n        id: t('user.settings.custom_theme.linkColor'),\n        defaultMessage: 'Link Color',\n    },\n    buttonBg: {\n        id: t('user.settings.custom_theme.buttonBg'),\n        defaultMessage: 'Button BG',\n    },\n    buttonColor: {\n        id: t('user.settings.custom_theme.buttonColor'),\n        defaultMessage: 'Button Text',\n    },\n    errorTextColor: {\n        id: t('user.settings.custom_theme.errorTextColor'),\n        defaultMessage: 'Error Text Color',\n    },\n    mentionHighlightBg: {\n        id: t('user.settings.custom_theme.mentionHighlightBg'),\n        defaultMessage: 'Mention Highlight BG',\n    },\n    mentionHighlightLink: {\n        id: t('user.settings.custom_theme.mentionHighlightLink'),\n        defaultMessage: 'Mention Highlight Link',\n    },\n    codeTheme: {\n        id: t('user.settings.custom_theme.codeTheme'),\n        defaultMessage: 'Code Theme',\n    },\n});\n\nexport default class CustomThemeChooser extends React.Component {\n    static propTypes = {\n        theme: PropTypes.object.isRequired,\n        updateTheme: PropTypes.func.isRequired,\n    };\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        const copyTheme = this.setCopyTheme(this.props.theme);\n\n        this.state = {\n            copyTheme,\n        };\n    }\n\n    componentDidMount() {\n        $('.group--code').on('change', this.onCodeThemeChange);\n    }\n\n    componentWillUnmount() {\n        $('.group--code').off('change', this.onCodeThemeChange);\n    }\n\n    handleColorChange = (settingId, color) => {\n        const {updateTheme, theme} = this.props;\n        if (theme[settingId] !== color) {\n            const newTheme = {\n                ...theme,\n                type: 'custom',\n                [settingId]: color,\n            };\n\n            // For backwards compatability\n            if (settingId === 'mentionBg') {\n                newTheme.mentionBj = color;\n            }\n\n            updateTheme(newTheme);\n\n            const copyTheme = this.setCopyTheme(newTheme);\n\n            this.setState({\n                copyTheme,\n            });\n        }\n    }\n\n    setCopyTheme(theme) {\n        const copyTheme = Object.assign({}, theme);\n        delete copyTheme.type;\n        delete copyTheme.image;\n\n        return JSON.stringify(copyTheme);\n    }\n\n    pasteBoxChange = (e) => {\n        let text = '';\n\n        if (window.clipboardData && window.clipboardData.getData) { // IE\n            text = window.clipboardData.getData('Text');\n        } else {\n            text = e.clipboardData.getData('Text');//e.clipboardData.getData('text/plain');\n        }\n\n        if (text.length === 0) {\n            return;\n        }\n\n        let theme;\n        try {\n            theme = JSON.parse(text);\n        } catch (err) {\n            return;\n        }\n\n        this.setState({\n            copyTheme: JSON.stringify(theme),\n        });\n\n        theme.type = 'custom';\n        this.props.updateTheme(theme);\n    }\n\n    onChangeHandle = (e) => {\n        e.stopPropagation();\n    }\n\n    selectTheme = () => {\n        const textarea = this.refs.textarea;\n        textarea.focus();\n        textarea.setSelectionRange(0, this.state.copyTheme.length);\n    }\n\n    toggleSidebarStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.sidebarStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.sidebarStyles);\n    }\n\n    toggleCenterChannelStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.centerChannelStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.centerChannelStyles);\n    }\n\n    toggleLinkAndButtonStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.linkAndButtonStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.linkAndButtonStyles);\n    }\n\n    toggleSection(node) {\n        if (UserAgent.isIos()) {\n            // iOS doesn't support jQuery animations\n            $(node).toggleClass('open');\n        } else {\n            $(node).slideToggle();\n        }\n    }\n\n    onCodeThemeChange = (e) => {\n        const theme = {\n            ...this.props.theme,\n            type: 'custom',\n            codeTheme: e.target.value,\n        };\n\n        this.props.updateTheme(theme);\n    }\n\n    render() {\n        const {formatMessage} = this.context.intl;\n        const theme = this.props.theme;\n\n        const sidebarElements = [];\n        const centerChannelElements = [];\n        const linkAndButtonElements = [];\n        Constants.THEME_ELEMENTS.forEach((element, index) => {\n            if (element.id === 'codeTheme') {\n                const codeThemeOptions = [];\n                let codeThemeURL = '';\n\n                element.themes.forEach((codeTheme, codeThemeIndex) => {\n                    if (codeTheme.id === theme[element.id]) {\n                        codeThemeURL = codeTheme.iconURL;\n                    }\n                    codeThemeOptions.push(\n                        <option\n                            key={'code-theme-key' + codeThemeIndex}\n                            value={codeTheme.id}\n                        >\n                            {codeTheme.uiName}\n                        </option>\n                    );\n                });\n\n                var popoverContent = (\n                    <Popover\n                        bsStyle='info'\n                        id='code-popover'\n                        className='code-popover'\n                    >\n                        <img\n                            width='200'\n                            alt={'code theme image'}\n                            src={codeThemeURL}\n                        />\n                    </Popover>\n                );\n\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group'\n                        key={'custom-theme-key' + index}\n                    >\n                        <label className='custom-label'>{formatMessage(messages[element.id])}</label>\n                        <div\n                            className='input-group theme-group group--code dropdown'\n                            id={element.id}\n                        >\n                            <select\n                                id='codeThemeSelect'\n                                className='form-control'\n                                type='text'\n                                defaultValue={theme[element.id]}\n                            >\n                                {codeThemeOptions}\n                            </select>\n                            <OverlayTrigger\n                                placement='top'\n                                overlay={popoverContent}\n                                ref='headerOverlay'\n                            >\n                                <span className='input-group-addon'>\n                                    <img\n                                        alt={'code theme image'}\n                                        src={codeThemeURL}\n                                    />\n                                </span>\n                            </OverlayTrigger>\n                        </div>\n                    </div>\n                );\n            } else if (element.group === 'centerChannelElements') {\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={formatMessage(messages[element.id])}\n                            color={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>\n                );\n            } else if (element.group === 'sidebarElements') {\n                // Need to support old typo mentionBj element for mentionBg\n                let color = theme[element.id];\n                if (!color && element.id === 'mentionBg') {\n                    color = theme.mentionBj;\n                }\n\n                sidebarElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={formatMessage(messages[element.id])}\n                            color={color}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>\n                );\n            } else {\n                linkAndButtonElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={formatMessage(messages[element.id])}\n                            color={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>\n                );\n            }\n        });\n\n        const pasteBox = (\n            <div className='col-sm-12'>\n                <label className='custom-label'>\n                    <FormattedMessage\n                        id='user.settings.custom_theme.copyPaste'\n                        defaultMessage='Copy and paste to share theme colors:'\n                    />\n                </label>\n                <textarea\n                    ref='textarea'\n                    className='form-control'\n                    id='pasteBox'\n                    value={this.state.copyTheme}\n                    onPaste={this.pasteBoxChange}\n                    onChange={this.onChangeHandle}\n                    onClick={this.selectTheme}\n                />\n            </div>\n        );\n\n        return (\n            <div className='appearance-section padding-top'>\n                <div className='theme-elements row'>\n                    <div\n                        ref='sidebarStylesHeader'\n                        id='sidebarStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleSidebarStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.sidebarTitle'\n                            defaultMessage='Sidebar Styles'\n                        />\n                        <div className='header__icon'>\n                            <i\n                                className='fa fa-plus'\n                                title={formatMessage({id: 'generic_icons.expand', defaultMessage: 'Expand Icon'})}\n                            />\n                            <i\n                                className='fa fa-minus'\n                                title={formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='sidebarStyles'\n                        className='theme-elements__body'\n                    >\n                        {sidebarElements}\n                    </div>\n                </div>\n                <div\n                    id='centerChannelStyles'\n                    className='theme-elements row'\n                >\n                    <div\n                        ref='centerChannelStylesHeader'\n                        className='theme-elements__header'\n                        onClick={this.toggleCenterChannelStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.centerChannelTitle'\n                            defaultMessage='Center Channel Styles'\n                        />\n                        <div className='header__icon'>\n                            <i\n                                className='fa fa-plus'\n                                title={formatMessage({id: 'generic_icons.expand', defaultMessage: 'Expand Icon'})}\n                            />\n                            <i\n                                className='fa fa-minus'\n                                title={formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='centerChannelStyles'\n                        id='centerChannelStyles'\n                        className='theme-elements__body'\n                    >\n                        {centerChannelElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='linkAndButtonStylesHeader'\n                        id='linkAndButtonsStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleLinkAndButtonStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.linkButtonTitle'\n                            defaultMessage='Link and Button Styles'\n                        />\n                        <div className='header__icon'>\n                            <i\n                                className='fa fa-plus'\n                                title={formatMessage({id: 'generic_icons.expand', defaultMessage: 'Expand Icon'})}\n                            />\n                            <i\n                                className='fa fa-minus'\n                                title={formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='linkAndButtonStyles'\n                        className='theme-elements__body'\n                    >\n                        {linkAndButtonElements}\n                    </div>\n                </div>\n                <div className='row margin-top x2'>\n                    {pasteBox}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class PremadeThemeChooser extends React.Component {\n    render() {\n        const theme = this.props.theme;\n\n        const premadeThemes = [];\n        const allowedThemes = this.props.allowedThemes;\n        const hasAllowedThemes = allowedThemes.length > 1 || (allowedThemes[0] && allowedThemes[0].trim().length > 0);\n\n        for (const k in Constants.THEMES) {\n            if (Constants.THEMES.hasOwnProperty(k)) {\n                if (hasAllowedThemes && allowedThemes.indexOf(k) < 0) {\n                    continue;\n                }\n\n                const premadeTheme = $.extend(true, {}, Constants.THEMES[k]);\n\n                let activeClass = '';\n                if (premadeTheme.type === theme.type) {\n                    activeClass = 'active';\n                }\n\n                premadeThemes.push(\n                    <div\n                        className='col-xs-6 col-sm-3 premade-themes'\n                        key={'premade-theme-key' + k}\n                    >\n                        <div\n                            id={`premadeTheme${premadeTheme.type.replace(' ', '')}`}\n                            className={activeClass}\n                            onClick={() => this.props.updateTheme(premadeTheme)}\n                        >\n                            <label>\n                                <img\n                                    alt={'premade theme ' + k}\n                                    className='img-responsive'\n                                    src={premadeTheme.image}\n                                />\n                                <div className='theme-label'>{Utils.toTitleCase(premadeTheme.type)}</div>\n                            </label>\n                        </div>\n                    </div>\n                );\n            }\n        }\n\n        return (\n            <div className='row appearance-section'>\n                <div className='clearfix'>\n                    {premadeThemes}\n                </div>\n            </div>\n        );\n    }\n}\n\nPremadeThemeChooser.propTypes = {\n    theme: PropTypes.object.isRequired,\n    updateTheme: PropTypes.func.isRequired,\n    allowedThemes: PropTypes.arrayOf(PropTypes.string),\n};\n\nPremadeThemeChooser.defaultProps = {\n    allowedThemes: [],\n};\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PremadeThemeChooser from './premade_theme_chooser.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const allowedThemes = (config.AllowedThemes && config.AllowedThemes.split(',')) || [];\n\n    return {\n        allowedThemes,\n    };\n}\n\nexport default connect(mapStateToProps)(PremadeThemeChooser);\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ActionTypes, Constants} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport AppDispatcher from 'dispatcher/app_dispatcher.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport CustomThemeChooser from './custom_theme_chooser.jsx';\nimport PremadeThemeChooser from './premade_theme_chooser';\n\nexport default class ThemeSetting extends React.Component {\n    static propTypes = {\n        actions: PropTypes.shape({\n            saveTheme: PropTypes.func.isRequired,\n            deleteTeamSpecificThemes: PropTypes.func.isRequired,\n        }).isRequired,\n        currentTeamId: PropTypes.string.isRequired,\n        theme: PropTypes.object,\n        selected: PropTypes.bool.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        allowCustomThemes: PropTypes.bool,\n        focused: PropTypes.bool.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...this.getStateFromProps(props),\n            isSaving: false,\n        };\n\n        this.originalTheme = Object.assign({}, this.state.theme);\n    }\n\n    componentDidMount() {\n        if (this.props.selected) {\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.props.selected) {\n            $('.color-btn').removeClass('active-border');\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.selected && !nextProps.selected) {\n            this.resetFields();\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.selected) {\n            Utils.applyTheme(this.props.theme);\n        }\n    }\n\n    getStateFromProps(props = this.props) {\n        const theme = {...props.theme};\n        if (!theme.codeTheme) {\n            theme.codeTheme = Constants.DEFAULT_CODE_THEME;\n        }\n\n        return {\n            theme,\n            type: theme.type || 'premade',\n            showAllTeamsCheckbox: props.showAllTeamsCheckbox,\n            applyToAllTeams: props.applyToAllTeams,\n        };\n    }\n\n    scrollToTop() {\n        $('.ps-container.modal-body').scrollTop(0);\n    }\n\n    submitTheme = async () => {\n        const teamId = this.state.applyToAllTeams ? '' : this.props.currentTeamId;\n\n        this.setState({isSaving: true});\n\n        await this.props.actions.saveTheme(teamId, this.state.theme);\n\n        if (this.state.applyToAllTeams) {\n            await this.props.actions.deleteTeamSpecificThemes();\n        }\n\n        this.props.setRequireConfirm(false);\n        this.originalTheme = Object.assign({}, this.state.theme);\n        this.scrollToTop();\n        this.props.updateSection('');\n        this.setState({isSaving: false});\n    };\n\n    updateTheme = (theme) => {\n        let themeChanged = this.state.theme.length === theme.length;\n        if (!themeChanged) {\n            for (const field in theme) {\n                if (theme.hasOwnProperty(field)) {\n                    if (this.state.theme[field] !== theme[field]) {\n                        themeChanged = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.props.setRequireConfirm(themeChanged);\n\n        this.setState({theme});\n        Utils.applyTheme(theme);\n    };\n\n    updateType(type) {\n        this.setState({type});\n    }\n\n    resetFields = () => {\n        const state = this.getStateFromProps();\n        state.serverError = null;\n        this.setState(state);\n        this.scrollToTop();\n\n        Utils.applyTheme(state.theme);\n\n        this.props.setRequireConfirm(false);\n    };\n\n    handleImportModal = () => {\n        AppDispatcher.handleViewAction({\n            type: ActionTypes.TOGGLE_IMPORT_THEME_MODAL,\n            value: true,\n            callback: this.updateTheme,\n        });\n\n        this.props.setEnforceFocus(false);\n    };\n\n    handleUpdateSection = (section) => {\n        this.props.updateSection(section);\n    };\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        const displayCustom = this.state.type === 'custom';\n\n        let custom;\n        let premade;\n        if (displayCustom && this.props.allowCustomThemes) {\n            custom = (\n                <div key='customThemeChooser'>\n                    <CustomThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        } else {\n            premade = (\n                <div key='premadeThemeChooser'>\n                    <br/>\n                    <PremadeThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        }\n\n        let themeUI;\n        if (this.props.selected) {\n            const inputs = [];\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='premadeThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='standardThemes'\n                                type='radio'\n                                name='theme'\n                                checked={!displayCustom}\n                                onChange={this.updateType.bind(this, 'premade')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.themeColors'\n                                defaultMessage='Theme Colors'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            inputs.push(premade);\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='customThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='customThemes'\n                                type='radio'\n                                name='theme'\n                                checked={displayCustom}\n                                onChange={this.updateType.bind(this, 'custom')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.customTheme'\n                                defaultMessage='Custom Theme'\n                            />\n                        </label>\n                    </div>\n                );\n\n                inputs.push(custom);\n\n                inputs.push(\n                    <div key='otherThemes'>\n                        <br/>\n                        <a\n                            id='otherThemes'\n                            href='http://docs..vueteams.com/help/settings/theme-colors.html#custom-theme-examples'\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.otherThemes'\n                                defaultMessage='See other themes'\n                            />\n                        </a>\n                    </div>\n                );\n\n                inputs.push(\n                    <div\n                        key='importSlackThemeButton'\n                        className='padding-top'\n                    >\n                        <button\n                            id='slackImportTheme'\n                            className='theme style--none color--link'\n                            onClick={this.handleImportModal}\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.import'\n                                defaultMessage='Import theme colors from Slack'\n                            />\n                        </button>\n                    </div>\n                );\n            }\n\n            let allTeamsCheckbox = null;\n            if (this.state.showAllTeamsCheckbox) {\n                allTeamsCheckbox = (\n                    <div className='checkbox user-settings__submit-checkbox'>\n                        <label>\n                            <input\n                                id='applyThemeToAllTeams'\n                                type='checkbox'\n                                checked={this.state.applyToAllTeams}\n                                onChange={(e) => this.setState({applyToAllTeams: e.target.checked})}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.applyToAllTeams'\n                                defaultMessage='Apply new theme to all my teams'\n                            />\n                        </label>\n                    </div>\n                );\n            }\n\n            themeUI = (\n                <SettingItemMax\n                    inputs={inputs}\n                    submitExtra={allTeamsCheckbox}\n                    submit={this.submitTheme}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    width='full'\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            themeUI = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.theme.title'\n                            defaultMessage='Theme'\n                        />\n                    }\n                    describe={\n                        <FormattedMessage\n                            id='user.settings.display.theme.describe'\n                            defaultMessage='Open to manage your theme'\n                        />\n                    }\n                    section={'theme'}\n                    updateSection={this.handleUpdateSection}\n                    focused={this.props.focused}\n                />\n            );\n        }\n\n        return themeUI;\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTheme, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeamId, getMyTeamsCount} from 'mattermost-redux/selectors/entities/teams';\n\nimport {saveTheme, deleteTeamSpecificThemes} from 'mattermost-redux/actions/preferences';\n\nimport {Preferences} from 'utils/constants.jsx';\n\nimport UserSettingsTheme from './user_settings_theme.jsx';\n\nfunction makeMapStateToProps() {\n    const getThemeCategory = makeGetCategory();\n\n    return (state) => {\n        return {\n            currentTeamId: getCurrentTeamId(state),\n            theme: getTheme(state),\n            applyToAllTeams: getThemeCategory(state, Preferences.CATEGORY_THEME).length <= 1,\n            showAllTeamsCheckbox: getMyTeamsCount(state) > 1,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            saveTheme,\n            deleteTeamSpecificThemes,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(UserSettingsTheme);\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\n\nimport {getSupportedTimezones} from 'utils/timezone';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass TimezoneSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n        const timezone = item;\n\n        let className = 'mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        return (\n            <div\n                onClick={this.handleClick}\n                className={className}\n                {...Suggestion.baseProps}\n            >\n                {timezone}\n            </div>\n        );\n    }\n}\n\nexport default class TimezoneProvider extends Provider {\n    handlePretextChanged(timezonePrefix, resultsCallback) {\n        if (timezonePrefix.length === 0) {\n            this.displayAllTimezones(resultsCallback, timezonePrefix);\n            return true;\n        }\n\n        if (timezonePrefix) {\n            this.filterTimezones(resultsCallback, timezonePrefix);\n            return true;\n        }\n\n        return false;\n    }\n\n    async displayAllTimezones(resultsCallback) {\n        resultsCallback({\n            matchedPretext: '',\n            terms: getSupportedTimezones(),\n            items: getSupportedTimezones(),\n            component: TimezoneSuggestion,\n        });\n    }\n\n    async filterTimezones(resultsCallback, timezonePrefix) {\n        const filteredTimezones = getSupportedTimezones().filter((t) => (\n            getTimezoneRegion(t).toLowerCase().indexOf(timezonePrefix) >= 0 ||\n                t.toLowerCase().indexOf(timezonePrefix) >= 0\n        ));\n\n        resultsCallback({\n            matchedPretext: timezonePrefix,\n            terms: filteredTimezones,\n            items: filteredTimezones,\n            component: TimezoneSuggestion,\n        });\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {getBrowserTimezone} from 'utils/timezone';\n\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\nimport TimezoneProvider from 'components/suggestion/timezone_provider.jsx';\n\nexport default class ManageTimezones extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        useAutomaticTimezone: PropTypes.bool.isRequired,\n        automaticTimezone: PropTypes.string.isRequired,\n        manualTimezone: PropTypes.string.isRequired,\n        timezones: PropTypes.array.isRequired,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            useAutomaticTimezone: props.useAutomaticTimezone,\n            automaticTimezone: props.automaticTimezone,\n            manualTimezone: props.manualTimezone,\n            manualTimezoneInput: props.manualTimezone,\n            isSaving: false,\n        };\n    }\n\n    onChange = (e) => {\n        this.setState({manualTimezoneInput: e.target.value});\n    };\n\n    handleTimezoneSelected = (selected) => {\n        if (!selected) {\n            return;\n        }\n\n        this.setState({\n            manualTimezone: selected,\n            manualTimezoneInput: selected,\n        });\n    };\n\n    timezoneNotChanged = () => {\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const {\n            useAutomaticTimezone: oldUseAutomaticTimezone,\n            automaticTimezone: oldAutomaticTimezone,\n            manualTimezone: oldManualTimezone,\n        } = this.props;\n\n        return (\n            useAutomaticTimezone === oldUseAutomaticTimezone &&\n            automaticTimezone === oldAutomaticTimezone &&\n            manualTimezone === oldManualTimezone\n        );\n    };\n\n    changeTimezone = () => {\n        if (this.timezoneNotChanged()) {\n            this.props.updateSection('');\n            return;\n        }\n\n        this.submitUser();\n    };\n\n    submitUser = () => {\n        const {user, actions} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const timezone = {\n            useAutomaticTimezone: useAutomaticTimezone.toString(),\n            automaticTimezone,\n            manualTimezone,\n        };\n\n        const updatedUser = {\n            ...user,\n            timezone,\n        };\n\n        actions.updateMe(updatedUser).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.props.updateSection('');\n                } else if (err) {\n                    let serverError;\n                    if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    };\n\n    handleAutomaticTimezone = (e) => {\n        const useAutomaticTimezone = e.target.checked;\n        let automaticTimezone = '';\n\n        if (useAutomaticTimezone) {\n            automaticTimezone = getBrowserTimezone();\n        }\n\n        this.setState({\n            useAutomaticTimezone,\n            automaticTimezone,\n        });\n    };\n\n    handleManualTimezone = (e) => {\n        this.setState({manualTimezone: e.target.value});\n    };\n\n    render() {\n        const {timezones} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n        } = this.state;\n\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const inputs = [];\n\n        const timezoneRegion = (\n            <div\n                className='section-describe padding-top'\n            >\n                {useAutomaticTimezone && getTimezoneRegion(automaticTimezone)}\n            </div>\n        );\n\n        const noTimezonesFromServer = timezones.length === 0;\n        const automaticTimezoneInput = (\n            <div className='checkbox'>\n                <label>\n                    <input\n                        id='automaticTimezoneInput'\n                        type='checkbox'\n                        checked={useAutomaticTimezone}\n                        onChange={this.handleAutomaticTimezone}\n                        disabled={noTimezonesFromServer}\n                    />\n                    <FormattedMessage\n                        id='user.settings.timezones.automatic'\n                        defaultMessage='Set automatically'\n                    />\n                    {timezoneRegion}\n                </label>\n            </div>\n        );\n\n        const providers = [new TimezoneProvider()];\n        const manualTimezoneInput = (\n            <div key='changeTimezone'>\n                <label className='control-label'>\n                    <FormattedMessage\n                        id='user.settings.timezones.change'\n                        defaultMessage='Change timezone'\n                    />\n                </label>\n                <div className='padding-top'>\n                    <SuggestionBox\n                        ref={this.setSwitchBoxRef}\n                        className='form-control focused'\n                        type='search'\n                        onChange={this.onChange}\n                        value={this.state.manualTimezoneInput}\n                        onItemSelected={this.handleTimezoneSelected}\n                        listComponent={SuggestionList}\n                        maxLength='64'\n                        requiredCharacters={0}\n                        providers={providers}\n                        listStyle='bottom'\n                        completeOnTab={false}\n                        renderDividers={false}\n                        openOnFocus={true}\n                        disabled={noTimezonesFromServer}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(automaticTimezoneInput);\n\n        if (!useAutomaticTimezone) {\n            inputs.push(manualTimezoneInput);\n        }\n\n        inputs.push(\n            <div>\n                <br/>\n                <FormattedHTMLMessage\n                    id='user.settings.timezones.promote'\n                    defaultMessage='Select the time zone used for timestamps in the user interface and email notifications.'\n                />\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.timezone'\n                        defaultMessage='Timezone'\n                    />\n                }\n                containerStyle='timezone-container'\n                width='medium'\n                submit={this.changeTimezone}\n                saving={this.state.isSaving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\n\nimport ManageTimezones from './manage_timezones';\n\nfunction mapDispatchToProps(dispatch) {\n    return {actions: bindActionCreators({updateMe}, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ManageTimezones);\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect from 'react-select';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport {isKeyPressed} from 'utils/utils.jsx';\nimport Constants from 'utils/constants.jsx';\n\nexport default class ManageLanguage extends React.Component {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        locale: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        const locales = I18n.getLanguages();\n        const userLocale = props.locale;\n        const selectedOption = {value: locales[userLocale].value, label: locales[userLocale].name};\n        this.reactSelectContainer = React.createRef();\n\n        this.state = {\n            locale: props.locale,\n            selectedOption,\n            isSaving: false,\n            openMenu: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.addEventListener('keydown', this.handleContainerKeyDown);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.removeEventListener('keydown', this.handleContainerKeyDown);\n        }\n    }\n\n    handleContainerKeyDown = (e) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ESCAPE) && this.state.openMenu) {\n            document.querySelector('.modal-body').classList.remove('no-scroll');\n            this.setState({openMenu: false});\n            e.stopPropagation();\n        }\n    }\n\n    handleKeyDown = (e) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            document.querySelector('.modal-body').classList.add('no-scroll');\n            this.setState({openMenu: true});\n        }\n    }\n\n    setLanguage = (selectedOption) => {\n        this.setState({\n            locale: selectedOption.value,\n            selectedOption,\n        });\n    }\n\n    changeLanguage = () => {\n        if (this.props.user.locale === this.state.locale) {\n            this.props.updateSection('');\n        } else {\n            this.submitUser({\n                ...this.props.user,\n                locale: this.state.locale,\n            });\n        }\n    }\n\n    submitUser = (user) => {\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe(user).\n            then(({data, error: err}) => {\n                if (data) {\n                    // Do nothing since changing the locale essentially refreshes the page\n                } else if (err) {\n                    let serverError;\n                    if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    }\n\n    handleMenuClose = () => {\n        document.querySelector('.modal-body').classList.remove('no-scroll');\n        this.setState({openMenu: false});\n    }\n\n    handleMenuOpen = () => {\n        document.querySelector('.modal-body').classList.add('no-scroll');\n        this.setState({openMenu: true});\n    }\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const options = [];\n        const locales = I18n.getLanguages();\n\n        const languages = Object.keys(locales).map((l) => {\n            return {\n                value: locales[l].value,\n                name: locales[l].name,\n                order: locales[l].order,\n            };\n        }).sort((a, b) => a.order - b.order);\n\n        languages.forEach((lang) => {\n            options.push(\n                {value: lang.value, label: lang.name}\n            );\n        });\n\n        const reactStyles = {\n            menuPortal: (provided) => ({\n                ...provided,\n                zIndex: 9999,\n            }),\n        };\n\n        const input = (\n            <div key='changeLanguage'>\n                <br/>\n                <label className='control-label'>\n                    <FormattedMessage\n                        id='user.settings.languages.change'\n                        defaultMessage='Change interface language'\n                    />\n                </label>\n                <div\n                    ref={this.reactSelectContainer}\n                    className='padding-top'\n                >\n                    <ReactSelect\n                        className='react-select react-select-top'\n                        classNamePrefix='react-select'\n                        id='displayLanguage'\n                        menuIsOpen={this.state.openMenu}\n                        menuPortalTarget={document.body}\n                        styles={reactStyles}\n                        options={options}\n                        clearable={false}\n                        onChange={this.setLanguage}\n                        onKeyDown={this.handleKeyDown}\n                        value={this.state.selectedOption}\n                        onMenuClose={this.handleMenuClose}\n                        onMenuOpen={this.handleMenuOpen}\n                    />\n                    {serverError}\n                </div>\n                <div>\n                    <br/>\n                    <FormattedMarkdownMessage\n                        id='user.settings.languages.promote'\n                        defaultMessage='Select which language Vue displays in the user interface.\\n \\nWould you like to help with translations? Join the [Vue Translation Server](!http://translate.vueteams.com/) to contribute.'\n                    />\n                </div>\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.language'\n                        defaultMessage='Language'\n                    />\n                }\n                width='medium'\n                submit={this.changeLanguage}\n                saving={this.state.isSaving}\n                inputs={[input]}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\n\nimport ManageLanguages from './manage_languages';\n\nfunction mapDispatchToProps(dispatch) {\n    return {actions: bindActionCreators({updateMe}, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ManageLanguages);\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {getBrowserTimezone} from 'utils/timezone.jsx';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ThemeSetting from 'components/user_settings/display/user_settings_theme';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nimport ManageTimezones from './manage_timezones';\nimport ManageLanguages from './manage_languages';\n\nconst Preferences = Constants.Preferences;\n\nfunction getDisplayStateFromProps(props) {\n    return {\n        militaryTime: props.militaryTime,\n        teammateNameDisplay: props.teammateNameDisplay,\n        channelDisplayMode: props.channelDisplayMode,\n        messageDisplay: props.messageDisplay,\n        collapseDisplay: props.collapseDisplay,\n        linkPreviewDisplay: props.linkPreviewDisplay,\n    };\n}\n\nexport default class UserSettingsDisplay extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        timezones: PropTypes.array.isRequired,\n        userTimezone: PropTypes.object.isRequired,\n        allowCustomThemes: PropTypes.bool,\n        enableLinkPreviews: PropTypes.bool,\n        defaultClientLocale: PropTypes.string,\n        enableThemeSelection: PropTypes.bool,\n        configTeammateNameDisplay: PropTypes.string,\n        currentUserTimezone: PropTypes.string,\n        enableTimezone: PropTypes.bool,\n        shouldAutoUpdateTimezone: PropTypes.bool,\n        militaryTime: PropTypes.string,\n        teammateNameDisplay: PropTypes.string,\n        channelDisplayMode: PropTypes.string,\n        messageDisplay: PropTypes.string,\n        collapseDisplay: PropTypes.string,\n        linkPreviewDisplay: PropTypes.string,\n        actions: PropTypes.shape({\n            getSupportedTimezones: PropTypes.func.isRequired,\n            autoUpdateTimezone: PropTypes.func.isRequired,\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...getDisplayStateFromProps(props),\n            isSaving: false,\n        };\n\n        if (props.timezones.length === 0) {\n            props.actions.getSupportedTimezones();\n        }\n\n        this.prevSections = {\n            theme: 'dummySectionName', // dummy value that should never match any section name\n            clock: 'theme',\n            linkpreview: 'clock',\n            message_display: 'linkpreview',\n            channel_display_mode: 'message_display',\n            languages: 'channel_display_mode',\n        };\n    }\n\n    componentDidMount() {\n        const {actions, enableTimezone, shouldAutoUpdateTimezone} = this.props;\n\n        if (enableTimezone && shouldAutoUpdateTimezone) {\n            actions.autoUpdateTimezone(getBrowserTimezone());\n        }\n    }\n\n    handleSubmit = async () => {\n        const userId = this.props.user.id;\n\n        const timePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.USE_MILITARY_TIME,\n            value: this.state.militaryTime,\n        };\n        const teammateNameDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.NAME_NAME_FORMAT,\n            value: this.state.teammateNameDisplay,\n        };\n        const channelDisplayModePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CHANNEL_DISPLAY_MODE,\n            value: this.state.channelDisplayMode,\n        };\n        const messageDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.MESSAGE_DISPLAY,\n            value: this.state.messageDisplay,\n        };\n        const collapseDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSE_DISPLAY,\n            value: this.state.collapseDisplay,\n        };\n        const linkPreviewDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.LINK_PREVIEW_DISPLAY,\n            value: this.state.linkPreviewDisplay,\n        };\n\n        this.setState({isSaving: true});\n\n        const preferences = [\n            timePreference,\n            channelDisplayModePreference,\n            messageDisplayPreference,\n            collapseDisplayPreference,\n            linkPreviewDisplayPreference,\n            teammateNameDisplayPreference,\n        ];\n\n        await this.props.actions.savePreferences(userId, preferences);\n\n        this.updateSection('');\n    }\n\n    handleClockRadio = (militaryTime) => {\n        this.setState({militaryTime});\n    }\n\n    handleTeammateNameDisplayRadio = (teammateNameDisplay) => {\n        this.setState({teammateNameDisplay});\n    }\n\n    handleChannelDisplayModeRadio(channelDisplayMode) {\n        this.setState({channelDisplayMode});\n    }\n\n    handlemessageDisplayRadio(messageDisplay) {\n        this.setState({messageDisplay});\n    }\n\n    handleCollapseRadio(collapseDisplay) {\n        this.setState({collapseDisplay});\n    }\n\n    handleLinkPreviewRadio(linkPreviewDisplay) {\n        this.setState({linkPreviewDisplay});\n    }\n\n    handleOnChange(display) {\n        this.setState({...display});\n    }\n\n    updateSection = (section) => {\n        this.updateState();\n        this.props.updateSection(section);\n    }\n\n    updateState = () => {\n        const newState = getDisplayStateFromProps(this.props);\n        if (!Utils.areObjectsEqual(newState, this.state)) {\n            this.setState(newState);\n        }\n\n        this.setState({isSaving: false});\n    }\n\n    createSection(props) {\n        const {\n            section,\n            display,\n            value,\n            title,\n            firstOption,\n            secondOption,\n            thirdOption,\n            description,\n        } = props;\n\n        const firstMessage = (\n            <FormattedMessage\n                id={firstOption.radionButtonText.id}\n                defaultMessage={firstOption.radionButtonText.message}\n            />\n        );\n\n        let moreColon;\n        let firstMessageMore;\n        if (firstOption.radionButtonText.moreId) {\n            moreColon = ': ';\n            firstMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={firstOption.radionButtonText.moreId}\n                        defaultMessage={firstOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        const secondMessage = (\n            <FormattedMessage\n                id={secondOption.radionButtonText.id}\n                defaultMessage={secondOption.radionButtonText.message}\n            />\n        );\n\n        let secondMessageMore;\n        if (secondOption.radionButtonText.moreId) {\n            secondMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={secondOption.radionButtonText.moreId}\n                        defaultMessage={secondOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        let thirdMessage;\n        if (thirdOption) {\n            thirdMessage = (\n                <FormattedMessage\n                    id={thirdOption.radionButtonText.id}\n                    defaultMessage={thirdOption.radionButtonText.message}\n                />\n            );\n        }\n\n        const messageTitle = (\n            <FormattedMessage\n                id={title.id}\n                defaultMessage={title.message}\n            />\n        );\n\n        const messageDesc = (\n            <FormattedMessage\n                id={description.id}\n                defaultMessage={description.message}\n            />\n        );\n\n        if (this.props.activeSection === section) {\n            const format = [false, false, false];\n            if (value === firstOption.value) {\n                format[0] = true;\n            } else if (value === secondOption.value) {\n                format[1] = true;\n            } else {\n                format[2] = true;\n            }\n\n            const name = section + 'Format';\n            const key = section + 'UserDisplay';\n\n            const firstDisplay = {};\n            firstDisplay[display] = firstOption.value;\n\n            const secondDisplay = {};\n            secondDisplay[display] = secondOption.value;\n\n            const thirdDisplay = {};\n            if (thirdOption) {\n                thirdDisplay[display] = thirdOption.value;\n            }\n\n            let thirdSection;\n            if (thirdMessage) {\n                thirdSection = (\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'C'}\n                                type='radio'\n                                name={name}\n                                checked={format[2]}\n                                onChange={() => this.handleOnChange(thirdDisplay)}\n                            />\n                            {thirdMessage}\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            const inputs = [\n                <div key={key}>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'A'}\n                                type='radio'\n                                name={name}\n                                checked={format[0]}\n                                onChange={() => this.handleOnChange(firstDisplay)}\n                            />\n                            {firstMessage}\n                            {moreColon}\n                            {firstMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'B'}\n                                type='radio'\n                                name={name}\n                                checked={format[1]}\n                                onChange={() => this.handleOnChange(secondDisplay)}\n                            />\n                            {secondMessage}\n                            {moreColon}\n                            {secondMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    {thirdSection}\n                    <div>\n                        <br/>\n                        {messageDesc}\n                    </div>\n                </div>,\n            ];\n\n            return (\n                <div>\n                    <SettingItemMax\n                        title={messageTitle}\n                        inputs={inputs}\n                        submit={this.handleSubmit}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        let describe;\n        if (value === firstOption.value) {\n            describe = firstMessage;\n        } else if (value === secondOption.value) {\n            describe = secondMessage;\n        } else {\n            describe = thirdMessage;\n        }\n\n        return (\n            <div>\n                <SettingItemMin\n                    title={messageTitle}\n                    describe={describe}\n                    section={section}\n                    updateSection={this.updateSection}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n    }\n\n    render() {\n        const collapseSection = this.createSection({\n            section: 'collapse',\n            display: 'collapseDisplay',\n            value: this.state.collapseDisplay,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.collapseDisplay'),\n                message: 'Default appearance of image previews',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOn'),\n                    message: 'On',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOff'),\n                    message: 'Off',\n                },\n            },\n            description: {\n                id: t('user.settings.display.collapseDesc'),\n                message: 'Set whether previews of image links and image attachment thumbnails show as expanded or collapsed by default. This setting can also be controlled using the slash commands /expand and /collapse.',\n            },\n        });\n\n        let linkPreviewSection = null;\n\n        if (this.props.enableLinkPreviews) {\n            linkPreviewSection = this.createSection({\n                section: 'linkpreview',\n                display: 'linkPreviewDisplay',\n                value: this.state.linkPreviewDisplay,\n                defaultDisplay: 'true',\n                title: {\n                    id: t('user.settings.display.linkPreviewDisplay'),\n                    message: 'Website Link Previews',\n                },\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOn'),\n                        message: 'On',\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOff'),\n                        message: 'Off',\n                    },\n                },\n                description: {\n                    id: t('user.settings.display.linkPreviewDesc'),\n                    message: 'When available, the first web link in a message will show a preview of the website content below the message.',\n                },\n            });\n            this.prevSections.message_display = 'linkpreview';\n        } else {\n            this.prevSections.message_display = this.prevSections.linkpreview;\n        }\n\n        const clockSection = this.createSection({\n            section: 'clock',\n            display: 'militaryTime',\n            value: this.state.militaryTime,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.clockDisplay'),\n                message: 'Clock Display',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.normalClock'),\n                    message: '12-hour clock (example: 4:00 PM)',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.militaryClock'),\n                    message: '24-hour clock (example: 16:00)',\n                },\n            },\n            description: {\n                id: t('user.settings.display.preferTime'),\n                message: 'Select how you prefer time displayed.',\n            },\n        });\n\n        const teammateNameDisplaySection = this.createSection({\n            section: Preferences.NAME_NAME_FORMAT,\n            display: 'teammateNameDisplay',\n            value: this.state.teammateNameDisplay,\n            defaultDisplay: this.props.configTeammateNameDisplay,\n            title: {\n                id: t('user.settings.display.teammateNameDisplayTitle'),\n                message: 'Teammate Name Display',\n            },\n            firstOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayUsername'),\n                    message: 'Show username',\n                },\n            },\n            secondOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayNicknameFullname'),\n                    message: 'Show nickname if one exists, otherwise show first and last name',\n                },\n            },\n            thirdOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayFullname'),\n                    message: 'Show first and last name',\n                },\n            },\n            description: {\n                id: t('user.settings.display.teammateNameDisplayDescription'),\n                message: 'Set how to display other user\\'s names in posts and the Direct Messages list.',\n            },\n        });\n\n        let timezoneSelection;\n        if (this.props.enableTimezone && !this.props.shouldAutoUpdateTimezone) {\n            const userTimezone = this.props.userTimezone;\n            if (this.props.activeSection === 'timezone') {\n                timezoneSelection = (\n                    <div>\n                        <ManageTimezones\n                            user={this.props.user}\n                            timezones={this.props.timezones}\n                            useAutomaticTimezone={userTimezone.useAutomaticTimezone}\n                            automaticTimezone={userTimezone.automaticTimezone}\n                            manualTimezone={userTimezone.manualTimezone}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                timezoneSelection = (\n                    <div>\n                        <SettingItemMin\n                            title={\n                                <FormattedMessage\n                                    id='user.settings.display.timezone'\n                                    defaultMessage='Timezone'\n                                />\n                            }\n                            width='medium'\n                            describe={getTimezoneRegion(this.props.currentUserTimezone)}\n                            section={'timezone'}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            }\n        }\n\n        const messageDisplaySection = this.createSection({\n            section: Preferences.MESSAGE_DISPLAY,\n            display: 'messageDisplay',\n            value: this.state.messageDisplay,\n            defaultDisplay: Preferences.MESSAGE_DISPLAY_CLEAN,\n            title: {\n                id: t('user.settings.display.messageDisplayTitle'),\n                message: 'Message Display',\n            },\n            firstOption: {\n                value: Preferences.MESSAGE_DISPLAY_CLEAN,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayClean'),\n                    message: 'Standard',\n                    moreId: t('user.settings.display.messageDisplayCleanDes'),\n                    moreMessage: 'Easy to scan and read.',\n                },\n            },\n            secondOption: {\n                value: Preferences.MESSAGE_DISPLAY_COMPACT,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayCompact'),\n                    message: 'Compact',\n                    moreId: t('user.settings.display.messageDisplayCompactDes'),\n                    moreMessage: 'Fit as many messages on the screen as we can.',\n                },\n            },\n            description: {\n                id: t('user.settings.display.messageDisplayDescription'),\n                message: 'Select how messages in a channel should be displayed.',\n            },\n        });\n\n        const channelDisplayModeSection = this.createSection({\n            section: Preferences.CHANNEL_DISPLAY_MODE,\n            display: 'channelDisplayMode',\n            value: this.state.channelDisplayMode,\n            defaultDisplay: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n            title: {\n                id: t('user.settings.display.channelDisplayTitle'),\n                message: 'Channel Display',\n            },\n            firstOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n                radionButtonText: {\n                    id: t('user.settings.display.fullScreen'),\n                    message: 'Full width',\n                },\n            },\n            secondOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n                radionButtonText: {\n                    id: t('user.settings.display.fixedWidthCentered'),\n                    message: 'Fixed width, centered',\n                },\n            },\n            description: {\n                id: t('user.settings.display.channeldisplaymode'),\n                message: 'Select the width of the center channel.',\n            },\n        });\n\n        let languagesSection;\n        let userLocale = this.props.user.locale;\n        if (this.props.activeSection === 'languages') {\n            if (!I18n.isLanguageAvailable(userLocale)) {\n                userLocale = this.props.defaultClientLocale;\n            }\n            languagesSection = (\n                <div>\n                    <ManageLanguages\n                        user={this.props.user}\n                        locale={userLocale}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        } else {\n            let locale;\n            if (I18n.isLanguageAvailable(userLocale)) {\n                locale = I18n.getLanguageInfo(userLocale).name;\n            } else {\n                locale = I18n.getLanguageInfo(this.props.defaultClientLocale).name;\n            }\n\n            languagesSection = (\n                <div>\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.display.language'\n                                defaultMessage='Language'\n                            />\n                        }\n                        width='medium'\n                        describe={locale}\n                        section={'languages'}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        if (Object.keys(I18n.getLanguages()).length === 1) {\n            languagesSection = null;\n        }\n\n        let themeSection;\n        if (this.props.enableThemeSelection) {\n            themeSection = (\n                <div>\n                    <ThemeSetting\n                        selected={this.props.activeSection === 'theme'}\n                        updateSection={this.updateSection}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        allowCustomThemes={this.props.allowCustomThemes}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        return (\n            <div id='displaySettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='displaySettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {themeSection}\n                    {clockSection}\n                    {teammateNameDisplaySection}\n                    {timezoneSelection}\n                    {linkPreviewSection}\n                    {collapseSection}\n                    {messageDisplaySection}\n                    {channelDisplayModeSection}\n                    {languagesSection}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getSupportedTimezones} from 'mattermost-redux/actions/general';\nimport {autoUpdateTimezone} from 'mattermost-redux/actions/timezone';\nimport {getConfig, getSupportedTimezones as getTimezones} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {getUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\n\nimport {Preferences} from 'utils/constants.jsx';\n\nimport UserSettingsDisplay from './user_settings_display.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const timezones = getTimezones(state);\n    const currentUserId = getCurrentUserId(state);\n    const userTimezone = getUserTimezone(state, currentUserId);\n    const automaticTimezoneNotSet = userTimezone && userTimezone.useAutomaticTimezone && !userTimezone.automaticTimezone;\n    const shouldAutoUpdateTimezone = !userTimezone || automaticTimezoneNotSet;\n\n    const allowCustomThemes = config.AllowCustomThemes === 'true';\n    const enableLinkPreviews = config.EnableLinkPreviews === 'true';\n    const defaultClientLocale = config.DefaultClientLocale;\n    const enableThemeSelection = config.EnableThemeSelection === 'true';\n    const enableTimezone = config.ExperimentalTimezone === 'true';\n    const configTeammateNameDisplay = config.TeammateNameDisplay;\n\n    return {\n        allowCustomThemes,\n        configTeammateNameDisplay,\n        enableLinkPreviews,\n        defaultClientLocale,\n        enableThemeSelection,\n        enableTimezone,\n        timezones,\n        userTimezone,\n        shouldAutoUpdateTimezone,\n        currentUserTimezone: getUserCurrentTimezone(userTimezone),\n        militaryTime: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, Preferences.USE_MILITARY_TIME_DEFAULT),\n        teammateNameDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.NAME_NAME_FORMAT, configTeammateNameDisplay),\n        channelDisplayMode: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT),\n        messageDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT),\n        collapseDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, Preferences.COLLAPSE_DISPLAY_DEFAULT),\n        linkPreviewDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, Preferences.LINK_PREVIEW_DISPLAY_DEFAULT),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSupportedTimezones,\n            autoUpdateTimezone,\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsDisplay);\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, injectIntl, intlShape} from 'react-intl';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {AcceptedProfileImageTypes, Constants} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SettingPicture from 'components/setting_picture.jsx';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\nimport {AnnouncementBarMessages, AnnouncementBarTypes} from 'utils/constants';\n\nconst holders = defineMessages({\n    usernameReserved: {\n        id: t('user.settings.general.usernameReserved'),\n        defaultMessage: 'This username is reserved, please choose a new one.',\n    },\n    usernameRestrictions: {\n        id: t('user.settings.general.usernameRestrictions'),\n        defaultMessage: \"Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols '.', '-', and '_'.\",\n    },\n    validEmail: {\n        id: t('user.settings.general.validEmail'),\n        defaultMessage: 'Please enter a valid email address.',\n    },\n    emailMatch: {\n        id: t('user.settings.general.emailMatch'),\n        defaultMessage: 'The new emails you entered do not match.',\n    },\n    incorrectPassword: {\n        id: t('user.settings.general.incorrectPassword'),\n        defaultMessage: 'Your password is incorrect.',\n    },\n    emptyPassword: {\n        id: t('user.settings.general.emptyPassword'),\n        defaultMessage: 'Please enter your current password.',\n    },\n    validImage: {\n        id: t('user.settings.general.validImage'),\n        defaultMessage: 'Only BMP, JPG or PNG images may be used for profile pictures',\n    },\n    imageTooLarge: {\n        id: t('user.settings.general.imageTooLarge'),\n        defaultMessage: 'Unable to upload profile image. File is too large.',\n    },\n    uploadImage: {\n        id: t('user.settings.general.uploadImage'),\n        defaultMessage: \"Click 'Edit' to upload an image.\",\n    },\n    uploadImageMobile: {\n        id: t('user.settings.general.mobile.uploadImage'),\n        defaultMessage: 'Click to upload an image',\n    },\n    fullName: {\n        id: t('user.settings.general.fullName'),\n        defaultMessage: 'Full Name',\n    },\n    nickname: {\n        id: t('user.settings.general.nickname'),\n        defaultMessage: 'Nickname',\n    },\n    username: {\n        id: t('user.settings.general.username'),\n        defaultMessage: 'Username',\n    },\n    profilePicture: {\n        id: t('user.settings.general.profilePicture'),\n        defaultMessage: 'Profile Picture',\n    },\n    close: {\n        id: t('user.settings.general.close'),\n        defaultMessage: 'Close',\n    },\n    position: {\n        id: t('user.settings.general.position'),\n        defaultMessage: 'Position',\n    },\n});\n\nclass UserSettingsGeneralTab extends React.Component {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        user: PropTypes.object.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        updateTab: PropTypes.func.isRequired,\n        activeSection: PropTypes.string.isRequired,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            logError: PropTypes.func.isRequired,\n            clearErrors: PropTypes.func.isRequired,\n            getMe: PropTypes.func.isRequired,\n            updateMe: PropTypes.func.isRequired,\n            sendVerificationEmail: PropTypes.func.isRequired,\n            setDefaultProfileImage: PropTypes.func.isRequired,\n            uploadProfileImage: PropTypes.func.isRequired,\n        }).isRequired,\n        requireEmailVerification: PropTypes.bool,\n        maxFileSize: PropTypes.number,\n        ldapFirstNameAttributeSet: PropTypes.bool,\n        ldapLastNameAttributeSet: PropTypes.bool,\n        samlFirstNameAttributeSet: PropTypes.bool,\n        samlLastNameAttributeSet: PropTypes.bool,\n        ldapNicknameAttributeSet: PropTypes.bool,\n        samlNicknameAttributeSet: PropTypes.bool,\n        ldapPositionAttributeSet: PropTypes.bool,\n        samlPositionAttributeSet: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n        this.submitActive = false;\n\n        this.state = this.setupInitialState(props);\n    }\n\n    handleEmailResend = (email) => {\n        this.setState({resendStatus: 'sending', showSpinner: true});\n        this.props.actions.sendVerificationEmail(email).then(({data, error: err}) => {\n            if (data) {\n                this.setState({resendStatus: 'success'});\n            } else if (err) {\n                this.setState({resendStatus: 'failure'});\n            }\n        });\n    }\n\n    createEmailResendLink = (email) => {\n        return (\n            <span className='resend-verification-wrapper'>\n                <LoadingWrapper\n                    loading={this.state.showSpinner}\n                    text={Utils.localizeMessage('user.settings.general.sending', 'Sending')}\n                >\n                    <a\n                        onClick={() => {\n                            this.handleEmailResend(email);\n                            setTimeout(() => {\n                                this.setState({\n                                    showSpinner: false,\n                                });\n                            }, 500);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.sendAgain'\n                            defaultMessage='Send again'\n                        />\n                    </a>\n                </LoadingWrapper>\n            </span>\n        );\n    }\n\n    submitUsername = () => {\n        const user = Object.assign({}, this.props.user);\n        const username = this.state.username.trim().toLowerCase();\n\n        const {formatMessage} = this.props.intl;\n        const usernameError = Utils.isValidUsername(username);\n        if (usernameError === 'Cannot use a reserved word as a username.') {\n            this.setState({clientError: formatMessage(holders.usernameReserved), serverError: ''});\n            return;\n        } else if (usernameError) {\n            this.setState({clientError: formatMessage(holders.usernameRestrictions, {min: Constants.MIN_USERNAME_LENGTH, max: Constants.MAX_USERNAME_LENGTH}), serverError: ''});\n            return;\n        }\n\n        if (user.username === username) {\n            this.updateSection('');\n            return;\n        }\n\n        user.username = username;\n\n        trackEvent('settings', 'user_settings_update', {field: 'username'});\n\n        this.submitUser(user, false);\n    }\n\n    submitNickname = () => {\n        const user = Object.assign({}, this.props.user);\n        const nickname = this.state.nickname.trim();\n\n        if (user.nickname === nickname) {\n            this.updateSection('');\n            return;\n        }\n\n        user.nickname = nickname;\n\n        trackEvent('settings', 'user_settings_update', {field: 'nickname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitName = () => {\n        const user = Object.assign({}, this.props.user);\n        const firstName = this.state.firstName.trim();\n        const lastName = this.state.lastName.trim();\n\n        if (user.first_name === firstName && user.last_name === lastName) {\n            this.updateSection('');\n            return;\n        }\n\n        user.first_name = firstName;\n        user.last_name = lastName;\n\n        trackEvent('settings', 'user_settings_update', {field: 'fullname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitEmail = () => {\n        const user = Object.assign({}, this.props.user);\n        const email = this.state.email.trim().toLowerCase();\n        const confirmEmail = this.state.confirmEmail.trim().toLowerCase();\n        const currentPassword = this.state.currentPassword;\n\n        const {formatMessage} = this.props.intl;\n\n        if (email === user.email && (confirmEmail === '' || confirmEmail === user.email)) {\n            this.updateSection('');\n            return;\n        }\n\n        if (email === '' || !isEmail(email)) {\n            this.setState({emailError: formatMessage(holders.validEmail), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (email !== confirmEmail) {\n            this.setState({emailError: formatMessage(holders.emailMatch), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (currentPassword === '') {\n            this.setState({emailError: formatMessage(holders.emptyPassword), clientError: '', serverError: ''});\n            return;\n        }\n\n        user.email = email;\n        user.password = currentPassword;\n        trackEvent('settings', 'user_settings_update', {field: 'email'});\n        this.submitUser(user, true);\n    }\n\n    submitUser = (user, emailUpdated) => {\n        const {formatMessage} = this.props.intl;\n        this.setState({sectionIsSaving: true});\n\n        this.props.actions.updateMe(user).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.props.actions.getMe();\n                    const verificationEnabled = this.props.requireEmailVerification && emailUpdated;\n                    if (verificationEnabled) {\n                        this.props.actions.clearErrors();\n                        this.props.actions.logError({\n                            message: AnnouncementBarMessages.EMAIL_VERIFICATION_REQUIRED,\n                            type: AnnouncementBarTypes.SUCCESS,\n                        }, true);\n                    }\n                } else if (err) {\n                    let serverError;\n                    if (err.server_error_id &&\n                        err.server_error_id === 'api.user.check_user_password.invalid.app_error') {\n                        serverError = formatMessage(holders.incorrectPassword);\n                    } else if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n                }\n            });\n    }\n\n    setDefaultProfilePicture = async () => {\n        try {\n            await this.props.actions.setDefaultProfileImage(this.props.user.id);\n            this.updateSection('');\n            this.submitActive = false;\n        } catch (err) {\n            let serverError;\n            if (err.message) {\n                serverError = err.message;\n            } else {\n                serverError = err;\n            }\n            this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n        }\n    }\n\n    submitPicture = () => {\n        if (!this.state.pictureFile) {\n            return;\n        }\n\n        if (!this.submitActive) {\n            return;\n        }\n\n        trackEvent('settings', 'user_settings_update', {field: 'picture'});\n\n        const {formatMessage} = this.props.intl;\n        const file = this.state.pictureFile;\n\n        if (!AcceptedProfileImageTypes.includes(file.type)) {\n            this.setState({clientError: formatMessage(holders.validImage), serverError: ''});\n            return;\n        } else if (file.size > this.props.maxFileSize) {\n            this.setState({clientError: formatMessage(holders.imageTooLarge), serverError: ''});\n            return;\n        }\n\n        this.setState({loadingPicture: true});\n\n        this.props.actions.uploadProfileImage(this.props.user.id, file).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.submitActive = false;\n                } else if (err) {\n                    var state = this.setupInitialState(this.props);\n                    state.serverError = err.message;\n                    this.setState(state);\n                }\n            });\n    }\n\n    submitPosition = () => {\n        const user = Object.assign({}, this.props.user);\n        const position = this.state.position.trim();\n\n        if (user.position === position) {\n            this.updateSection('');\n            return;\n        }\n\n        user.position = position;\n\n        trackEvent('settings', 'user_settings_update', {field: 'position'});\n\n        this.submitUser(user, false);\n    }\n\n    updateUsername = (e) => {\n        this.setState({username: e.target.value});\n    }\n\n    updateFirstName = (e) => {\n        this.setState({firstName: e.target.value});\n    }\n\n    updateLastName = (e) => {\n        this.setState({lastName: e.target.value});\n    }\n\n    updateNickname = (e) => {\n        this.setState({nickname: e.target.value});\n    }\n\n    updatePosition = (e) => {\n        this.setState({position: e.target.value});\n    }\n\n    updateEmail = (e) => {\n        this.setState({email: e.target.value});\n    }\n\n    updateConfirmEmail = (e) => {\n        this.setState({confirmEmail: e.target.value});\n    }\n\n    updateCurrentPassword = (e) => {\n        this.setState({currentPassword: e.target.value});\n    }\n\n    updatePicture = (e) => {\n        if (e.target.files && e.target.files[0]) {\n            this.setState({pictureFile: e.target.files[0]});\n\n            this.submitActive = true;\n            this.setState({clientError: null});\n        } else {\n            this.setState({pictureFile: null});\n        }\n    }\n\n    updateSection = (section) => {\n        this.setState(Object.assign({}, this.setupInitialState(this.props), {clientError: '', serverError: '', emailError: '', sectionIsSaving: false}));\n        this.submitActive = false;\n        this.props.updateSection(section);\n    }\n\n    setupInitialState(props) {\n        const user = props.user;\n\n        return {\n            username: user.username,\n            firstName: user.first_name,\n            lastName: user.last_name,\n            nickname: user.nickname,\n            position: user.position,\n            originalEmail: user.email,\n            email: '',\n            confirmEmail: '',\n            currentPassword: '',\n            pictureFile: null,\n            loadingPicture: false,\n            sectionIsSaving: false,\n            showSpinner: false,\n        };\n    }\n\n    createEmailSection() {\n        const {formatMessage} = this.props.intl;\n\n        let emailSection;\n        if (this.props.activeSection === 'email') {\n            const emailVerificationEnabled = this.props.requireEmailVerification;\n            const inputs = [];\n\n            let helpText = (\n                <FormattedMessage\n                    id='user.settings.general.emailHelp1'\n                    defaultMessage='Email is used for sign-in, notifications, and password reset. Email requires verification if changed.'\n                />\n            );\n\n            if (!emailVerificationEnabled) {\n                helpText = (\n                    <FormattedMessage\n                        id='user.settings.general.emailHelp3'\n                        defaultMessage='Email is used for sign-in, notifications, and password reset.'\n                    />\n                );\n            }\n\n            let submit = null;\n\n            if (this.props.user.auth_service === '') {\n                inputs.push(\n                    <div key='currentEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentEmail'\n                                    defaultMessage='Current Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <label className='control-label word-break--all text-left'>{this.state.originalEmail}</label>\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='emailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.newEmail'\n                                    defaultMessage='New Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    autoFocus={true}\n                                    id='primaryEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateEmail}\n                                    value={this.state.email}\n                                    aria-label={formatMessage({id: 'user.settings.general.newEmail', defaultMessage: 'New Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='confirmEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.confirmEmail'\n                                    defaultMessage='Confirm Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='confirmEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateConfirmEmail}\n                                    value={this.state.confirmEmail}\n                                    aria-label={formatMessage({id: 'user.settings.general.confirmEmail', defaultMessage: 'Confirm Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='currentPassword'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentPassword'\n                                    defaultMessage='Current Password'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='currentPassword'\n                                    className='form-control'\n                                    type='password'\n                                    onChange={this.updateCurrentPassword}\n                                    value={this.state.currentPassword}\n                                    aria-label={formatMessage({id: 'user.settings.general.currentPassword', defaultMessage: 'Current Password'})}\n                                />\n                            </div>\n                        </div>\n                        {helpText}\n                    </div>\n                );\n\n                submit = this.submitEmail;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='padding-bottom'\n                    >\n                        <div className='setting-list__hint padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.general.emailLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='padding-bottom'\n                    >\n                        <div className='setting-list__hint padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.general.emailSamlCantUpdate'\n                                defaultMessage='Login occurs through SAML. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            }\n\n            emailSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.emailError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.props.user.auth_service === '') {\n                describe = this.props.user.email;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGitlab'\n                        defaultMessage='Login done through GitLab ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGoogle'\n                        defaultMessage='Login done through Google Apps ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginOffice365'\n                        defaultMessage='Login done through Office 365 ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginLdap'\n                        defaultMessage='Login done through AD/LDAP ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginSaml'\n                        defaultMessage='Login done through SAML ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            }\n\n            emailSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    describe={describe}\n                    section={'email'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return emailSection;\n    }\n\n    render() {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        let clientError = null;\n        if (this.state.clientError) {\n            clientError = this.state.clientError;\n        }\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        let nameSection;\n        const inputs = [];\n\n        if (this.props.activeSection === 'name') {\n            let extraInfo;\n            let submit = null;\n            if (\n                (this.props.user.auth_service === 'ldap' &&\n                    (this.props.ldapFirstNameAttributeSet || this.props.ldapLastNameAttributeSet)) ||\n                (this.props.user.auth_service === Constants.SAML_SERVICE &&\n                    (this.props.samlFirstNameAttributeSet || this.props.samlLastNameAttributeSet))\n            ) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                inputs.push(\n                    <div\n                        key='firstNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.firstName'\n                                defaultMessage='First Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='firstName'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateFirstName}\n                                value={this.state.firstName}\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.firstName', defaultMessage: 'First Name'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div\n                        key='lastNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.lastName'\n                                defaultMessage='Last Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='lastName'\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateLastName}\n                                value={this.state.lastName}\n                                aria-label={formatMessage({id: 'user.settings.general.lastName', defaultMessage: 'Last Name'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                function notifClick(e) {\n                    e.preventDefault();\n                    this.updateSection('');\n                    this.props.updateTab('notifications');\n                }\n\n                const notifLink = (\n                    <a\n                        href='#'\n                        onClick={notifClick.bind(this)}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.notificationsLink'\n                            defaultMessage='Notifications'\n                        />\n                    </a>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.notificationsExtra'\n                            defaultMessage='By default, you will receive mention notifications when someone types your first name. Go to {notify} settings to change this default.'\n                            values={{\n                                notify: (notifLink),\n                            }}\n                        />\n                    </span>\n                );\n\n                submit = this.submitName;\n            }\n\n            nameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.fullName)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n\n            if (user.first_name && user.last_name) {\n                describe = user.first_name + ' ' + user.last_name;\n            } else if (user.first_name) {\n                describe = user.first_name;\n            } else if (user.last_name) {\n                describe = user.last_name;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyName'\n                        defaultMessage=\"Click 'Edit' to add your full name\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyName'\n                            defaultMessage='Click to add your full name'\n                        />\n                    );\n                }\n            }\n\n            nameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.fullName)}\n                    describe={describe}\n                    section={'name'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let nicknameSection;\n        if (this.props.activeSection === 'nickname') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === 'ldap' && this.props.ldapNicknameAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlNicknameAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let nicknameLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.nickname'\n                        defaultMessage='Nickname'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    nicknameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='nicknameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{nicknameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='nickname'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateNickname}\n                                value={this.state.nickname}\n                                maxLength={Constants.MAX_NICKNAME_LENGTH}\n                                autoCapitalize='off'\n                                aria-label={formatMessage({id: 'user.settings.general.nickname', defaultMessage: 'Nickname'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.nicknameExtra'\n                            defaultMessage='Use Nickname for a name you might be called that is different from your first name and username. This is most often used when two or more people have similar sounding names and usernames.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitNickname;\n            }\n\n            nicknameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.nickname)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n            if (user.nickname) {\n                describe = user.nickname;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyNickname'\n                        defaultMessage=\"Click 'Edit' to add a nickname\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyNickname'\n                            defaultMessage='Click to add a nickname'\n                        />\n                    );\n                }\n            }\n\n            nicknameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.nickname)}\n                    describe={describe}\n                    section={'nickname'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let usernameSection;\n        if (this.props.activeSection === 'username') {\n            let extraInfo;\n            let submit = null;\n            if (this.props.user.auth_service === '') {\n                let usernameLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.username'\n                        defaultMessage='Username'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    usernameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='usernameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{usernameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='username'\n                                autoFocus={true}\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateUsername}\n                                value={this.state.username}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.username', defaultMessage: 'Username'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.usernameInfo'\n                            defaultMessage='Pick something easy for teammates to recognize and recall.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitUsername;\n            } else {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            }\n\n            usernameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.username)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            usernameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.username)}\n                    describe={this.props.user.username}\n                    section={'username'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let positionSection;\n        if (this.props.activeSection === 'position') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE && this.props.ldapPositionAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlPositionAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let positionLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.position'\n                        defaultMessage='Position'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    positionLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='positionSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{positionLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='position'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updatePosition}\n                                value={this.state.position}\n                                maxLength={Constants.MAX_POSITION_LENGTH}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.position', defaultMessage: 'Position'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.positionExtra'\n                            defaultMessage='Use Position for your role or job title. This will be shown in your profile popover.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitPosition;\n            }\n\n            positionSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.position)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n            if (user.position) {\n                describe = user.position;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyPosition'\n                        defaultMessage=\"Click 'Edit' to add your job title / position\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyPosition'\n                            defaultMessage='Click to add your job title / position'\n                        />\n                    );\n                }\n            }\n\n            positionSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.position)}\n                    describe={describe}\n                    section={'position'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        const emailSection = this.createEmailSection();\n\n        let pictureSection;\n        if (this.props.activeSection === 'picture') {\n            pictureSection = (\n                <SettingPicture\n                    title={formatMessage(holders.profilePicture)}\n                    onSubmit={this.submitPicture}\n                    onSetDefault={user.last_picture_update > 0 ? this.setDefaultProfilePicture : null}\n                    src={Utils.imageURLForUser(user)}\n                    defaultImageSrc={Utils.defaultImageURLForUser(user.id)}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={(e) => {\n                        this.updateSection('');\n                        e.preventDefault();\n                    }}\n                    file={this.state.pictureFile}\n                    onFileChange={this.updatePicture}\n                    submitActive={this.submitActive}\n                    loadingPicture={this.state.loadingPicture}\n                    maxFileSize={this.props.maxFileSize}\n                />\n            );\n        } else {\n            let minMessage = formatMessage(holders.uploadImage);\n            if (Utils.isMobile()) {\n                minMessage = formatMessage(holders.uploadImageMobile);\n            }\n            if (user.last_picture_update) {\n                minMessage = (\n                    <FormattedMessage\n                        id='user.settings.general.imageUpdated'\n                        defaultMessage='Image last updated {date}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={new Date(user.last_picture_update)}\n                                    day='2-digit'\n                                    month='short'\n                                    year='numeric'\n                                />\n                            ),\n                        }}\n                    />\n                );\n            }\n            pictureSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.profilePicture)}\n                    describe={minMessage}\n                    section={'picture'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <div id='generalSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeUserSettings'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label={formatMessage(holders.close)}\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='generalSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {nameSection}\n                    <div className='divider-light'/>\n                    {usernameSection}\n                    <div className='divider-light'/>\n                    {nicknameSection}\n                    <div className='divider-light'/>\n                    {positionSection}\n                    <div className='divider-light'/>\n                    {emailSection}\n                    <div className='divider-light'/>\n                    {pictureSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(UserSettingsGeneralTab);\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {\n    getMe,\n    updateMe,\n    sendVerificationEmail,\n    setDefaultProfileImage,\n    uploadProfileImage,\n} from 'mattermost-redux/actions/users';\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport UserSettingsGeneralTab from './user_settings_general.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const requireEmailVerification = config.RequireEmailVerification === 'true';\n    const maxFileSize = parseInt(config.MaxFileSize, 10);\n    const ldapFirstNameAttributeSet = config.LdapFirstNameAttributeSet === 'true';\n    const ldapLastNameAttributeSet = config.LdapLastNameAttributeSet === 'true';\n    const samlFirstNameAttributeSet = config.SamlFirstNameAttributeSet === 'true';\n    const samlLastNameAttributeSet = config.SamlLastNameAttributeSet === 'true';\n    const ldapNicknameAttributeSet = config.LdapNicknameAttributeSet === 'true';\n    const samlNicknameAttributeSet = config.SamlNicknameAttributeSet === 'true';\n    const samlPositionAttributeSet = config.SamlPositionAttributeSet === 'true';\n    const ldapPositionAttributeSet = config.LdapPositionAttributeSet === 'true';\n\n    return {\n        requireEmailVerification,\n        maxFileSize,\n        ldapFirstNameAttributeSet,\n        ldapLastNameAttributeSet,\n        samlFirstNameAttributeSet,\n        samlLastNameAttributeSet,\n        ldapNicknameAttributeSet,\n        samlNicknameAttributeSet,\n        samlPositionAttributeSet,\n        ldapPositionAttributeSet,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            logError,\n            clearErrors,\n            getMe,\n            updateMe,\n            sendVerificationEmail,\n            setDefaultProfileImage,\n            uploadProfileImage,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsGeneralTab);\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {NotificationLevels} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nexport default class DesktopNotificationSettings extends React.Component {\n    handleMinUpdateSection = (section) => {\n        this.props.updateSection(section);\n\n        this.props.cancel();\n    }\n\n    handleMaxUpdateSection = (section) => {\n        this.props.updateSection(section);\n    }\n\n    handleOnChange = (e) => {\n        const key = e.currentTarget.getAttribute('data-key');\n        const value = e.currentTarget.getAttribute('data-value');\n        this.props.setParentState(key, value);\n    }\n\n    buildMaximizedSetting = () => {\n        const inputs = [];\n\n        const activityRadio = [false, false, false];\n        if (this.props.activity === NotificationLevels.MENTION) {\n            activityRadio[1] = true;\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            activityRadio[2] = true;\n        } else {\n            activityRadio[0] = true;\n        }\n\n        let soundSection;\n        if (this.props.activity !== NotificationLevels.NONE) {\n            const soundRadio = [false, false];\n            if (this.props.sound === 'false') {\n                soundRadio[1] = true;\n            } else {\n                soundRadio[0] = true;\n            }\n\n            if (Utils.hasSoundOptions()) {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOn'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[0]}\n                                    data-key={'desktopSound'}\n                                    data-value={'true'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.on'\n                                    defaultMessage='On'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOff'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[1]}\n                                    data-key={'desktopSound'}\n                                    data-value={'false'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.off'\n                                    defaultMessage='Off'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='margin-top x3'>\n                            <FormattedMessage\n                                id='user.settings.notifications.sounds_info'\n                                defaultMessage='Notification sounds are available on IE11, Safari, Chrome and Vue Desktop Apps.'\n                            />\n                        </div>\n                    </fieldset>\n                );\n            } else {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.notifications.soundConfig'\n                            defaultMessage='Please configure notification sounds in your browser settings'\n                        />\n                    </fieldset>\n                );\n            }\n        }\n\n        inputs.push(\n            <div key='userNotificationLevelOption'>\n                <fieldset>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.notifications.desktop'\n                            defaultMessage='Send desktop notifications'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationAllActivity'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[0]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.ALL}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.allActivity'\n                                defaultMessage='For all activity'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationMentions'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[1]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.MENTION}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.onlyMentions'\n                                defaultMessage='Only for mentions and direct messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationNever'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[2]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.NONE}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.never'\n                                defaultMessage='Never'\n                            />\n                        </label>\n                    </div>\n                    <div className='margin-top x3'>\n                        <FormattedMessage\n                            id='user.settings.notifications.info'\n                            defaultMessage='Desktop notifications are available on Edge, Firefox, Safari, Chrome and Vue Desktop Apps.'\n                        />\n                    </div>\n                </fieldset>\n                <hr/>\n                {soundSection}\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop notifications')}\n                inputs={inputs}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                server_error={this.props.error}\n                updateSection={this.handleMaxUpdateSection}\n            />\n        );\n    }\n\n    buildMinimizedSetting = () => {\n        let formattedMessageProps;\n        const hasSoundOption = Utils.hasSoundOptions();\n        if (this.props.activity === NotificationLevels.MENTION) {\n            if (hasSoundOption && this.props.sound !== 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSound'),\n                    defaultMessage: 'For mentions and direct messages, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsNoSound'),\n                    defaultMessage: 'For mentions and direct messages, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSoundHidden'),\n                    defaultMessage: 'For mentions and direct messages',\n                };\n            }\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            formattedMessageProps = {\n                id: t('user.settings.notifications.off'),\n                defaultMessage: 'Off',\n            };\n        } else {\n            if (hasSoundOption && this.props.sound !== 'false') { //eslint-disable-line no-lonely-if\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSound'),\n                    defaultMessage: 'For all activity, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allNoSound'),\n                    defaultMessage: 'For all activity, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSoundHidden'),\n                    defaultMessage: 'For all activity',\n                };\n            }\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop notifications')}\n                describe={<FormattedMessage {...formattedMessageProps}/>}\n                focused={this.props.focused}\n                section={'desktop'}\n                updateSection={this.handleMinUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        if (this.props.active) {\n            return this.buildMaximizedSetting();\n        }\n\n        return this.buildMinimizedSetting();\n    }\n}\n\nDesktopNotificationSettings.propTypes = {\n    activity: PropTypes.string.isRequired,\n    sound: PropTypes.string.isRequired,\n    updateSection: PropTypes.func,\n    setParentState: PropTypes.func,\n    submit: PropTypes.func,\n    cancel: PropTypes.func,\n    error: PropTypes.string,\n    active: PropTypes.bool,\n    saving: PropTypes.bool,\n    focused: PropTypes.bool,\n};\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {getEmailInterval} from 'mattermost-redux/utils/notify_props';\n\nimport {Preferences} from 'utils/constants.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nconst SECONDS_PER_MINUTE = 60;\n\nexport default class EmailNotificationSetting extends React.Component {\n    static propTypes = {\n        currentUserId: PropTypes.string.isRequired,\n        activeSection: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        enableEmail: PropTypes.bool.isRequired,\n        emailInterval: PropTypes.number.isRequired,\n        onSubmit: PropTypes.func.isRequired,\n        onCancel: PropTypes.func.isRequired,\n        onChange: PropTypes.func.isRequired,\n        serverError: PropTypes.string,\n        saving: PropTypes.bool,\n        focused: PropTypes.bool,\n        sendEmailNotifications: PropTypes.bool,\n        enableEmailBatching: PropTypes.bool,\n        siteName: PropTypes.string,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            activeSection,\n        } = props;\n\n        this.state = {\n            activeSection,\n            emailInterval,\n            enableEmailBatching,\n            sendEmailNotifications,\n            newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            activeSection,\n        } = nextProps;\n\n        // If we're re-opening this section, reset to defaults from props\n        if (activeSection === 'email' && prevState.activeSection !== 'email') {\n            return {\n                activeSection,\n                emailInterval,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        if (sendEmailNotifications !== prevState.sendEmailNotifications ||\n            enableEmailBatching !== prevState.enableEmailBatching ||\n            emailInterval !== prevState.emailInterval ||\n            activeSection !== prevState.activeSection\n        ) {\n            return {\n                activeSection,\n                emailInterval,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        return null;\n    }\n\n    handleChange = (e) => {\n        const enableEmail = e.currentTarget.getAttribute('data-enable-email');\n\n        this.setState({\n            enableEmail,\n            newInterval: parseInt(e.currentTarget.getAttribute('data-email-interval'), 10),\n        });\n\n        this.props.onChange(enableEmail);\n    }\n\n    handleSubmit = async () => {\n        const {newInterval} = this.state;\n        if (this.props.emailInterval === newInterval) {\n            this.props.updateSection('');\n        } else {\n            // until the rest of the notification settings are moved to preferences, we have to do this separately\n            const {currentUserId, actions} = this.props;\n            const emailIntervalPreference = {\n                user_id: currentUserId,\n                category: Preferences.CATEGORY_NOTIFICATIONS,\n                name: Preferences.EMAIL_INTERVAL,\n                value: newInterval.toString(),\n            };\n\n            await actions.savePreferences(currentUserId, [emailIntervalPreference]);\n\n            this.props.onSubmit();\n        }\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n\n            this.setState({\n                enableEmail: this.props.enableEmail,\n                newInterval: this.props.emailInterval,\n            });\n            this.props.onCancel();\n        }\n    }\n\n    renderMinSettingView = () => {\n        const {\n            enableEmail,\n            focused,\n            sendEmailNotifications,\n        } = this.props;\n\n        const {newInterval} = this.state;\n\n        let description;\n        if (!sendEmailNotifications) {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.disabled'\n                    defaultMessage='Email notifications are not enabled'\n                />\n            );\n        } else if (enableEmail) {\n            switch (newInterval) {\n            case Preferences.INTERVAL_IMMEDIATE:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.immediately'\n                        defaultMessage='Immediately'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_HOUR:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyHour'\n                        defaultMessage='Every hour'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_FIFTEEN_MINUTES:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyXMinutes'\n                        defaultMessage='Every {count, plural, one {minute} other {{count, number} minutes}}'\n                        values={{count: newInterval / SECONDS_PER_MINUTE}}\n                    />\n                );\n                break;\n            default:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.never'\n                        defaultMessage='Never'\n                    />\n                );\n            }\n        } else {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.never'\n                    defaultMessage='Never'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\n                describe={description}\n                focused={focused}\n                section={'email'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderMaxSettingView = () => {\n        if (!this.props.sendEmailNotifications) {\n            return (\n                <SettingItemMax\n                    title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\n                    inputs={[\n                        <div\n                            key='oauthEmailInfo'\n                            className='padding-top'\n                        >\n                            <FormattedMessage\n                                id='user.settings.notifications.email.disabled_long'\n                                defaultMessage='Email notifications have not been enabled by your System Administrator.'\n                            />\n                        </div>,\n                    ]}\n                    server_error={this.props.serverError}\n                    section={'email'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const {newInterval} = this.state;\n        let batchingOptions = null;\n        let batchingInfo = null;\n        if (this.props.enableEmailBatching) {\n            batchingOptions = (\n                <fieldset>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationMinutes'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyXMinutes'\n                                defaultMessage='Every {count} minutes'\n                                values={{count: Preferences.INTERVAL_FIFTEEN_MINUTES / SECONDS_PER_MINUTE}}\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationHour'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_HOUR}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_HOUR}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyHour'\n                                defaultMessage='Every hour'\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            batchingInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.emailBatchingInfo'\n                    defaultMessage='Notifications received over the time period selected are combined and sent in a single email.'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\n                inputs={[\n                    <fieldset key='userNotificationEmailOptions'>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.email.send'\n                                defaultMessage='Send email notifications'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationImmediately'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_IMMEDIATE}\n                                    data-enable-email={'true'}\n                                    data-email-interval={Preferences.INTERVAL_IMMEDIATE}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.immediately'\n                                    defaultMessage='Immediately'\n                                />\n                            </label>\n                        </div>\n                        {batchingOptions}\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationNever'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_NEVER}\n                                    data-enable-email={'false'}\n                                    data-email-interval={Preferences.INTERVAL_NEVER}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.never'\n                                    defaultMessage='Never'\n                                />\n                            </label>\n                        </div>\n                        <div className='margin-top x2'>\n                            <FormattedMessage\n                                id='user.settings.notifications.emailInfo'\n                                defaultMessage='Email notifications are sent for mentions and direct messages when you are offline or away from {siteName} for more than 5 minutes.'\n                                values={{\n                                    siteName: this.props.siteName,\n                                }}\n                            />\n                            {' '}\n                            {batchingInfo}\n                        </div>\n                    </fieldset>,\n                ]}\n                submit={this.handleSubmit}\n                saving={this.props.saving}\n                server_error={this.props.serverError}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        if (this.props.activeSection !== 'email') {\n            return this.renderMinSettingView();\n        }\n\n        return this.renderMaxSettingView();\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\n\nimport EmailNotificationSetting from './email_notification_setting';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const emailInterval = parseInt(getPreference(\n        state,\n        Preferences.CATEGORY_NOTIFICATIONS,\n        Preferences.EMAIL_INTERVAL,\n        Preferences.INTERVAL_NOT_SET.toString(),\n    ), 10);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        emailInterval,\n        enableEmailBatching: config.EnableEmailBatching === 'true',\n        sendEmailNotifications: config.SendEmailNotifications === 'true',\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmailNotificationSetting);\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport AutosizeTextarea from 'components/autosize_textarea.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nconst MESSAGE_MAX_LENGTH = 200;\n\nexport default class ManageAutoResponder extends React.PureComponent {\n    static propTypes = {\n        autoResponderActive: PropTypes.bool.isRequired,\n        autoResponderMessage: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setParentState: PropTypes.func.isRequired,\n        submit: PropTypes.func.isRequired,\n        saving: PropTypes.bool.isRequired,\n        error: PropTypes.string,\n    };\n\n    handleAutoResponderChecked = (e) => {\n        this.props.setParentState('autoResponderActive', e.target.checked);\n    };\n\n    onMessageChanged = (e) => {\n        this.props.setParentState('autoResponderMessage', e.target.value);\n    };\n\n    render() {\n        const {\n            autoResponderActive,\n            autoResponderMessage,\n        } = this.props;\n\n        let serverError;\n        if (this.props.error) {\n            serverError = <label className='has-error'>{this.props.error}</label>;\n        }\n\n        const inputs = [];\n\n        const activeToggle = (\n            <div\n                id='autoResponderCheckbox'\n                key='autoResponderCheckbox'\n                className='checkbox'\n            >\n                <label>\n                    <input\n                        id='autoResponderActive'\n                        type='checkbox'\n                        checked={autoResponderActive}\n                        onChange={this.handleAutoResponderChecked}\n                    />\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                </label>\n            </div>\n        );\n\n        const message = (\n            <div\n                id='autoResponderMessage'\n                key='autoResponderMessage'\n            >\n                <div className='padding-top'>\n                    <AutosizeTextarea\n                        style={{resize: 'none'}}\n                        id='autoResponderMessageInput'\n                        className='form-control'\n                        rows='5'\n                        placeholder={localizeMessage('user.settings.notifications.autoResponderPlaceholder', 'Message')}\n                        value={autoResponderMessage}\n                        maxLength={MESSAGE_MAX_LENGTH}\n                        onChange={this.onMessageChanged}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(activeToggle);\n        if (autoResponderActive) {\n            inputs.push(message);\n        }\n        inputs.push((\n            <div\n                key='autoResponderHint'\n                className='margin-top x3'\n            >\n                <FormattedHTMLMessage\n                    id='user.settings.notifications.autoResponderHint'\n                    defaultMessage='Set a custom message that will be automatically sent in response to Direct Messages. Mentions in Public and Private Channels will not trigger the automated reply. Enabling Automatic Replies sets your status to Out of Office and disables email and push notifications.'\n                />\n            </div>\n        ));\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponder'\n                        defaultMessage='Automatic Direct Message Replies'\n                    />\n                }\n                width='medium'\n                shiftEnter={true}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants, {NotificationLevels} from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport DesktopNotificationSettings from './desktop_notification_settings.jsx';\nimport EmailNotificationSetting from './email_notification_setting';\nimport ManageAutoResponder from './manage_auto_responder.jsx';\n\nfunction getNotificationsStateFromProps(props) {\n    const user = props.user;\n\n    let desktop = NotificationLevels.MENTION;\n    let sound = 'true';\n    let comments = 'never';\n    let enableEmail = 'true';\n    let pushActivity = NotificationLevels.MENTION;\n    let pushStatus = Constants.UserStatuses.AWAY;\n    let autoResponderActive = false;\n    let autoResponderMessage = Utils.localizeMessage(\n        'user.settings.notifications.autoResponderDefault',\n        'Hello, I am out of office and unable to respond to messages.'\n    );\n\n    if (user.notify_props) {\n        if (user.notify_props.desktop) {\n            desktop = user.notify_props.desktop;\n        }\n        if (user.notify_props.desktop_sound) {\n            sound = user.notify_props.desktop_sound;\n        }\n        if (user.notify_props.comments) {\n            comments = user.notify_props.comments;\n        }\n        if (user.notify_props.email) {\n            enableEmail = user.notify_props.email;\n        }\n        if (user.notify_props.push) {\n            pushActivity = user.notify_props.push;\n        }\n        if (user.notify_props.push_status) {\n            pushStatus = user.notify_props.push_status;\n        }\n\n        if (user.notify_props.auto_responder_active) {\n            autoResponderActive = user.notify_props.auto_responder_active === 'true';\n        }\n\n        if (user.notify_props.auto_responder_message) {\n            autoResponderMessage = user.notify_props.auto_responder_message;\n        }\n    }\n\n    let usernameKey = false;\n    let customKeys = '';\n    let firstNameKey = false;\n    let channelKey = false;\n\n    if (user.notify_props) {\n        if (user.notify_props.mention_keys) {\n            const keys = user.notify_props.mention_keys.split(',');\n\n            if (keys.indexOf(user.username) === -1) {\n                usernameKey = false;\n            } else {\n                usernameKey = true;\n                keys.splice(keys.indexOf(user.username), 1);\n                if (keys.indexOf(`@${user.username}`) !== -1) {\n                    keys.splice(keys.indexOf(`@${user.username}`), 1);\n                }\n            }\n\n            customKeys = keys.join(',');\n        }\n\n        if (user.notify_props.first_name) {\n            firstNameKey = user.notify_props.first_name === 'true';\n        }\n\n        if (user.notify_props.channel) {\n            channelKey = user.notify_props.channel === 'true';\n        }\n    }\n\n    return {\n        desktopActivity: desktop,\n        enableEmail,\n        pushActivity,\n        pushStatus,\n        desktopSound: sound,\n        usernameKey,\n        customKeys,\n        customKeysChecked: customKeys.length > 0,\n        firstNameKey,\n        channelKey,\n        autoResponderActive,\n        autoResponderMessage,\n        notifyCommentsLevel: comments,\n        isSaving: false,\n    };\n}\n\nexport default class NotificationsTab extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        siteName: PropTypes.string,\n        sendPushNotifications: PropTypes.bool,\n        enableAutoResponder: PropTypes.bool,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: null,\n        activeSection: '',\n        activeTab: '',\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = getNotificationsStateFromProps(props);\n    }\n\n    handleSubmit = () => {\n        const data = {};\n        data.email = this.state.enableEmail;\n        data.desktop_sound = this.state.desktopSound;\n        data.desktop = this.state.desktopActivity;\n        data.push = this.state.pushActivity;\n        data.push_status = this.state.pushStatus;\n        data.comments = this.state.notifyCommentsLevel;\n        data.auto_responder_active = this.state.autoResponderActive.toString();\n        data.auto_responder_message = this.state.autoResponderMessage;\n\n        if (!data.auto_responder_message || data.auto_responder_message === '') {\n            data.auto_responder_message = Utils.localizeMessage(\n                'user.settings.notifications.autoResponderDefault',\n                'Hello, I am out of office and unable to respond to messages.'\n            );\n        }\n\n        const mentionKeys = [];\n        if (this.state.usernameKey) {\n            mentionKeys.push(this.props.user.username);\n        }\n\n        let stringKeys = mentionKeys.join(',');\n        if (this.state.customKeys.length > 0 && this.state.customKeysChecked) {\n            stringKeys += ',' + this.state.customKeys;\n        }\n\n        data.mention_keys = stringKeys;\n        data.first_name = this.state.firstNameKey.toString();\n        data.channel = this.state.channelKey.toString();\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe({notify_props: data}).\n            then(({data: result, error: err}) => {\n                if (result) {\n                    this.handleUpdateSection('');\n                    this.setState(getNotificationsStateFromProps(this.props));\n                } else if (err) {\n                    this.setState({serverError: err.message, isSaving: false});\n                }\n            });\n    }\n\n    handleCancel = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n        this.setState(getNotificationsStateFromProps(this.props));\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n        }\n        this.setState({isSaving: false});\n        this.handleCancel();\n    };\n\n    setStateValue = (key, value) => {\n        const data = {};\n        data[key] = value;\n        this.setState(data);\n    }\n\n    handleNotifyCommentsRadio(notifyCommentsLevel) {\n        this.setState({notifyCommentsLevel});\n    }\n\n    handlePushRadio(pushActivity) {\n        this.setState({pushActivity});\n    }\n\n    handlePushStatusRadio(pushStatus) {\n        this.setState({pushStatus});\n    }\n\n    handleEmailRadio = (enableEmail) => {\n        this.setState({enableEmail});\n    }\n\n    updateUsernameKey = (val) => {\n        this.setState({usernameKey: val});\n    }\n\n    updateFirstNameKey = (val) => {\n        this.setState({firstNameKey: val});\n    }\n\n    updateChannelKey = (val) => {\n        this.setState({channelKey: val});\n    }\n\n    updateCustomMentionKeys = () => {\n        const checked = this.refs.customcheck.checked;\n\n        if (checked) {\n            const text = this.refs.custommentions.value;\n\n            // remove all spaces and split string into individual keys\n            this.setState({customKeys: text.replace(/ /g, ''), customKeysChecked: true});\n        } else {\n            this.setState({customKeys: '', customKeysChecked: false});\n        }\n    }\n\n    onCustomChange = () => {\n        this.refs.customcheck.checked = true;\n        this.updateCustomMentionKeys();\n    }\n\n    createPushNotificationSection = () => {\n        if (this.props.activeSection === 'push') {\n            const inputs = [];\n            let extraInfo = null;\n            let submit = null;\n\n            if (this.props.sendPushNotifications) {\n                const pushActivityRadio = [false, false, false];\n                if (this.state.pushActivity === NotificationLevels.ALL) {\n                    pushActivityRadio[0] = true;\n                } else if (this.state.pushActivity === NotificationLevels.NONE) {\n                    pushActivityRadio[2] = true;\n                } else {\n                    pushActivityRadio[1] = true;\n                }\n\n                const pushStatusRadio = [false, false, false];\n                if (this.state.pushStatus === Constants.UserStatuses.ONLINE) {\n                    pushStatusRadio[0] = true;\n                } else if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                    pushStatusRadio[1] = true;\n                } else {\n                    pushStatusRadio[2] = true;\n                }\n\n                let pushStatusSettings;\n                if (this.state.pushActivity !== NotificationLevels.NONE) {\n                    pushStatusSettings = (\n                        <fieldset>\n                            <legend className='form-legend'>\n                                <FormattedMessage\n                                    id='user.settings.notifications.push_notification.status'\n                                    defaultMessage='Trigger push notifications when'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOnline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[0]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.ONLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.online'\n                                        defaultMessage='Online, away or offline'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAway'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[1]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.AWAY)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.away'\n                                        defaultMessage='Away or offline'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOffline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[2]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.OFFLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.offline'\n                                        defaultMessage='Offline'\n                                    />\n                                </label>\n                            </div>\n                        </fieldset>\n                    );\n\n                    extraInfo = (\n                        <span>\n                            <FormattedMessage\n                                id='user.settings.push_notification.status_info'\n                                defaultMessage='Notification alerts are only pushed to your mobile device when your online status matches the selection above.'\n                            />\n                        </span>\n                    );\n                }\n\n                inputs.push(\n                    <div>\n                        <fieldset key='userNotificationLevelOption'>\n                            <legend className='form-legend'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.send'\n                                    defaultMessage='Send mobile push notifications'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAllActivity'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[0]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.ALL)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.allActivity'\n                                        defaultMessage='For all activity'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationMentions'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[1]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.MENTION)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.onlyMentions'\n                                        defaultMessage='For mentions and direct messages'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationNever'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[2]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.NONE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.notifications.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                            </div>\n                            <div className='margin-top x3'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.info'\n                                    defaultMessage='Notification alerts are pushed to your mobile device when there is activity in Vue.'\n                                />\n                            </div>\n                        </fieldset>\n                        <hr/>\n                        {pushStatusSettings}\n                    </div>\n                );\n\n                submit = this.handleSubmit;\n            } else {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='padding-top'\n                    >\n                        <FormattedMessage\n                            id='user.settings.push_notification.disabled_long'\n                            defaultMessage='Push notifications have not been enabled by your System Administrator.'\n                        />\n                    </div>\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile push notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={submit}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = '';\n        if (this.state.pushActivity === NotificationLevels.ALL) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityAway'\n                        defaultMessage='For all activity when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOffline'\n                        defaultMessage='For all activity when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOnline'\n                        defaultMessage='For all activity when online, away or offline'\n                    />\n                );\n            }\n        } else if (this.state.pushActivity === NotificationLevels.NONE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.never'\n                    defaultMessage='Never'\n                />\n            );\n        } else if (this.props.sendPushNotifications) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) { //eslint-disable-line no-lonely-if\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsAway'\n                        defaultMessage='For mentions and direct messages when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOffline'\n                        defaultMessage='For mentions and direct messages when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOnline'\n                        defaultMessage='For mentions and direct messages when online, away or offline'\n                    />\n                );\n            }\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.push_notification.disabled'\n                    defaultMessage='Push notifications are not enabled'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile push notifications')}\n                describe={describe}\n                section={'push'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const serverError = this.state.serverError;\n        const user = this.props.user;\n\n        let keysSection;\n        if (this.props.activeSection === 'keys') {\n            const inputs = [];\n\n            if (user.first_name) {\n                const handleUpdateFirstNameKey = (e) => {\n                    this.updateFirstNameKey(e.target.checked);\n                };\n                inputs.push(\n                    <div key='userNotificationFirstNameOption'>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='notificationTriggerFirst'\n                                    type='checkbox'\n                                    checked={this.state.firstNameKey}\n                                    onChange={handleUpdateFirstNameKey}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.sensitiveName'\n                                    defaultMessage='Your case sensitive first name \"{first_name}\"'\n                                    values={{\n                                        first_name: user.first_name,\n                                    }}\n                                />\n                            </label>\n                        </div>\n                    </div>\n                );\n            }\n\n            const handleUpdateUsernameKey = (e) => {\n                this.updateUsernameKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationUsernameOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerUsername'\n                                type='checkbox'\n                                checked={this.state.usernameKey}\n                                onChange={handleUpdateUsernameKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveUsername'\n                                defaultMessage='Your non-case sensitive username \"{username}\"'\n                                values={{\n                                    username: user.username,\n                                }}\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            const handleUpdateChannelKey = (e) => {\n                this.updateChannelKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationChannelOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerShouts'\n                                type='checkbox'\n                                checked={this.state.channelKey}\n                                onChange={handleUpdateChannelKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.channelWide'\n                                defaultMessage='Channel-wide mentions \"@channel\", \"@all\", \"@here\"'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            inputs.push(\n                <div key='userNotificationCustomOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerCustom'\n                                ref='customcheck'\n                                type='checkbox'\n                                checked={this.state.customKeysChecked}\n                                onChange={this.updateCustomMentionKeys}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveWords'\n                                defaultMessage='Other non-case sensitive words, separated by commas:'\n                            />\n                        </label>\n                    </div>\n                    <input\n                        id='notificationTriggerCustomText'\n                        autoFocus={this.state.customKeysChecked}\n                        ref='custommentions'\n                        className='form-control mentions-input'\n                        type='text'\n                        defaultValue={this.state.customKeys}\n                        onChange={this.onCustomChange}\n                        onFocus={Utils.moveCursorToEnd}\n                        aria-labelledby='notificationTriggerCustom'\n                    />\n                </div>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.mentionsInfo'\n                        defaultMessage='Mentions trigger when someone sends a message that includes your username (@{username}) or any of the options selected above.'\n                        values={{\n                            username: user.username,\n                        }}\n                    />\n                </span>\n            );\n\n            keysSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words that trigger mentions')}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let keys = ['@' + user.username];\n            if (this.state.firstNameKey) {\n                keys.push(user.first_name);\n            }\n            if (this.state.usernameKey) {\n                keys.push(user.username);\n            }\n\n            if (this.state.channelKey) {\n                keys.push('@channel');\n                keys.push('@all');\n                keys.push('@here');\n            }\n            if (this.state.customKeys.length > 0) {\n                keys = keys.concat(this.state.customKeys.split(','));\n            }\n\n            let describe = '';\n            for (let i = 0; i < keys.length; i++) {\n                if (keys[i] !== '') {\n                    describe += '\"' + keys[i] + '\", ';\n                }\n            }\n\n            if (describe.length > 0) {\n                describe = describe.substring(0, describe.length - 2);\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.noWords'\n                        defaultMessage='No words configured'\n                    />\n                );\n            }\n\n            keysSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words that trigger mentions')}\n                    describe={describe}\n                    section={'keys'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let commentsSection;\n        if (this.props.activeSection === 'comments') {\n            const commentsActive = [false, false, false];\n            if (this.state.notifyCommentsLevel === 'never') {\n                commentsActive[2] = true;\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                commentsActive[1] = true;\n            } else {\n                commentsActive[0] = true;\n            }\n\n            const inputs = [];\n\n            inputs.push(\n                <fieldset key='userNotificationLevelOption'>\n                    <legend className='form-legend hidden-label'>\n                        {Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsAny'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[0]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'any')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsAny'\n                                defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsRoot'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[1]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'root')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsRoot'\n                                defaultMessage='Trigger notifications on messages in threads that I start'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsNever'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[2]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'never')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsNever'\n                                defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsInfo'\n                        defaultMessage=\"In addition to notifications for when you're mentioned, select if you would like to receive notifications on reply threads.\"\n                    />\n                </span>\n            );\n\n            commentsSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.state.notifyCommentsLevel === 'never') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsNever'\n                        defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                    />\n                );\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsRoot'\n                        defaultMessage='Trigger notifications on messages in threads that I start'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsAny'\n                        defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                    />\n                );\n            }\n\n            commentsSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    describe={describe}\n                    section={'comments'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let autoResponderSection;\n        if (this.props.enableAutoResponder) {\n            if (this.props.activeSection === 'auto-responder') {\n                autoResponderSection = (\n                    <div>\n                        <ManageAutoResponder\n                            autoResponderActive={this.state.autoResponderActive}\n                            autoResponderMessage={this.state.autoResponderMessage}\n                            updateSection={this.handleUpdateSection}\n                            setParentState={this.setStateValue}\n                            submit={this.handleSubmit}\n                            error={this.state.serverError}\n                            saving={this.state.isSaving}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                const describe = this.state.autoResponderActive ? (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                ) : (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderDisabled'\n                        defaultMessage='Disabled'\n                    />\n                );\n\n                autoResponderSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.notifications.autoResponder'\n                                defaultMessage='Automatic Direct Message Replies'\n                            />\n                        }\n                        width='medium'\n                        describe={describe}\n                        section={'auto-responder'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        const pushNotificationSection = this.createPushNotificationSection();\n\n        return (\n            <div id='notificationSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.notifications.title'\n                            defaultMessage='Notification Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    ref='wrapper'\n                    className='user-settings'\n                >\n                    <h3\n                        id='notificationSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.notifications.header'\n                            defaultMessage='Notifications'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    <DesktopNotificationSettings\n                        activity={this.state.desktopActivity}\n                        sound={this.state.desktopSound}\n                        updateSection={this.handleUpdateSection}\n                        setParentState={this.setStateValue}\n                        submit={this.handleSubmit}\n                        saving={this.state.isSaving}\n                        cancel={this.handleCancel}\n                        error={this.state.serverError}\n                        active={this.props.activeSection === 'desktop'}\n                    />\n                    <div className='divider-light'/>\n                    <EmailNotificationSetting\n                        activeSection={this.props.activeSection}\n                        updateSection={this.handleUpdateSection}\n                        enableEmail={this.state.enableEmail === 'true'}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        onChange={this.handleEmailRadio}\n                        saving={this.state.isSaving}\n                        serverError={this.state.serverError}\n                        siteName={this.props.siteName}\n                    />\n                    <div className='divider-light'/>\n                    {pushNotificationSection}\n                    <div className='divider-light'/>\n                    {keysSection}\n                    <div className='divider-light'/>\n                    {commentsSection}\n                    <div className='divider-light'/>\n                    {autoResponderSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n\n        );\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport UserSettingsNotifications from './user_settings_notifications.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const siteName = config.SiteName;\n    const sendPushNotifications = config.SendPushNotifications === 'true';\n    const enableAutoResponder = config.ExperimentalEnableAutomaticReplies === 'true';\n\n    return {\n        siteName,\n        sendPushNotifications,\n        enableAutoResponder,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({updateMe}, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsNotifications);\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {isMobile} from 'utils/utils.jsx';\nimport AuditTable from 'components/audit_table';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nexport default class AccessHistoryModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Function that's called when modal is closed\n         */\n        onHide: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n\n            /**\n             * Function to fetch the user's audits\n             */\n            getUserAudits: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * The current user's audits\n         */\n        userAudits: PropTypes.array.isRequired,\n\n        /**\n         * The current user id\n         */\n        currentUserId: PropTypes.string.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    onShow = () => {\n        this.props.actions.getUserAudits(this.props.currentUserId, 0, 200);\n        if (!isMobile()) {\n            $('.modal-body').perfectScrollbar();\n        }\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    componentDidMount() {\n        this.onShow();\n    }\n\n    render() {\n        let content;\n        if (this.props.userAudits.length === 0) {\n            content = (<LoadingScreen/>);\n        } else {\n            content = (\n                <AuditTable\n                    audits={this.props.userAudits}\n                    showIp={true}\n                    showSession={true}\n                />\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='accessHistoryModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='accessHistoryModalLabel'\n                    >\n                        <FormattedMessage\n                            id='access_history.title'\n                            defaultMessage='Access History'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body ref='modalBody'>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getUserAudits} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserAudits as getCurrentUserAudits} from 'mattermost-redux/selectors/entities/users';\n\nimport AccessHistoryModal from './access_history_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        userAudits: getCurrentUserAudits(state) || [],\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAudits,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccessHistoryModal);\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\n\nimport {getMonthLong} from 'utils/i18n';\n\nexport default function MoreInfo({\n    locale,\n    currentSession,\n    moreInfo,\n    handleMoreInfo,\n}) {\n    if (moreInfo) {\n        const firstAccessTime = new Date(currentSession.create_at);\n\n        return (\n            <div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.firstTime'\n                        defaultMessage='First time active: {date}, {time}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={firstAccessTime}\n                                    day='2-digit'\n                                    month={getMonthLong(locale)}\n                                    year='numeric'\n                                />\n                            ),\n                            time: (\n                                <FormattedTime\n                                    value={firstAccessTime}\n                                    hour='2-digit'\n                                    minute='2-digit'\n                                />\n                            ),\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.os'\n                        defaultMessage='OS: {os}'\n                        values={{\n                            os: currentSession.props.os,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.browser'\n                        defaultMessage='Browser: {browser}'\n                        values={{\n                            browser: currentSession.props.browser,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.sessionId'\n                        defaultMessage='Session ID: {id}'\n                        values={{\n                            id: currentSession.id,\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <a\n            className='theme'\n            href='#'\n            onClick={handleMoreInfo}\n        >\n            <FormattedMessage\n                id='activity_log.moreInfo'\n                defaultMessage='More info'\n            />\n        </a>\n    );\n}\n\nMoreInfo.propTypes = {\n    locale: PropTypes.string.isRequired,\n    currentSession: PropTypes.object.isRequired,\n    handleMoreInfo: PropTypes.func.isRequired,\n    moreInfo: PropTypes.bool.isRequired,\n};\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {General} from 'mattermost-redux/constants';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {getMonthLong, t} from 'utils/i18n';\n\nimport MoreInfo from './more_info.jsx';\n\nexport default class ActivityLog extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The index of this instance within the list\n         */\n        index: PropTypes.number.isRequired,\n\n        /**\n         * The current locale of the user\n         */\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * The session that's to be displayed\n         */\n        currentSession: PropTypes.object.isRequired,\n\n        /**\n         * Function to revoke session\n         */\n        submitRevoke: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            moreInfo: false,\n        };\n    }\n\n    handleMoreInfo = () => {\n        this.setState({moreInfo: true});\n    }\n\n    submitRevoke = (e) => {\n        this.props.submitRevoke(this.props.currentSession.id, e);\n    }\n\n    isMobileSession = (session) => {\n        return session.device_id && (session.device_id.includes('apple') || session.device_id.includes('android'));\n    };\n\n    mobileSessionInfo = (session) => {\n        let deviceTypeId;\n        let deviceTypeMessage;\n        let devicePicture;\n        let deviceTitle;\n\n        if (session.device_id.includes('apple')) {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n            deviceTypeId = t('activity_log_modal.iphoneNativeClassicApp');\n            deviceTypeMessage = 'iPhone Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_APPLE_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.iphoneNativeApp');\n                deviceTypeMessage = 'iPhone Native App';\n            }\n        } else if (session.device_id.includes('android')) {\n            devicePicture = 'fa fa-android';\n            deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            deviceTypeId = t('activity_log_modal.androidNativeClassicApp');\n            deviceTypeMessage = 'Android Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_ANDROID_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.androidNativeApp');\n                deviceTypeMessage = 'Android Native App';\n            }\n        }\n\n        return {\n            devicePicture,\n            deviceTitle,\n            devicePlatform: (\n                <FormattedMessage\n                    id={deviceTypeId}\n                    defaultMessage={deviceTypeMessage}\n                />\n            ),\n        };\n    };\n\n    render() {\n        const {\n            index,\n            locale,\n            currentSession,\n        } = this.props;\n\n        const lastAccessTime = new Date(currentSession.last_activity_at);\n        let devicePlatform = currentSession.props.platform;\n        let devicePicture = '';\n        let deviceTitle = '';\n\n        if (currentSession.props.platform === 'Windows') {\n            devicePicture = 'fa fa-windows';\n            deviceTitle = localizeMessage('device_icons.windows', 'Windows Icon');\n        } else if (this.isMobileSession(currentSession)) {\n            const sessionInfo = this.mobileSessionInfo(currentSession);\n            devicePicture = sessionInfo.devicePicture;\n            devicePlatform = sessionInfo.devicePlatform;\n        } else if (currentSession.props.platform === 'Macintosh' ||\n            currentSession.props.platform === 'iPhone') {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n        } else if (currentSession.props.platform === 'Linux') {\n            if (currentSession.props.os.indexOf('Android') >= 0) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.android'\n                        defaultMessage='Android'\n                    />\n                );\n                devicePicture = 'fa fa-android';\n                deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            } else {\n                devicePicture = 'fa fa-linux';\n                deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n            }\n        } else if (currentSession.props.os.indexOf('Linux') !== -1) {\n            devicePicture = 'fa fa-linux';\n            deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n        }\n\n        if (currentSession.props.browser.indexOf('Desktop App') !== -1) {\n            devicePlatform = (\n                <FormattedMessage\n                    id='activity_log_modal.desktop'\n                    defaultMessage='Native Desktop App'\n                />\n            );\n        }\n\n        return (\n            <div\n                key={'activityLogEntryKey' + index}\n                className='activity-log__table'\n            >\n                <div className='activity-log__report'>\n                    <div className='report__platform'>\n                        <i\n                            className={devicePicture}\n                            title={deviceTitle}\n                        />{devicePlatform}\n                    </div>\n                    <div className='report__info'>\n                        <div>\n                            <FormattedMessage\n                                id='activity_log.lastActivity'\n                                defaultMessage='Last activity: {date}, {time}'\n                                values={{\n                                    date: (\n                                        <FormattedDate\n                                            value={lastAccessTime}\n                                            day='2-digit'\n                                            month={getMonthLong(locale)}\n                                            year='numeric'\n                                        />\n                                    ),\n                                    time: (\n                                        <FormattedTime\n                                            value={lastAccessTime}\n                                            hour='2-digit'\n                                            minute='2-digit'\n                                        />\n                                    ),\n                                }}\n                            />\n                        </div>\n                        <MoreInfo\n                            locale={locale}\n                            currentSession={currentSession}\n                            moreInfo={this.state.moreInfo}\n                            handleMoreInfo={this.handleMoreInfo}\n                        />\n                    </div>\n                </div>\n                <div className='activity-log__action'>\n                    <button\n                        onClick={this.submitRevoke}\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='activity_log.logout'\n                            defaultMessage='Logout'\n                        />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {isMobile} from 'utils/utils.jsx';\nimport ActivityLog from 'components/activity_log_modal/components/activity_log.jsx';\nimport LoadingScreen from 'components/loading_screen.jsx';\n\nexport default class ActivityLogModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The current user id\n         */\n        currentUserId: PropTypes.string.isRequired,\n\n        /**\n         * Current user's sessions\n         */\n        sessions: PropTypes.oneOfType([\n            PropTypes.array,\n            PropTypes.object,\n        ]).isRequired,\n\n        /**\n         * Current user's locale\n         */\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * Function that's called when user closes the modal\n         */\n        onHide: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n\n            /**\n             * Function to refresh sessions from server\n             */\n            getSessions: PropTypes.func.isRequired,\n\n            /**\n             * Function to revoke a particular session\n             */\n            revokeSession: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    submitRevoke = (altId, e) => {\n        e.preventDefault();\n        var modalContent = $(e.target).closest('.modal-content');\n        modalContent.addClass('animation--highlight');\n        setTimeout(() => {\n            modalContent.removeClass('animation--highlight');\n        }, 1500);\n        this.props.actions.revokeSession(this.props.currentUserId, altId).then(() => {\n            this.props.actions.getSessions(this.props.currentUserId);\n        });\n    }\n\n    onShow = () => {\n        this.props.actions.getSessions(this.props.currentUserId);\n        if (!isMobile()) {\n            $('.modal-body').perfectScrollbar();\n        }\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    componentDidMount() {\n        this.onShow();\n    }\n\n    render() {\n        let content;\n        if (this.props.sessions.loading) {\n            content = <LoadingScreen/>;\n        } else {\n            const activityList = this.props.sessions.reduce((array, currentSession, index) => {\n                if (currentSession.props.type === 'UserAccessToken') {\n                    return array;\n                }\n\n                array.push(\n                    <ActivityLog\n                        key={currentSession.id}\n                        index={index}\n                        locale={this.props.locale}\n                        currentSession={currentSession}\n                        submitRevoke={this.submitRevoke}\n                    />\n                );\n                return array;\n            }, []);\n\n            content = <form role='form'>{activityList}</form>;\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='activityLogModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='activityLogModalLabel'\n                    >\n                        <FormattedMessage\n                            id='activity_log.activeSessions'\n                            defaultMessage='Active Sessions'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body ref='modalBody'>\n                    <p className='session-help-text'>\n                        <FormattedMessage\n                            id='activity_log.sessionsDescription'\n                            defaultMessage=\"Sessions are created when you log in to a new browser on a device. Sessions let you use Vue without having to log in again for a time period specified by the System Admin. If you want to log out sooner, use the 'Logout' button below to end a session.\"\n                        />\n                    </p>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getSessions, revokeSession} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserSessions} from 'mattermost-redux/selectors/entities/users';\n\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport ActivityLogModal from './activity_log_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        sessions: getUserSessions(state),\n        locale: getCurrentLocale(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSessions,\n            revokeSession,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivityLogModal);\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport {browserHistory} from 'utils/browser_history';\n\nconst SECTION_MFA = 'mfa';\n\nexport default class MfaSection extends React.PureComponent {\n    static propTypes = {\n        active: PropTypes.bool.isRequired,\n\n        // Whether or not the current user has MFA enabled\n        mfaActive: PropTypes.bool.isRequired,\n\n        // Whether or not the current user can enable MFA based on their authentication type and the server's settings\n        mfaAvailable: PropTypes.bool.isRequired,\n\n        // Whether or not this server enforces that all users have MFA\n        mfaEnforced: PropTypes.bool.isRequired,\n\n        updateSection: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            deactivateMfa: PropTypes.func.isRequired,\n        }),\n    };\n\n    state = {\n        serverError: null,\n    };\n\n    setupMfa = (e) => {\n        e.preventDefault();\n\n        browserHistory.push('/mfa/setup');\n    };\n\n    removeMfa = async (e) => {\n        e.preventDefault();\n\n        const {error} = await this.props.actions.deactivateMfa();\n\n        if (error) {\n            this.setState({\n                serverError: error.message,\n            });\n            return;\n        }\n\n        if (this.props.mfaEnforced) {\n            browserHistory.push('/mfa/setup');\n            return;\n        }\n\n        this.props.updateSection('');\n        this.setState({\n            serverError: null,\n        });\n    };\n\n    renderTitle = () => {\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.title'\n                defaultMessage='Multi-factor Authentication'\n            />\n        );\n    };\n\n    renderDescription = () => {\n        if (this.props.mfaActive) {\n            return (\n                <FormattedMessage\n                    id='user.settings.security.active'\n                    defaultMessage='Active'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.security.inactive'\n                defaultMessage='Inactive'\n            />\n        );\n    };\n\n    renderContent = () => {\n        let content;\n\n        if (this.props.mfaActive) {\n            let buttonText;\n\n            if (this.props.mfaEnforced) {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.reset'\n                        defaultMessage='Reset MFA on your account'\n                    />\n                );\n            } else {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.remove'\n                        defaultMessage='Remove MFA from your account'\n                    />\n                );\n            }\n\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.removeMfa}\n                >\n                    {buttonText}\n                </a>\n            );\n        } else {\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.setupMfa}\n                >\n                    <FormattedMessage\n                        id='user.settings.mfa.add'\n                        defaultMessage='Add MFA to your account'\n                    />\n                </a>\n            );\n        }\n\n        return (\n            <div className='padding-top'>\n                {content}\n                <br/>\n            </div>\n        );\n    };\n\n    renderHelpText = () => {\n        if (this.props.mfaActive) {\n            if (this.props.mfaEnforced) {\n                return (\n                    <FormattedMessage\n                        id='user.settings.mfa.requiredHelp'\n                        defaultMessage='Multi-factor authentication is required on this server. Resetting is only recommended when you need to switch code generation to a new mobile device. You will be required to set it up again immediately.'\n                    />\n                );\n            }\n\n            return (\n                <FormattedMessage\n                    id='user.settings.mfa.removeHelp'\n                    defaultMessage='Removing multi-factor authentication means you will no longer require a phone-based passcode to sign-in to your account.'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.addHelp'\n                defaultMessage='Adding multi-factor authentication will make your account more secure by requiring a code from your mobile phone each time you sign in.'\n            />\n        );\n    };\n\n    render() {\n        const title = this.renderTitle();\n\n        if (!this.props.mfaAvailable) {\n            return null;\n        }\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section={SECTION_MFA}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={this.renderContent()}\n                extraInfo={this.renderHelpText()}\n                serverError={this.state.serverError}\n                updateSection={this.props.updateSection}\n                width='medium'\n            />\n        );\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {deactivateMfa} from 'actions/views/mfa';\nimport Constants from 'utils/constants';\n\nimport MfaSection from './mfa_section';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n\n    const mfaLicensed = license && license.IsLicensed === 'true' && license.MFA === 'true';\n\n    const mfaEnabled = config.EnableMultifactorAuthentication === 'true';\n    const mfaEnforced = mfaLicensed && config.EnforceMultifactorAuthentication === 'true';\n\n    const user = getCurrentUser(state);\n\n    let mfaActive = false;\n    let mfaAvailable = false;\n    if (user) {\n        mfaActive = user.mfa_active;\n        mfaAvailable = mfaEnabled && (user.auth_service === '' || user.auth_service === Constants.LDAP_SERVICE);\n    }\n\n    return {\n        mfaActive,\n        mfaAvailable,\n        mfaEnforced,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            deactivateMfa,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MfaSection);\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport Constants from 'utils/constants.jsx';\nimport {isMobile} from 'utils/user_agent.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SaveButton from 'components/save_button.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nconst SECTION_TOKENS = 'tokens';\nconst TOKEN_CREATING = 'creating';\nconst TOKEN_CREATED = 'created';\nconst TOKEN_NOT_CREATING = 'not_creating';\n\nexport default class UserAccessTokenSection extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        active: PropTypes.bool,\n        updateSection: PropTypes.func,\n        userAccessTokens: PropTypes.object,\n        setRequireConfirm: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            getUserAccessTokensForUser: PropTypes.func.isRequired,\n            createUserAccessToken: PropTypes.func.isRequired,\n            revokeUserAccessToken: PropTypes.func.isRequired,\n            enableUserAccessToken: PropTypes.func.isRequired,\n            disableUserAccessToken: PropTypes.func.isRequired,\n            clearUserAccessTokens: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: {},\n        active: false,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showConfirmModal: false,\n            newToken: null,\n            tokenCreationState: TOKEN_NOT_CREATING,\n            tokenError: '',\n            serverError: null,\n            saving: false,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.clearUserAccessTokens();\n        const userId = this.props.user ? this.props.user.id : '';\n        this.props.actions.getUserAccessTokensForUser(userId, 0, 200);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (!nextProps.active && this.props.active) {\n            this.setState({\n                showConfirmModal: false,\n                newToken: null,\n                tokenCreationState: TOKEN_NOT_CREATING,\n                tokenError: '',\n                serverError: null,\n                saving: false,\n            });\n        }\n    }\n\n    startCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_CREATING});\n    }\n\n    stopCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_NOT_CREATING, saving: false});\n    }\n\n    handleCreateToken = async () => {\n        this.handleCancelConfirm();\n\n        const description = this.refs.newtokendescription ? this.refs.newtokendescription.value : '';\n\n        if (description === '') {\n            this.setState({tokenError: Utils.localizeMessage('user.settings.tokens.nameRequired', 'Please enter a description.')});\n            return;\n        }\n\n        this.setState({tokenError: '', saving: true});\n        this.props.setRequireConfirm(true, this.confirmCopyToken);\n\n        const userId = this.props.user ? this.props.user.id : '';\n        const {data, error} = await this.props.actions.createUserAccessToken(userId, description);\n\n        if (data && this.state.tokenCreationState === TOKEN_CREATING) {\n            this.setState({tokenCreationState: TOKEN_CREATED, newToken: data, saving: false});\n        } else if (error) {\n            this.setState({serverError: error.message, saving: false});\n        }\n    }\n\n    confirmCopyToken = (confirmAction) => {\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyTitle'\n                    defaultMessage='Have you copied your token?'\n                />\n            ),\n            confirmMessage: (state) => (\n                <div>\n                    <FormattedHTMLMessage\n                        id='user.settings.tokens.confirmCopyMessage'\n                        defaultMessage=\"Make sure you have copied and saved the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    {state.tokenCreationState === TOKEN_CREATING ? (\n                        <div>\n                            <strong className='word-break--all'>\n                                <FormattedMessage\n                                    id='user.settings.tokens.token'\n                                    defaultMessage='Access Token: '\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='user.settings.tokens.tokenLoading'\n                                defaultMessage='Loading...'\n                            />\n                        </div>\n                    ) : (\n                        <strong className='word-break--all'>\n                            <FormattedMessage\n                                id='user.settings.tokens.token'\n                                defaultMessage='Access Token: '\n                            />\n                            {state.newToken.token}\n                        </strong>\n                    )}\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyButton'\n                    defaultMessage='Yes, I have copied the token'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCancelConfirm();\n                confirmAction();\n            },\n            confirmHideCancel: true,\n        });\n    }\n\n    handleCancelConfirm = () => {\n        this.setState({\n            showConfirmModal: false,\n            confirmTitle: null,\n            confirmMessage: null,\n            confirmButton: null,\n            confirmComplete: null,\n            confirmHideCancel: false,\n        });\n    }\n\n    confirmCreateToken = () => {\n        if (!UserUtils.isSystemAdmin(this.props.user.roles)) {\n            this.handleCreateToken();\n            return;\n        }\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateTitle'\n                    defaultMessage='Create System Admin Personal Access Token'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedHTMLMessage\n                        id='user.settings.tokens.confirmCreateMessage'\n                        defaultMessage='You are generating a personal access token with System Admin permissions. Are you sure want to create this token?'\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateButton'\n                    defaultMessage='Yes, Create'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCreateToken();\n                trackEvent('settings', 'system_admin_create_user_access_token');\n            },\n        });\n    }\n\n    saveTokenKeyPress = (e) => {\n        if (Utils.isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            this.confirmCreateToken();\n        }\n    }\n\n    confirmRevokeToken = (tokenId) => {\n        const token = this.props.userAccessTokens[tokenId];\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteTitle'\n                    defaultMessage='Delete Token?'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.confirmDeleteMessage'\n                        defaultMessage='Any integrations using this token will no longer be able to access the Vue API. You cannot undo this action. \\n \\nAre you sure want to delete the **{description}** token?'\n                        values={{\n                            description: token.description,\n                        }}\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteButton'\n                    defaultMessage='Yes, Delete'\n                />\n            ),\n            confirmComplete: () => {\n                this.revokeToken(tokenId);\n                trackEvent('settings', 'revoke_user_access_token');\n            },\n        });\n    }\n\n    revokeToken = async (tokenId) => {\n        const {error} = await this.props.actions.revokeUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n        this.handleCancelConfirm();\n    }\n\n    activateToken = async (tokenId) => {\n        const {error} = await this.props.actions.enableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'activate_user_access_token');\n        }\n    }\n\n    deactivateToken = async (tokenId) => {\n        const {error} = await this.props.actions.disableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'deactivate_user_access_token');\n        }\n    }\n\n    render() {\n        let tokenListClass = '';\n\n        if (!this.props.active) {\n            const describe = Utils.localizeMessage('user.settings.tokens.clickToEdit', \"Click 'Edit' to manage your personal access tokens\");\n\n            return (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    describe={describe}\n                    section={SECTION_TOKENS}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        const tokenList = [];\n        Object.values(this.props.userAccessTokens).forEach((token) => {\n            if (this.state.newToken && this.state.newToken.id === token.id) {\n                return;\n            }\n\n            let activeLink;\n            let activeStatus;\n\n            if (token.is_active) {\n                activeLink = (\n                    <a\n                        name={token.id + '_deactivate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.deactivateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivate'\n                            defaultMessage='Disable'\n                        />\n                    </a>);\n            } else {\n                activeStatus = (\n                    <span className='has-error setting-box__inline-error'>\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivatedWarning'\n                            defaultMessage='(Disabled)'\n                        />\n                    </span>\n                );\n                activeLink = (\n                    <a\n                        name={token.id + '_activate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.activateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.activate'\n                            defaultMessage='Enable'\n                        />\n                    </a>\n                );\n            }\n\n            tokenList.push(\n                <div\n                    key={token.id}\n                    className='setting-box__item'\n                >\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenDesc'\n                            defaultMessage='Token Description: '\n                        />\n                        {token.description}\n                        {activeStatus}\n                    </div>\n                    <div className='setting-box__token-id whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenId'\n                            defaultMessage='Token ID: '\n                        />\n                        {token.id}\n                    </div>\n                    <div>\n                        {activeLink}\n                        {' - '}\n                        <a\n                            name={token.id + '_delete'}\n                            href='#'\n                            onClick={(e) => {\n                                e.preventDefault();\n                                this.confirmRevokeToken(token.id);\n                            }}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.delete'\n                                defaultMessage='Delete'\n                            />\n                        </a>\n                    </div>\n                    <hr className='margin-bottom margin-top x2'/>\n                </div>\n            );\n        });\n\n        let noTokenText;\n        if (tokenList.length === 0) {\n            noTokenText = (\n                <FormattedMessage\n                    key='notokens'\n                    id='user.settings.tokens.userAccessTokensNone'\n                    defaultMessage='No personal access tokens.'\n                />\n            );\n        }\n\n        let extraInfo;\n        if (isMobile()) {\n            extraInfo = (\n                <span>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.description_mobile'\n                        defaultMessage='[Personal access tokens](!https://about.vueteams.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.vueteams.com/default-api-authentication). Create new tokens on your desktop.'\n                    />\n                </span>\n            );\n        } else {\n            extraInfo = (\n                <span>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.description'\n                        defaultMessage='[Personal access tokens](!https://about.vueteams.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.vueteams.com/default-api-authentication).'\n                    />\n                </span>\n            );\n        }\n\n        let newTokenSection;\n        if (this.state.tokenCreationState === TOKEN_CREATING) {\n            newTokenSection = (\n                <div className='padding-left x2'>\n                    <div className='row'>\n                        <label className='col-sm-auto control-label padding-right x2'>\n                            <FormattedMessage\n                                id='user.settings.tokens.name'\n                                defaultMessage='Token Description: '\n                            />\n                        </label>\n                        <div className='col-sm-5'>\n                            <input\n                                autoFocus={true}\n                                ref='newtokendescription'\n                                className='form-control'\n                                type='text'\n                                maxLength={64}\n                                onKeyPress={this.saveTokenKeyPress}\n                            />\n                        </div>\n                    </div>\n                    <div>\n                        <div className='padding-top x2'>\n                            <FormattedMessage\n                                id='user.settings.tokens.nameHelp'\n                                defaultMessage='Enter a description for your token to remember what it does.'\n                            />\n                        </div>\n                        <div>\n                            <label\n                                id='clientError'\n                                className='has-error margin-top margin-bottom'\n                            >\n                                {this.state.tokenError}\n                            </label>\n                        </div>\n                        <SaveButton\n                            btnClass='btn-primary'\n                            savingMessage={\n                                <FormattedMessage\n                                    id='user.settings.tokens.save'\n                                    defaultMessage='Save'\n                                />\n                            }\n                            saving={this.state.saving}\n                            onClick={this.confirmCreateToken}\n                        />\n                        <button\n                            className='btn btn-link'\n                            onClick={this.stopCreatingToken}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        } else if (this.state.tokenCreationState === TOKEN_CREATED) {\n            if (tokenList.length === 0) {\n                tokenListClass = ' hidden';\n            }\n\n            newTokenSection = (\n                <div\n                    className='alert alert-warning'\n                >\n                    <WarningIcon additionalClassName='margin-right'/>\n                    <FormattedMessage\n                        id='user.settings.tokens.copy'\n                        defaultMessage=\"Please copy the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.name'\n                            defaultMessage='Token Description: '\n                        />\n                        {this.state.newToken.description}\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.id'\n                            defaultMessage='Token ID: '\n                        />\n                        {this.state.newToken.id}\n                    </div>\n                    <strong className='word-break--all'>\n                        <FormattedMessage\n                            id='user.settings.tokens.token'\n                            defaultMessage='Access Token: '\n                        />\n                        {this.state.newToken.token}\n                    </strong>\n                </div>\n            );\n        } else {\n            newTokenSection = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.startCreatingToken}\n                >\n                    <FormattedMessage\n                        id='user.settings.tokens.create'\n                        defaultMessage='Create New Token'\n                    />\n                </a>\n            );\n        }\n\n        const inputs = [];\n        inputs.push(\n            <div\n                key='tokensSetting'\n                className='padding-top'\n            >\n                <div key='tokenList'>\n                    <div className={'alert alert-transparent' + tokenListClass}>\n                        {tokenList}\n                        {noTokenText}\n                    </div>\n                    {newTokenSection}\n                </div>\n            </div>\n        );\n\n        return (\n            <div>\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    inputs={inputs}\n                    extraInfo={extraInfo}\n                    infoPosition='top'\n                    serverError={this.state.serverError}\n                    updateSection={this.props.updateSection}\n                    width='full'\n                    saving={this.state.saving}\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n                <ConfirmModal\n                    title={this.state.confirmTitle}\n                    message={this.state.confirmMessage ? this.state.confirmMessage(this.state) : null}\n                    confirmButtonText={this.state.confirmButton}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.state.confirmComplete || (() => null)}\n                    onCancel={this.handleCancelConfirm}\n                    hideCancel={this.state.confirmHideCancel}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {clearUserAccessTokens, createUserAccessToken, getUserAccessTokensForUser, revokeUserAccessToken, enableUserAccessToken, disableUserAccessToken} from 'mattermost-redux/actions/users';\n\nimport UserAccessTokenSection from './user_access_token_section.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        userAccessTokens: state.entities.users.myUserAccessTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAccessTokensForUser,\n            createUserAccessToken,\n            revokeUserAccessToken,\n            enableUserAccessToken,\n            disableUserAccessToken,\n            clearUserAccessTokens,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAccessTokenSection);\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport Constants from 'utils/constants.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport icon50 from 'images/icon50x50.png';\nimport AccessHistoryModal from 'components/access_history_modal';\nimport ActivityLogModal from 'components/activity_log_modal';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ToggleModalButton from 'components/toggle_modal_button.jsx';\n\nimport MfaSection from './mfa_section';\nimport UserAccessTokenSection from './user_access_token_section';\n\nconst SECTION_MFA = 'mfa';\nconst SECTION_PASSWORD = 'password';\nconst SECTION_SIGNIN = 'signin';\nconst SECTION_APPS = 'apps';\nconst SECTION_TOKENS = 'tokens';\n\nexport default class SecurityTab extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object,\n        activeSection: PropTypes.string,\n        updateSection: PropTypes.func,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n\n        /*\n         * Set if access tokens are enabled and this user can use them\n         */\n        canUseAccessTokens: PropTypes.bool,\n\n        // Whether or not OAuth applications are enabled.\n        enableOAuthServiceProvider: PropTypes.bool,\n\n        // Whether or not sign-up with email is enabled.\n        enableSignUpWithEmail: PropTypes.bool,\n\n        // Whether or not sign-up with GitLab is enabled.\n        enableSignUpWithGitLab: PropTypes.bool,\n\n        // Whether or not sign-up with Google is enabled.\n        enableSignUpWithGoogle: PropTypes.bool,\n\n        // Whether or not sign-up with LDAP is enabled.\n        enableLdap: PropTypes.bool,\n\n        // Whether or not sign-up with SAML is enabled.\n        enableSaml: PropTypes.bool,\n\n        // Whether or not sign-up with Office 365 is enabled.\n        enableSignUpWithOffice365: PropTypes.bool,\n\n        // Whether or not the experimental authentication transfer is enabled.\n        experimentalEnableAuthenticationTransfer: PropTypes.bool,\n\n        passwordConfig: PropTypes.object,\n        militaryTime: PropTypes.bool,\n\n        actions: PropTypes.shape({\n            getMe: PropTypes.func.isRequired,\n            updateUserPassword: PropTypes.func.isRequired,\n            getAuthorizedOAuthApps: PropTypes.func.isRequired,\n            deauthorizeOAuthApp: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: {},\n        activeSection: '',\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getDefaultState();\n    }\n\n    getDefaultState() {\n        return {\n            currentPassword: '',\n            newPassword: '',\n            confirmPassword: '',\n            passwordError: '',\n            serverError: '',\n            tokenError: '',\n            authService: this.props.user.auth_service,\n            savingPassword: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOAuthServiceProvider) {\n            this.loadAuthorizedOAuthApps();\n        }\n    }\n\n    loadAuthorizedOAuthApps = async () => {\n        const {data, error} = await this.props.actions.getAuthorizedOAuthApps();\n        if (data) {\n            this.setState({authorizedApps: data, serverError: null}); //eslint-disable-line react/no-did-mount-set-state\n        } else if (error) {\n            this.setState({serverError: error.message}); //eslint-disable-line react/no-did-mount-set-state\n        }\n    }\n\n    submitPassword = async () => {\n        const user = this.props.user;\n        const currentPassword = this.state.currentPassword;\n        const newPassword = this.state.newPassword;\n        const confirmPassword = this.state.confirmPassword;\n\n        if (currentPassword === '') {\n            this.setState({passwordError: Utils.localizeMessage('user.settings.security.currentPasswordError', 'Please enter your current password.'), serverError: ''});\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(newPassword, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n                serverError: '',\n            });\n            return;\n        }\n\n        if (newPassword !== confirmPassword) {\n            const defaultState = Object.assign(this.getDefaultState(), {passwordError: Utils.localizeMessage('user.settings.security.passwordMatchError', 'The new passwords you entered do not match.'), serverError: ''});\n            this.setState(defaultState);\n            return;\n        }\n\n        this.setState({savingPassword: true});\n\n        const {data, error: err} = await this.props.actions.updateUserPassword(\n            user.id,\n            currentPassword,\n            newPassword\n        );\n        if (data) {\n            this.props.updateSection('');\n            this.props.actions.getMe();\n            this.setState(this.getDefaultState());\n        } else if (err) {\n            const state = this.getDefaultState();\n            if (err.message) {\n                state.serverError = err.message;\n            } else {\n                state.serverError = err;\n            }\n            state.passwordError = '';\n            this.setState(state);\n        }\n    }\n\n    updateCurrentPassword = (e) => {\n        this.setState({currentPassword: e.target.value});\n    }\n\n    updateNewPassword = (e) => {\n        this.setState({newPassword: e.target.value});\n    }\n\n    updateConfirmPassword = (e) => {\n        this.setState({confirmPassword: e.target.value});\n    }\n\n    deauthorizeApp = async (e) => {\n        e.preventDefault();\n\n        const appId = e.currentTarget.getAttribute('data-app');\n\n        const {data, error} = await this.props.actions.deauthorizeOAuthApp(appId);\n        if (data) {\n            const authorizedApps = this.state.authorizedApps.filter((app) => {\n                return app.id !== appId;\n            });\n            this.setState({authorizedApps, serverError: null});\n        } else if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            switch (this.props.activeSection) {\n            case SECTION_MFA:\n            case SECTION_SIGNIN:\n            case SECTION_TOKENS:\n            case SECTION_APPS:\n                this.setState({\n                    serverError: null,\n                });\n                break;\n            case SECTION_PASSWORD:\n                this.setState({\n                    currentPassword: '',\n                    newPassword: '',\n                    confirmPassword: '',\n                    serverError: null,\n                    passwordError: null,\n                });\n                break;\n            default:\n            }\n\n            this.props.updateSection('');\n        }\n    }\n\n    createPasswordSection = () => {\n        if (this.props.activeSection === SECTION_PASSWORD) {\n            const inputs = [];\n            let submit;\n\n            if (this.props.user.auth_service === '') {\n                submit = this.submitPassword;\n\n                inputs.push(\n                    <div\n                        key='currentPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.currentPassword'\n                                defaultMessage='Current Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='currentPassword'\n                                autoFocus={true}\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateCurrentPassword}\n                                value={this.state.currentPassword}\n                                aria-label={Utils.localizeMessage('user.settings.security.currentPassword', 'Current Password')}\n                            />\n                        </div>\n                    </div>\n                );\n                inputs.push(\n                    <div\n                        key='newPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.newPassword'\n                                defaultMessage='New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='newPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateNewPassword}\n                                value={this.state.newPassword}\n                                aria-label={Utils.localizeMessage('user.settings.security.newPassword', 'New Password')}\n                            />\n                        </div>\n                    </div>\n                );\n                inputs.push(\n                    <div\n                        key='retypeNewPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.retypePassword'\n                                defaultMessage='Retype New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='confirmPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateConfirmPassword}\n                                value={this.state.confirmPassword}\n                                aria-label={Utils.localizeMessage('user.settings.security.retypePassword', 'Retype New Password')}\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordSamlCantUpdate'\n                                defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.security.password'\n                            defaultMessage='Password'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.savingPassword}\n                    serverError={this.state.serverError}\n                    clientError={this.state.passwordError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe;\n\n        if (this.props.user.auth_service === '') {\n            const d = new Date(this.props.user.last_password_update);\n\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.lastUpdated'\n                    defaultMessage='Last updated {date} at {time}'\n                    values={{\n                        date: (\n                            <FormattedDate\n                                value={d}\n                                day='2-digit'\n                                month='short'\n                                year='numeric'\n                            />\n                        ),\n                        time: (\n                            <FormattedTime\n                                value={d}\n                                hour12={!this.props.militaryTime}\n                                hour='2-digit'\n                                minute='2-digit'\n                            />\n                        ),\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGitlab'\n                    defaultMessage='Login done through GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginLdap'\n                    defaultMessage='Login done through AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginSaml'\n                    defaultMessage='Login done through SAML'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGoogle'\n                    defaultMessage='Login done through Google Apps'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginOffice365'\n                    defaultMessage='Login done through Office 365'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.security.password'\n                        defaultMessage='Password'\n                    />\n                }\n                describe={describe}\n                section={SECTION_PASSWORD}\n                updateSection={this.handleUpdateSection}\n                focused={true}\n            />\n        );\n    }\n\n    createSignInSection = () => {\n        const user = this.props.user;\n\n        if (this.props.activeSection === SECTION_SIGNIN) {\n            let emailOption;\n            let gitlabOption;\n            let googleOption;\n            let office365Option;\n            let ldapOption;\n            let samlOption;\n\n            if (user.auth_service === '') {\n                if (this.props.enableSignUpWithGitLab) {\n                    gitlabOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.GITLAB_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGitlab'\n                                    defaultMessage='Switch to using GitLab SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithGoogle) {\n                    googleOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.GOOGLE_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGoogle'\n                                    defaultMessage='Switch to using Google SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOffice365) {\n                    office365Option = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.OFFICE365_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOffice365'\n                                    defaultMessage='Switch to using Office 365 SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableLdap) {\n                    ldapOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_ldap?email=' + encodeURIComponent(user.email)}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchLdap'\n                                    defaultMessage='Switch to using AD/LDAP'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSaml) {\n                    samlOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.SAML_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchSaml'\n                                    defaultMessage='Switch to using SAML SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n            } else if (this.props.enableSignUpWithEmail) {\n                let link;\n                if (user.auth_service === Constants.LDAP_SERVICE) {\n                    link = '/claim/ldap_to_email?email=' + encodeURIComponent(user.email);\n                } else {\n                    link = '/claim/oauth_to_email?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service;\n                }\n\n                emailOption = (\n                    <div className='padding-bottom x2'>\n                        <Link\n                            className='btn btn-primary'\n                            to={link}\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.switchEmail'\n                                defaultMessage='Switch to using email and password'\n                            />\n                        </Link>\n                        <br/>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            inputs.push(\n                <div key='userSignInOption'>\n                    {emailOption}\n                    {gitlabOption}\n                    {googleOption}\n                    {office365Option}\n                    {ldapOption}\n                    {samlOption}\n                </div>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.security.oneSignin'\n                        defaultMessage='You may only have one sign-in method at a time. Switching sign-in method will send an email notifying you if the change was successful.'\n                    />\n                </span>\n            );\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.security.method', 'Sign-in Method')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = (\n            <FormattedMessage\n                id='user.settings.security.emailPwd'\n                defaultMessage='Email and Password'\n            />\n        );\n        if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.gitlab'\n                    defaultMessage='GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.google'\n                    defaultMessage='Google'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.office365'\n                    defaultMessage='Office 365'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.ldap'\n                    defaultMessage='AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.saml'\n                    defaultMessage='SAML'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.security.method', 'Sign-in Method')}\n                describe={describe}\n                section={SECTION_SIGNIN}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    createOAuthAppsSection = () => {\n        if (this.props.activeSection === SECTION_APPS) {\n            let apps;\n            if (this.state.authorizedApps && this.state.authorizedApps.length > 0) {\n                apps = this.state.authorizedApps.map((app) => {\n                    const homepage = (\n                        <a\n                            href={app.homepage}\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            {app.homepage}\n                        </a>\n                    );\n\n                    return (\n                        <div\n                            key={app.id}\n                            className='padding-bottom x2 authorized-app'\n                        >\n                            <div className='col-sm-10'>\n                                <div className='authorized-app__name'>\n                                    {app.name}\n                                    <span className='authorized-app__url'>\n                                        {' -'} {homepage}\n                                    </span>\n                                </div>\n                                <div className='authorized-app__description'>{app.description}</div>\n                                <div className='authorized-app__deauthorize'>\n                                    <a\n                                        href='#'\n                                        data-app={app.id}\n                                        onClick={this.deauthorizeApp}\n                                    >\n                                        <FormattedMessage\n                                            id='user.settings.security.deauthorize'\n                                            defaultMessage='Deauthorize'\n                                        />\n                                    </a>\n                                </div>\n                            </div>\n                            <div className='col-sm-2 pull-right'>\n                                <img\n                                    alt={app.name}\n                                    src={app.icon_url || icon50}\n                                />\n                            </div>\n                            <br/>\n                        </div>\n                    );\n                });\n            } else {\n                apps = (\n                    <div className='padding-bottom x2 authorized-app'>\n                        <div className='setting-list__hint'>\n                            <FormattedMessage\n                                id='user.settings.security.noApps'\n                                defaultMessage='No OAuth 2.0 Applications are authorized.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            let wrapperClass;\n            let helpText;\n            if (Array.isArray(apps)) {\n                wrapperClass = 'authorized-apps__wrapper';\n\n                helpText = (\n                    <div className='authorized-apps__help'>\n                        <FormattedMessage\n                            id='user.settings.security.oauthAppsHelp'\n                            defaultMessage='Applications act on your behalf to access your data based on the permissions you grant them.'\n                        />\n                    </div>\n                );\n            }\n\n            inputs.push(\n                <div\n                    className={wrapperClass}\n                    key='authorizedApps'\n                >\n                    {apps}\n                </div>\n            );\n\n            const title = (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.security.oauthApps'\n                        defaultMessage='OAuth 2.0 Applications'\n                    />\n                    {helpText}\n                </div>\n            );\n\n            return (\n                <SettingItemMax\n                    title={title}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                    width='full'\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.security.oauthApps', 'OAuth 2.0 Applications')}\n                describe={\n                    <FormattedMessage\n                        id='user.settings.security.oauthAppsDescription'\n                        defaultMessage=\"Click 'Edit' to manage your OAuth 2.0 Applications\"\n                    />\n                }\n                section={SECTION_APPS}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const user = this.props.user;\n\n        const passwordSection = this.createPasswordSection();\n\n        let numMethods = 0;\n        numMethods = this.props.enableSignUpWithGitLab ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithGoogle ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOffice365 ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableLdap ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSaml ? numMethods + 1 : numMethods;\n\n        // If there are other sign-in methods and either email is enabled or the user's account is email, then allow switching\n        let signInSection;\n        if ((this.props.enableSignUpWithEmail || user.auth_service === '') &&\n            numMethods > 0 && this.props.experimentalEnableAuthenticationTransfer) {\n            signInSection = this.createSignInSection();\n        }\n\n        let oauthSection;\n        if (this.props.enableOAuthServiceProvider) {\n            oauthSection = this.createOAuthAppsSection();\n        }\n\n        let tokensSection;\n        if (this.props.canUseAccessTokens) {\n            tokensSection = (\n                <UserAccessTokenSection\n                    user={this.props.user}\n                    active={this.props.activeSection === SECTION_TOKENS}\n                    updateSection={this.handleUpdateSection}\n                    setRequireConfirm={this.props.setRequireConfirm}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <FormattedMessage\n                        id='user.settings.security.close'\n                        defaultMessage='Close'\n                    >\n                        {(ariaLabel) => (\n                            <button\n                                type='button'\n                                className='close'\n                                data-dismiss='modal'\n                                aria-label={ariaLabel}\n                                onClick={this.props.closeModal}\n                            >\n                                <span aria-hidden='true'>{'×'}</span>\n                            </button>\n                        )}\n                    </FormattedMessage>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {passwordSection}\n                    <div className='divider-light'/>\n                    <MfaSection\n                        active={this.props.activeSection === SECTION_MFA}\n                        updateSection={this.handleUpdateSection}\n                    />\n                    <div className='divider-light'/>\n                    {oauthSection}\n                    <div className='divider-light'/>\n                    {tokensSection}\n                    <div className='divider-light'/>\n                    {signInSection}\n                    <div className='divider-dark'/>\n                    <br/>\n                    <ToggleModalButton\n                        className='security-links color--link'\n                        dialogType={AccessHistoryModal}\n                    >\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory.icon'\n                            defaultMessage='Access History Icon'\n                        >\n                            {(title) => (\n                                <i\n                                    className='fa fa-clock-o'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory'\n                            defaultMessage='View Access History'\n                        />\n                    </ToggleModalButton>\n                    <ToggleModalButton\n                        className='security-links color--link margin-top'\n                        dialogType={ActivityLogModal}\n                    >\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions.icon'\n                            defaultMessage='Active Sessions Icon'\n                        >\n                            {(title) => (\n                                <i\n                                    className='fa fa-clock-o'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions'\n                            defaultMessage='View and Logout of Active Sessions'\n                        />\n                    </ToggleModalButton>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getMe, updateUserPassword} from 'mattermost-redux/actions/users';\nimport {getAuthorizedOAuthApps, deauthorizeOAuthApp} from 'mattermost-redux/actions/integrations';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\nimport {Preferences} from 'utils/constants';\n\nimport SecurityTab from './user_settings_security.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n\n    const tokensEnabled = config.EnableUserAccessTokens === 'true';\n    const userHasTokenRole = UserUtils.hasUserAccessTokenRole(ownProps.user.roles) || UserUtils.isSystemAdmin(ownProps.user.roles);\n\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\n\n    return {\n        canUseAccessTokens: tokensEnabled && userHasTokenRole,\n        enableOAuthServiceProvider,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableLdap,\n        enableSaml,\n        enableSignUpWithOffice365,\n        experimentalEnableAuthenticationTransfer,\n        passwordConfig: getPasswordConfig(config),\n        militaryTime: getBool(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMe,\n            updateUserPassword,\n            getAuthorizedOAuthApps,\n            deauthorizeOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SecurityTab);\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, intlShape} from 'react-intl';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nimport Constants from 'utils/constants.jsx';\nimport {isMac} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nexport default class UserSettingsSidebar extends React.Component {\n    static propTypes = {\n        actions: PropTypes.shape({\n\n            /*\n             * Function to save the user's preferences\n             */\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * Current user object\n         */\n        user: PropTypes.object,\n\n        /**\n         * The preferences for closing the unused direct messages channels\n         */\n        closeUnusedDirectMessages: PropTypes.string.isRequired,\n\n        /**\n         * Display the close unused direct messages channels options\n         */\n        showUnusedOption: PropTypes.bool.isRequired,\n\n        /**\n         * Display the channel grouping and sorting sections options\n         */\n        showChannelOrganization: PropTypes.bool.isRequired,\n\n        /**\n         * The preferences to show the channel switcher in the sidebar\n         */\n        channelSwitcherOption: PropTypes.string.isRequired,\n\n        /**\n         * Display the unread channels sections options\n         * The preferences to display channels in sidebar\n         */\n        sidebarPreference: PropTypes.shape({\n\n            /**\n             * Group channels by type or none\n             */\n            grouping: PropTypes.string.isRequired,\n\n            /**\n             * Sort channels by recency or alphabetical order\n             */\n            sorting: PropTypes.string.isRequired,\n        }).isRequired,\n\n        /**\n         * Option for including unread channels at top\n         */\n        unreadsAtTop: PropTypes.string.isRequired,\n\n        /**\n         * Option for including favorite channels at top\n         */\n        favoriteAtTop: PropTypes.string.isRequired,\n\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n    };\n\n    static contextTypes = {\n        intl: intlShape.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = () => {\n        const {\n            closeUnusedDirectMessages,\n            channelSwitcherOption,\n            sidebarPreference: {\n                grouping,\n                sorting,\n            },\n            unreadsAtTop,\n            favoriteAtTop,\n        } = this.props;\n\n        return {\n            settings: {\n                close_unused_direct_messages: closeUnusedDirectMessages,\n                channel_switcher_section: channelSwitcherOption,\n                grouping,\n                unreadsAtTop,\n                favoriteAtTop,\n                sorting,\n            },\n            isSaving: false,\n        };\n    };\n\n    trackSettingChangeIfNecessary = (setting) => {\n        if (this.state.settings[setting] !== this.props.sidebarPreference[setting]) {\n            trackEvent('settings', 'user_settings_update', {field: 'sidebar.' + setting, value: this.state.settings[setting]});\n        }\n    }\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n\n        this.setState(settings);\n    };\n\n    handleSubmit = (setting) => {\n        const {actions, user} = this.props;\n        const preferences = [];\n\n        if (setting === 'channel_grouping' || setting === 'channel_sorting') {\n            const updatedSidebarSettings = {\n                grouping: this.state.settings.grouping,\n                unreads_at_top: this.state.settings.unreadsAtTop,\n                favorite_at_top: this.state.settings.favoriteAtTop,\n                sorting: this.state.settings.sorting,\n            };\n\n            preferences.push({\n                user_id: user.id,\n                category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n                name: '',\n                value: JSON.stringify(updatedSidebarSettings),\n            });\n\n            this.trackSettingChangeIfNecessary('grouping');\n            this.trackSettingChangeIfNecessary('sorting');\n            this.trackSettingChangeIfNecessary('unreadsAtTop');\n            this.trackSettingChangeIfNecessary('favoriteAtTop');\n        } else {\n            preferences.push({\n                user_id: user.id,\n                category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n\n            trackEvent('settings', 'user_settings_update', {field: 'sidebar.' + setting, value: this.state.settings[setting]});\n        }\n\n        this.setState({isSaving: true});\n\n        actions.savePreferences(user.id, preferences).then(() => {\n            this.updateSection('');\n        });\n    };\n\n    getPreviousSection = (sectionName) => {\n        const {showChannelOrganization} = this.props;\n        switch (sectionName) {\n        case 'autoCloseDM':\n            return 'channelSwitcher';\n        case 'groupChannels':\n            return 'dummySectionName';\n        case 'channelSwitcher':\n            return showChannelOrganization ? 'groupChannels' : 'dummySectionName';\n        default:\n            return null;\n        }\n    }\n\n    updateSection = (section) => {\n        this.setState(this.getStateFromProps());\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    };\n\n    renderAutoCloseDMLabel = (value) => {\n        if (value === 'after_seven_days') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.after_seven_days'\n                    defaultMessage='After 7 days with no new messages'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.never'\n                defaultMessage='Never'\n            />\n        );\n    };\n\n    renderAutoCloseDMSection = () => {\n        let contents;\n\n        if (this.props.activeSection === 'autoCloseDM') {\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.autoCloseDMTitle'\n                            defaultMessage='Automatically Close Direct Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='autoCloseDMSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMAfterSevenDays'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'after_seven_days'}\n                                        onChange={this.updateSetting.bind(this, 'close_unused_direct_messages', 'after_seven_days')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.after_seven_days'\n                                        defaultMessage='After 7 days with no new messages'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMNever'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'never'}\n                                        onChange={this.updateSetting.bind(this, 'close_unused_direct_messages', 'never')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                            </div>\n                            <div className='margin-top x3'>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.autoCloseDMDesc'\n                                    defaultMessage='Direct Message conversations can be reopened with the “+” button in the sidebar or using the Channel Switcher (CTRL+K).'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'close_unused_direct_messages'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            contents = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.autoCloseDMTitle'\n                            defaultMessage='Automatically Close Direct Messages'\n                        />\n                    }\n                    describe={this.renderAutoCloseDMLabel(this.state.settings.close_unused_direct_messages)}\n                    section={'autoCloseDM'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-dark'/>\n            </React.Fragment>\n        );\n    };\n\n    renderOrganizationLabel = () => {\n        const {\n            sidebarPreference: {\n                sorting,\n                grouping,\n            },\n            unreadsAtTop,\n            favoriteAtTop,\n        } = this.props;\n\n        const messages = [];\n\n        if (grouping === 'by_type') {\n            messages.push(\n                <FormattedMessage\n                    key='by_type'\n                    id='user.settings.sidebar.groupByTypeShort'\n                    defaultMessage='Group by channel type'\n                />\n            );\n        } else {\n            messages.push(\n                <FormattedMessage\n                    key='none'\n                    id='user.settings.sidebar.groupByNoneShort'\n                    defaultMessage='No grouping'\n                />\n            );\n        }\n\n        let sortingId;\n        let sortingDefaultMessage;\n        if (sorting === 'alpha') {\n            sortingId = t('user.settings.sidebar.sortAlphaShort');\n            sortingDefaultMessage = 'sorted alphabetically';\n        } else {\n            sortingId = t('user.settings.sidebar.sortRecentShort');\n            sortingDefaultMessage = 'sorted by recency';\n        }\n\n        messages.push(\n            <span key='comma'>{', '}</span>\n        );\n\n        messages.push(\n            <FormattedMessage\n                key='sorting'\n                id={sortingId}\n                defaultMessage={sortingDefaultMessage}\n            />\n        );\n\n        let atTopId = null;\n        let atTopDefaultMessage = null;\n        if (unreadsAtTop === 'true' && favoriteAtTop === 'false') {\n            atTopId = t('user.settings.sidebar.unreadsShort');\n            atTopDefaultMessage = 'Unreads grouped separately';\n        } else if (unreadsAtTop === 'false' && favoriteAtTop === 'true') {\n            atTopId = t('user.settings.sidebar.favoritesShort');\n            atTopDefaultMessage = 'Favorites grouped separately';\n        } else if (unreadsAtTop === 'true' && favoriteAtTop === 'true') {\n            atTopId = t('user.settings.sidebar.unreadsFavoritesShort');\n            atTopDefaultMessage = 'Unreads and favorites grouped separately';\n        }\n\n        if (atTopId) {\n            messages.push(\n                <br key='break'/>\n            );\n\n            messages.push(\n                <FormattedMessage\n                    key='atTop'\n                    id={atTopId}\n                    defaultMessage={atTopDefaultMessage}\n                />\n            );\n        }\n\n        return messages;\n    };\n\n    renderChannelSwitcherLabel = (value) => {\n        if (value === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.on'\n                    defaultMessage='On'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.off'\n                defaultMessage='Off'\n            />\n        );\n    };\n\n    renderChannelOrganizationSection = () => {\n        const {\n            grouping,\n            sorting,\n        } = this.state.settings;\n\n        let contents;\n\n        if (this.props.activeSection === 'groupChannels') {\n            const inputs = [];\n\n            inputs.push(\n                <fieldset key='groupingSectionSetting'>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupChannelsTitle'\n                            defaultMessage='Channel grouping'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='byTypeOption'\n                                type='radio'\n                                name='groupChannels'\n                                checked={grouping === 'by_type'}\n                                onChange={this.updateSetting.bind(this, 'grouping', 'by_type')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.groupByType'\n                                defaultMessage='Channels grouped by type'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='noneOption'\n                                type='radio'\n                                name='groupChannels'\n                                checked={grouping === 'none'}\n                                onChange={this.updateSetting.bind(this, 'grouping', 'none')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.groupByNone'\n                                defaultMessage='Combine all channel types'\n                            />\n                        </label>\n                    </div>\n                    <div className='margin-top x3'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupDesc'\n                            defaultMessage='Group channels by type, or combine all types into a list.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            inputs.push(<hr key='sortingDivider'/>);\n\n            inputs.push(\n                <fieldset key='sortingOptions'>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.sortChannelsTitle'\n                            defaultMessage='Channel sorting'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='recentSectionEnabled'\n                                type='radio'\n                                name='sortChannels'\n                                checked={sorting === 'recent'}\n                                onChange={this.updateSetting.bind(this, 'sorting', 'recent')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.sortRecent'\n                                defaultMessage='Recency'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='alphaSectionEnabled'\n                                type='radio'\n                                name='sortChannels'\n                                checked={sorting === 'alpha'}\n                                onChange={this.updateSetting.bind(this, 'sorting', 'alpha')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.sortAlpha'\n                                defaultMessage='Alphabetically'\n                            />\n                        </label>\n                    </div>\n                    <div className='margin-top x3'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.sortDesc'\n                            defaultMessage='Sort channels alphabetically, or by most recent post.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            inputs.push(<hr key='divider'/>);\n\n            inputs.push(\n                <fieldset key='unreadOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='unreadAtTopOption'\n                                type='checkbox'\n                                checked={this.state.settings.unreadsAtTop === 'true'}\n                                onChange={(e) => this.updateSetting('unreadsAtTop', (e.target.checked).toString())}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.unreads'\n                                defaultMessage='Unreads grouped separately'\n                            />\n                        </label>\n                    </div>\n                    <div className='margin-top x3'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.unreadsDesc'\n                            defaultMessage='Group unread channels separately until read.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            inputs.push(<hr key='groupingDivider'/>);\n\n            inputs.push(\n                <fieldset key='favoriteOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='favoriteAtTopOption'\n                                type='checkbox'\n                                checked={this.state.settings.favoriteAtTop === 'true'}\n                                onChange={(e) => this.updateSetting('favoriteAtTop', (e.target.checked).toString())}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.favorites'\n                                defaultMessage='Favorites grouped separately'\n                            />\n                        </label>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.sidebar.favoritesDesc'\n                            defaultMessage='Channels marked as favorites will be grouped separately.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupAndSortChannelsTitle'\n                            defaultMessage='Channel grouping and sorting'\n                        />\n                    }\n                    inputs={inputs}\n                    setting={'channel_grouping'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            contents = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupAndSortChannelsTitle'\n                            defaultMessage='Channel grouping and sorting'\n                        />\n                    }\n                    describe={this.renderOrganizationLabel()}\n                    section={'groupChannels'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-light'/>\n            </React.Fragment>\n        );\n    };\n\n    renderChannelSwitcherSection = () => {\n        let channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.windows');\n        let channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CTRL + K.';\n        if (isMac()) {\n            channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.mac');\n            channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CMD + K.';\n        }\n\n        const helpChannelSwitcherText = (\n            <FormattedMessage\n                id={channelSwitcherSectionDescId}\n                defaultMessage={channelSwitcherSectionDescDefault}\n            />\n        );\n\n        if (this.props.activeSection === 'channelSwitcher') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.channelSwitcherSectionTitle'\n                            defaultMessage='Channel Switcher'\n                        />\n                    }\n                    inputs={[\n                        <div key='channelSwitcherSectionSetting'>\n                            <div\n                                id='channelSwitcherRadioOn'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionEnabled'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'true'}\n                                        onChange={this.updateSetting.bind(this, 'channel_switcher_section', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div\n                                id='channelSwitcherRadioOff'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionOff'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'channel_switcher_section', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div id='channelSwitcherHelpText'>\n                                <br/>\n                                {helpChannelSwitcherText}\n                            </div>\n                        </div>,\n                    ]}\n                    setting={'channel_switcher_section'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.sidebar.channelSwitcherSectionTitle'\n                        defaultMessage='Channel Switcher'\n                    />\n                }\n                describe={this.renderChannelSwitcherLabel(this.props.channelSwitcherOption)}\n                section={'channelSwitcher'}\n                updateSection={this.updateSection}\n            />\n        );\n    };\n\n    render() {\n        const {showUnusedOption, showChannelOrganization} = this.props;\n        const {formatMessage} = this.context.intl;\n\n        const channelOrganizationSection = showChannelOrganization ? this.renderChannelOrganizationSection() : null;\n        const autoCloseDMSection = showUnusedOption ? this.renderAutoCloseDMSection() : null;\n        const channelSwitcherSection = this.renderChannelSwitcherSection();\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <i\n                                className='fa fa-angle-left'\n                                title={formatMessage({id: 'generic_icons.collapse', defaultMessage: 'Collapse Icon'})}\n                                onClick={this.props.collapseModal}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    id='sidebarTitle'\n                    className='user-settings'\n                >\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {channelOrganizationSection}\n                    {channelSwitcherSection}\n                    {showUnusedOption ? <div className='divider-light'/> : <div className='divider-dark'/>}\n                    {autoCloseDMSection}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference, getSidebarPreferences} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport UserSettingsSidebar from './user_settings_sidebar.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const closeUnusedDirectMessages = getPreference(\n        state,\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\n        'close_unused_direct_messages',\n        'after_seven_days'\n    );\n\n    const channelSwitcherOption = getPreference(\n        state,\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\n        'channel_switcher_section',\n        'true'\n    );\n\n    const sidebarPreference = getSidebarPreferences(state);\n\n    return {\n        closeUnusedDirectMessages,\n        sidebarPreference,\n        unreadsAtTop: sidebarPreference.unreads_at_top,\n        favoriteAtTop: sidebarPreference.favorite_at_top,\n        channelSwitcherOption,\n        showChannelOrganization: config.ExperimentalChannelOrganization === 'true',\n        showUnusedOption: config.CloseUnusedDirectMessages === 'true',\n        user: getCurrentUser(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsSidebar);\n","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport AdvancedTab from './advanced';\nimport DisplayTab from './display';\nimport GeneralTab from './general';\nimport NotificationsTab from './notifications';\nimport SecurityTab from './security';\nimport SidebarTab from './sidebar';\n\nexport default class UserSettings extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        activeTab: PropTypes.string,\n        activeSection: PropTypes.string,\n        updateSection: PropTypes.func,\n        updateTab: PropTypes.func,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n    }\n\n    render() {\n        if (this.props.activeTab === 'general') {\n            return (\n                <div>\n                    <GeneralTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        updateTab={this.props.updateTab}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'security') {\n            return (\n                <div>\n                    <SecurityTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'notifications') {\n            return (\n                <div>\n                    <NotificationsTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'display') {\n            return (\n                <div>\n                    <DisplayTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'sidebar') {\n            return (\n                <div>\n                    <SidebarTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'advanced') {\n            return (\n                <div>\n                    <AdvancedTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        }\n\n        return <div/>;\n    }\n}","// Copyright (c) 2019-present Vue Technology LLC All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport UserSettings from './user_settings.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        user: getCurrentUser(state),\n    };\n}\n\nexport default connect(mapStateToProps)(UserSettings);\n"],"sourceRoot":""}